
Scalak_Pure_Power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  00001882  00001916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001882  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f2  008001ce  008001ce  000019e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000058e8  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015f9  00000000  00000000  0000768c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a16  00000000  00000000  00008c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a78  00000000  00000000  0000a69c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012b3  00000000  00000000  0000b114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000362e  00000000  00000000  0000c3c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  0000f9f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_1>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_9>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	31 02       	muls	r19, r17

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e2 e8       	ldi	r30, 0x82	; 130
      7e:	f8 e1       	ldi	r31, 0x18	; 24
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	ae 3c       	cpi	r26, 0xCE	; 206
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	22 e0       	ldi	r18, 0x02	; 2
      8e:	ae ec       	ldi	r26, 0xCE	; 206
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a0 3c       	cpi	r26, 0xC0	; 192
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 39 0c 	call	0x1872	; 0x1872 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
      b6:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZZ4mainENUlvE0_4_FUNEv>:
				case STATE_STOPPED:		led.set(255, 0, 0);		break;
			}
			led.show();
			if(remote.getState()==STATE_PROGRAMING) _delay_ms(200);
		}, []() {
			lastEnemy = panel.getState();
      be:	84 e1       	ldi	r24, 0x14	; 20
      c0:	92 e0       	ldi	r25, 0x02	; 2
      c2:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN6Switch8getStateEv>
      c6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
			
			//if(remote.getMode()==MANUAL) _delay_ms(5000);

			motors.setSpeeds(255);
      ca:	6f ef       	ldi	r22, 0xFF	; 255
      cc:	89 e1       	ldi	r24, 0x19	; 25
      ce:	92 e0       	ldi	r25, 0x02	; 2
      d0:	0e 94 81 04 	call	0x902	; 0x902 <_ZN7drv88389setSpeedsEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d4:	2f e7       	ldi	r18, 0x7F	; 127
      d6:	89 ea       	ldi	r24, 0xA9	; 169
      d8:	93 e0       	ldi	r25, 0x03	; 3
      da:	21 50       	subi	r18, 0x01	; 1
      dc:	80 40       	sbci	r24, 0x00	; 0
      de:	90 40       	sbci	r25, 0x00	; 0
      e0:	e1 f7       	brne	.-8      	; 0xda <_ZZ4mainENUlvE0_4_FUNEv+0x1c>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <_ZZ4mainENUlvE0_4_FUNEv+0x26>
      e4:	00 00       	nop
      e6:	08 95       	ret

000000e8 <_ZZ4mainENUlvE_4_FUNEv>:
	//remote.print();

    while(true) {
		
		remote.wait(&serial, &decoder, []() {
			motors.stop();
      e8:	89 e1       	ldi	r24, 0x19	; 25
      ea:	92 e0       	ldi	r25, 0x02	; 2
      ec:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7drv88384stopEv>
			beep.stop();
      f0:	85 e1       	ldi	r24, 0x15	; 21
      f2:	92 e0       	ldi	r25, 0x02	; 2
      f4:	0e 94 6a 07 	call	0xed4	; 0xed4 <_ZN6Buzzer4stopEv>
			switch(remote.getState()) {
      f8:	8d e0       	ldi	r24, 0x0D	; 13
      fa:	92 e0       	ldi	r25, 0x02	; 2
      fc:	0e 94 66 07 	call	0xecc	; 0xecc <_ZN11StartModule8getStateEv>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	71 f0       	breq	.+28     	; 0x120 <_ZZ4mainENUlvE_4_FUNEv+0x38>
     104:	85 30       	cpi	r24, 0x05	; 5
     106:	21 f0       	breq	.+8      	; 0x110 <_ZZ4mainENUlvE_4_FUNEv+0x28>
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	09 f0       	breq	.+2      	; 0x10e <_ZZ4mainENUlvE_4_FUNEv+0x26>
     10c:	4d c0       	rjmp	.+154    	; 0x1a8 <_ZZ4mainENUlvE_4_FUNEv+0xc0>
     10e:	10 c0       	rjmp	.+32     	; 0x130 <_ZZ4mainENUlvE_4_FUNEv+0x48>
		Leds(int number_a) {
			number = number_a;
			//colors = new rgb_color[number];
		}
		void set(int r, int g, int b) {
			for(int i=0; i<number; i++)
     110:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <led>
     114:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <led+0x1>
     118:	18 16       	cp	r1, r24
     11a:	19 06       	cpc	r1, r25
     11c:	a4 f1       	brlt	.+104    	; 0x186 <_ZZ4mainENUlvE_4_FUNEv+0x9e>
     11e:	44 c0       	rjmp	.+136    	; 0x1a8 <_ZZ4mainENUlvE_4_FUNEv+0xc0>
     120:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <led>
     124:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <led+0x1>
     128:	18 16       	cp	r1, r24
     12a:	19 06       	cpc	r1, r25
     12c:	d4 f0       	brlt	.+52     	; 0x162 <_ZZ4mainENUlvE_4_FUNEv+0x7a>
     12e:	3c c0       	rjmp	.+120    	; 0x1a8 <_ZZ4mainENUlvE_4_FUNEv+0xc0>
     130:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <led>
     134:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <led+0x1>
     138:	18 16       	cp	r1, r24
     13a:	19 06       	cpc	r1, r25
     13c:	ac f5       	brge	.+106    	; 0x1a8 <_ZZ4mainENUlvE_4_FUNEv+0xc0>
     13e:	e1 ed       	ldi	r30, 0xD1	; 209
     140:	f1 e0       	ldi	r31, 0x01	; 1
     142:	9c 01       	movw	r18, r24
     144:	22 0f       	add	r18, r18
     146:	33 1f       	adc	r19, r19
     148:	28 0f       	add	r18, r24
     14a:	39 1f       	adc	r19, r25
     14c:	2f 52       	subi	r18, 0x2F	; 47
     14e:	3e 4f       	sbci	r19, 0xFE	; 254
		red = g;
		green = r;
		blue = b;
	}
	void set(int r, int g, int b) {
		red = g;
     150:	8f ef       	ldi	r24, 0xFF	; 255
     152:	80 83       	st	Z, r24
		green = r;
     154:	81 83       	std	Z+1, r24	; 0x01
		blue = b;
     156:	12 82       	std	Z+2, r1	; 0x02
     158:	33 96       	adiw	r30, 0x03	; 3
		Leds(int number_a) {
			number = number_a;
			//colors = new rgb_color[number];
		}
		void set(int r, int g, int b) {
			for(int i=0; i<number; i++)
     15a:	e2 17       	cp	r30, r18
     15c:	f3 07       	cpc	r31, r19
     15e:	c9 f7       	brne	.-14     	; 0x152 <_ZZ4mainENUlvE_4_FUNEv+0x6a>
     160:	23 c0       	rjmp	.+70     	; 0x1a8 <_ZZ4mainENUlvE_4_FUNEv+0xc0>
     162:	e1 ed       	ldi	r30, 0xD1	; 209
     164:	f1 e0       	ldi	r31, 0x01	; 1
     166:	9c 01       	movw	r18, r24
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	82 0f       	add	r24, r18
     16e:	93 1f       	adc	r25, r19
     170:	8f 52       	subi	r24, 0x2F	; 47
     172:	9e 4f       	sbci	r25, 0xFE	; 254
		blue = b;
	}
	void set(int r, int g, int b) {
		red = g;
		green = r;
		blue = b;
     174:	2f ef       	ldi	r18, 0xFF	; 255
		red = g;
		green = r;
		blue = b;
	}
	void set(int r, int g, int b) {
		red = g;
     176:	10 82       	st	Z, r1
		green = r;
     178:	11 82       	std	Z+1, r1	; 0x01
		blue = b;
     17a:	22 83       	std	Z+2, r18	; 0x02
     17c:	33 96       	adiw	r30, 0x03	; 3
		Leds(int number_a) {
			number = number_a;
			//colors = new rgb_color[number];
		}
		void set(int r, int g, int b) {
			for(int i=0; i<number; i++)
     17e:	e8 17       	cp	r30, r24
     180:	f9 07       	cpc	r31, r25
     182:	c9 f7       	brne	.-14     	; 0x176 <_ZZ4mainENUlvE_4_FUNEv+0x8e>
     184:	11 c0       	rjmp	.+34     	; 0x1a8 <_ZZ4mainENUlvE_4_FUNEv+0xc0>
     186:	e1 ed       	ldi	r30, 0xD1	; 209
     188:	f1 e0       	ldi	r31, 0x01	; 1
     18a:	9c 01       	movw	r18, r24
     18c:	22 0f       	add	r18, r18
     18e:	33 1f       	adc	r19, r19
     190:	82 0f       	add	r24, r18
     192:	93 1f       	adc	r25, r19
     194:	8f 52       	subi	r24, 0x2F	; 47
     196:	9e 4f       	sbci	r25, 0xFE	; 254
		green = r;
		blue = b;
	}
	void set(int r, int g, int b) {
		red = g;
		green = r;
     198:	2f ef       	ldi	r18, 0xFF	; 255
		red = g;
		green = r;
		blue = b;
	}
	void set(int r, int g, int b) {
		red = g;
     19a:	10 82       	st	Z, r1
		green = r;
     19c:	21 83       	std	Z+1, r18	; 0x01
		blue = b;
     19e:	12 82       	std	Z+2, r1	; 0x02
     1a0:	33 96       	adiw	r30, 0x03	; 3
		Leds(int number_a) {
			number = number_a;
			//colors = new rgb_color[number];
		}
		void set(int r, int g, int b) {
			for(int i=0; i<number; i++)
     1a2:	e8 17       	cp	r30, r24
     1a4:	f9 07       	cpc	r31, r25
     1a6:	c9 f7       	brne	.-14     	; 0x19a <_ZZ4mainENUlvE_4_FUNEv+0xb2>
		void set(rgb_color(*func)(int, double), double variable) {
			for(int i=0; i<number; i++)
				set(i, func(i, variable));
		}
		void show() {
			led_strip_write(colors, number);
     1a8:	40 91 cf 01 	lds	r20, 0x01CF	; 0x8001cf <led>
     1ac:	50 91 d0 01 	lds	r21, 0x01D0	; 0x8001d0 <led+0x1>
     1b0:	61 ed       	ldi	r22, 0xD1	; 209
     1b2:	71 e0       	ldi	r23, 0x01	; 1
     1b4:	8f ec       	ldi	r24, 0xCF	; 207
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN4Leds15led_strip_writeEP9rgb_colorj>
				case STATE_PROGRAMING:	led.set(255, 255, 0);	break;
				case STATE_POWER_ON:	led.set(0, 0, 255);		break;
				case STATE_STOPPED:		led.set(255, 0, 0);		break;
			}
			led.show();
			if(remote.getState()==STATE_PROGRAMING) _delay_ms(200);
     1bc:	8d e0       	ldi	r24, 0x0D	; 13
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	0e 94 66 07 	call	0xecc	; 0xecc <_ZN11StartModule8getStateEv>
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	49 f4       	brne	.+18     	; 0x1da <_ZZ4mainENUlvE_4_FUNEv+0xf2>
     1c8:	2f ef       	ldi	r18, 0xFF	; 255
     1ca:	81 ee       	ldi	r24, 0xE1	; 225
     1cc:	94 e0       	ldi	r25, 0x04	; 4
     1ce:	21 50       	subi	r18, 0x01	; 1
     1d0:	80 40       	sbci	r24, 0x00	; 0
     1d2:	90 40       	sbci	r25, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <_ZZ4mainENUlvE_4_FUNEv+0xe6>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <_ZZ4mainENUlvE_4_FUNEv+0xf0>
     1d8:	00 00       	nop
     1da:	08 95       	ret

000001dc <__vector_1>:

Stream serial;
DecoderRC5 decoder;
PID pid(127.5, 0, 0);

ISR(INT0_vect) {
     1dc:	1f 92       	push	r1
     1de:	0f 92       	push	r0
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	0f 92       	push	r0
     1e4:	11 24       	eor	r1, r1
     1e6:	2f 93       	push	r18
     1e8:	3f 93       	push	r19
     1ea:	4f 93       	push	r20
     1ec:	5f 93       	push	r21
     1ee:	6f 93       	push	r22
     1f0:	7f 93       	push	r23
     1f2:	8f 93       	push	r24
     1f4:	9f 93       	push	r25
     1f6:	af 93       	push	r26
     1f8:	bf 93       	push	r27
     1fa:	ef 93       	push	r30
     1fc:	ff 93       	push	r31
	decoder.INT_ISR();
     1fe:	85 e3       	ldi	r24, 0x35	; 53
     200:	92 e0       	ldi	r25, 0x02	; 2
     202:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN10DecoderRC57INT_ISREv>
}
     206:	ff 91       	pop	r31
     208:	ef 91       	pop	r30
     20a:	bf 91       	pop	r27
     20c:	af 91       	pop	r26
     20e:	9f 91       	pop	r25
     210:	8f 91       	pop	r24
     212:	7f 91       	pop	r23
     214:	6f 91       	pop	r22
     216:	5f 91       	pop	r21
     218:	4f 91       	pop	r20
     21a:	3f 91       	pop	r19
     21c:	2f 91       	pop	r18
     21e:	0f 90       	pop	r0
     220:	0f be       	out	0x3f, r0	; 63
     222:	0f 90       	pop	r0
     224:	1f 90       	pop	r1
     226:	18 95       	reti

00000228 <__vector_9>:

ISR(TIMER2_OVF_vect) {
     228:	1f 92       	push	r1
     22a:	0f 92       	push	r0
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	0f 92       	push	r0
     230:	11 24       	eor	r1, r1
     232:	2f 93       	push	r18
     234:	3f 93       	push	r19
     236:	4f 93       	push	r20
     238:	5f 93       	push	r21
     23a:	6f 93       	push	r22
     23c:	7f 93       	push	r23
     23e:	8f 93       	push	r24
     240:	9f 93       	push	r25
     242:	af 93       	push	r26
     244:	bf 93       	push	r27
     246:	ef 93       	push	r30
     248:	ff 93       	push	r31
	decoder.TIMER_ISR();
     24a:	85 e3       	ldi	r24, 0x35	; 53
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_ZN10DecoderRC59TIMER_ISREv>
}
     252:	ff 91       	pop	r31
     254:	ef 91       	pop	r30
     256:	bf 91       	pop	r27
     258:	af 91       	pop	r26
     25a:	9f 91       	pop	r25
     25c:	8f 91       	pop	r24
     25e:	7f 91       	pop	r23
     260:	6f 91       	pop	r22
     262:	5f 91       	pop	r21
     264:	4f 91       	pop	r20
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <_Z5fightdh>:
StartModule remote;
Leds led(1);

bool lastEnemy = false;

void fight(double processVarible, uint8_t targetPower) {
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	6b 01       	movw	r12, r22
     28e:	7c 01       	movw	r14, r24
     290:	c4 2f       	mov	r28, r20
	lastEnemy = (processVarible>0);
     292:	d1 e0       	ldi	r29, 0x01	; 1
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	a9 01       	movw	r20, r18
     29a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__gesf2>
     29e:	18 16       	cp	r1, r24
     2a0:	0c f0       	brlt	.+2      	; 0x2a4 <_Z5fightdh+0x30>
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
     2a4:	d0 93 ce 01 	sts	0x01CE, r29	; 0x8001ce <__data_end>

	double turn = pid.calculate(processVarible, 0);
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	10 e0       	ldi	r17, 0x00	; 0
     2ac:	98 01       	movw	r18, r16
     2ae:	b7 01       	movw	r22, r14
     2b0:	a6 01       	movw	r20, r12
     2b2:	8d e1       	ldi	r24, 0x1D	; 29
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN3PID9calculateEdd>
     2ba:	4b 01       	movw	r8, r22
     2bc:	5c 01       	movw	r10, r24

	uint8_t powerL = drv8838::fix((double)(targetPower)+turn);
     2be:	6c 2f       	mov	r22, r28
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__floatunsisf>
     2ca:	6b 01       	movw	r12, r22
     2cc:	7c 01       	movw	r14, r24
     2ce:	9b 01       	movw	r18, r22
     2d0:	ac 01       	movw	r20, r24
     2d2:	c5 01       	movw	r24, r10
     2d4:	b4 01       	movw	r22, r8
     2d6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__addsf3>
     2da:	0e 94 bf 0a 	call	0x157e	; 0x157e <__fixunssfsi>
     2de:	86 2f       	mov	r24, r22
     2e0:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN7drv88383fixEh>
     2e4:	c8 2f       	mov	r28, r24
	uint8_t powerR = drv8838::fix((double)(targetPower)-turn);
     2e6:	a5 01       	movw	r20, r10
     2e8:	94 01       	movw	r18, r8
     2ea:	c7 01       	movw	r24, r14
     2ec:	b6 01       	movw	r22, r12
     2ee:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__subsf3>
     2f2:	0e 94 bf 0a 	call	0x157e	; 0x157e <__fixunssfsi>
     2f6:	86 2f       	mov	r24, r22
     2f8:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN7drv88383fixEh>

	motors.setSpeeds(powerL, powerR);
     2fc:	48 2f       	mov	r20, r24
     2fe:	6c 2f       	mov	r22, r28
     300:	89 e1       	ldi	r24, 0x19	; 25
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN7drv88389setSpeedsEhh>
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	bf 90       	pop	r11
     31a:	af 90       	pop	r10
     31c:	9f 90       	pop	r9
     31e:	8f 90       	pop	r8
     320:	08 95       	ret

00000322 <_Z6searchv>:

void search() {
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
	uint8_t powerL = 0;
	uint8_t powerR = 0;

	switch(edge.getHorizon()) {
     326:	86 e1       	ldi	r24, 0x16	; 22
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	0e 94 df 06 	call	0xdbe	; 0xdbe <_ZN5QTR1A10getHorizonEv>
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	19 f0       	breq	.+6      	; 0x338 <_Z6searchv+0x16>
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	31 f0       	breq	.+12     	; 0x342 <_Z6searchv+0x20>
     336:	0b c0       	rjmp	.+22     	; 0x34e <_Z6searchv+0x2c>
		case 0:                                     break;
		case 1: lastEnemy = false;  powerL = -150;  break;
     338:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <__data_end>
		case 2: lastEnemy = true;   powerR = -150;  break;
		case 3:                                     break;
	}

	if(lastEnemy) powerL = 255;
	else          powerR = 255;
     33c:	df ef       	ldi	r29, 0xFF	; 255
	uint8_t powerL = 0;
	uint8_t powerR = 0;

	switch(edge.getHorizon()) {
		case 0:                                     break;
		case 1: lastEnemy = false;  powerL = -150;  break;
     33e:	ca e6       	ldi	r28, 0x6A	; 106
     340:	0f c0       	rjmp	.+30     	; 0x360 <_Z6searchv+0x3e>
		case 2: lastEnemy = true;   powerR = -150;  break;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
     348:	da e6       	ldi	r29, 0x6A	; 106
		case 3:                                     break;
	}

	if(lastEnemy) powerL = 255;
     34a:	cf ef       	ldi	r28, 0xFF	; 255
     34c:	09 c0       	rjmp	.+18     	; 0x360 <_Z6searchv+0x3e>
     34e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
     352:	81 11       	cpse	r24, r1
     354:	03 c0       	rjmp	.+6      	; 0x35c <_Z6searchv+0x3a>
	else          powerR = 255;
     356:	df ef       	ldi	r29, 0xFF	; 255

	motors.setSpeeds(powerL, powerR);
}

void search() {
	uint8_t powerL = 0;
     358:	c0 e0       	ldi	r28, 0x00	; 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <_Z6searchv+0x3e>
	uint8_t powerR = 0;
     35c:	d0 e0       	ldi	r29, 0x00	; 0
		case 1: lastEnemy = false;  powerL = -150;  break;
		case 2: lastEnemy = true;   powerR = -150;  break;
		case 3:                                     break;
	}

	if(lastEnemy) powerL = 255;
     35e:	cf ef       	ldi	r28, 0xFF	; 255
	else          powerR = 255;

	pid.reset();
     360:	8d e1       	ldi	r24, 0x1D	; 29
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	0e 94 33 03 	call	0x666	; 0x666 <_ZN3PID5resetEv>
	motors.setSpeeds(powerL, powerR);
     368:	4d 2f       	mov	r20, r29
     36a:	6c 2f       	mov	r22, r28
     36c:	89 e1       	ldi	r24, 0x19	; 25
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN7drv88389setSpeedsEhh>
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <main>:

int main() {
	
	serial.begin(9600);
     37a:	40 e8       	ldi	r20, 0x80	; 128
     37c:	55 e2       	ldi	r21, 0x25	; 37
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8e e3       	ldi	r24, 0x3E	; 62
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN6Stream5beginEm>
	decoder.initialize();
     38a:	85 e3       	ldi	r24, 0x35	; 53
     38c:	92 e0       	ldi	r25, 0x02	; 2
     38e:	0e 94 4d 03 	call	0x69a	; 0x69a <_ZN10DecoderRC510initializeEv>
	motors.initialize(FORWARD, BACKWARD);
     392:	41 e0       	ldi	r20, 0x01	; 1
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	89 e1       	ldi	r24, 0x19	; 25
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	0e 94 a2 04 	call	0x944	; 0x944 <_ZN7drv883810initializeEhh>
	dist.initialize();
     39e:	88 e1       	ldi	r24, 0x18	; 24
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN7IR38kHz10initializeEv>
	edge.initialize(AUTO, 500);
     3a6:	44 ef       	ldi	r20, 0xF4	; 244
     3a8:	62 e0       	ldi	r22, 0x02	; 2
     3aa:	86 e1       	ldi	r24, 0x16	; 22
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN5QTR1A10initializeEhh>
	beep.initialize();
     3b2:	85 e1       	ldi	r24, 0x15	; 21
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN6Buzzer10initializeEv>
	panel.initialize();
     3ba:	84 e1       	ldi	r24, 0x14	; 20
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZN6Switch10initializeEv>
	//remote.initialize(MANUAL);
	remote.initialize(MODULE);
     3c2:	65 e1       	ldi	r22, 0x15	; 21
     3c4:	8d e0       	ldi	r24, 0x0D	; 13
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN11StartModule10initializeEh>
		Leds(int number_a) {
			number = number_a;
			//colors = new rgb_color[number];
		}
		void set(int r, int g, int b) {
			for(int i=0; i<number; i++)
     3cc:	cf ec       	ldi	r28, 0xCF	; 207
     3ce:	d1 e0       	ldi	r29, 0x01	; 1
		red = g;
		green = r;
		blue = b;
	}
	void set(int r, int g, int b) {
		red = g;
     3d0:	ff 24       	eor	r15, r15
     3d2:	fa 94       	dec	r15
			
			//if(remote.getMode()==MANUAL) _delay_ms(5000);

			motors.setSpeeds(255);
			_delay_ms(150);
		});
     3d4:	0f e5       	ldi	r16, 0x5F	; 95
     3d6:	10 e0       	ldi	r17, 0x00	; 0
     3d8:	24 e7       	ldi	r18, 0x74	; 116
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	45 e3       	ldi	r20, 0x35	; 53
     3de:	52 e0       	ldi	r21, 0x02	; 2
     3e0:	6e e3       	ldi	r22, 0x3E	; 62
     3e2:	72 e0       	ldi	r23, 0x02	; 2
     3e4:	8d e0       	ldi	r24, 0x0D	; 13
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN11StartModule4waitEP6StreamP10DecoderRC5PFvvES5_>
		Leds(int number_a) {
			number = number_a;
			//colors = new rgb_color[number];
		}
		void set(int r, int g, int b) {
			for(int i=0; i<number; i++)
     3ec:	88 81       	ld	r24, Y
     3ee:	99 81       	ldd	r25, Y+1	; 0x01
     3f0:	18 16       	cp	r1, r24
     3f2:	19 06       	cpc	r1, r25
     3f4:	84 f4       	brge	.+32     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3f6:	e1 ed       	ldi	r30, 0xD1	; 209
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	9c 01       	movw	r18, r24
     3fc:	22 0f       	add	r18, r18
     3fe:	33 1f       	adc	r19, r19
     400:	82 0f       	add	r24, r18
     402:	93 1f       	adc	r25, r19
     404:	8f 52       	subi	r24, 0x2F	; 47
     406:	9e 4f       	sbci	r25, 0xFE	; 254
		red = g;
		green = r;
		blue = b;
	}
	void set(int r, int g, int b) {
		red = g;
     408:	f0 82       	st	Z, r15
		green = r;
     40a:	11 82       	std	Z+1, r1	; 0x01
		blue = b;
     40c:	12 82       	std	Z+2, r1	; 0x02
     40e:	33 96       	adiw	r30, 0x03	; 3
		Leds(int number_a) {
			number = number_a;
			//colors = new rgb_color[number];
		}
		void set(int r, int g, int b) {
			for(int i=0; i<number; i++)
     410:	e8 17       	cp	r30, r24
     412:	f9 07       	cpc	r31, r25
     414:	c9 f7       	brne	.-14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		
		led.set(0, 255, 0);
		
		double processVarible = dist.getError(SINGLE);
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	88 e1       	ldi	r24, 0x18	; 24
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	0e 94 29 06 	call	0xc52	; 0xc52 <_ZN7IR38kHz8getErrorEh>
     420:	4b 01       	movw	r8, r22
     422:	5c 01       	movw	r10, r24

		if(!isnan(processVarible)) fight(processVarible, 255);
     424:	9b 01       	movw	r18, r22
     426:	ac 01       	movw	r20, r24
     428:	0e 94 12 0c 	call	0x1824	; 0x1824 <__unordsf2>
     42c:	81 11       	cpse	r24, r1
     42e:	06 c0       	rjmp	.+12     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     430:	4f 2d       	mov	r20, r15
     432:	c5 01       	movw	r24, r10
     434:	b4 01       	movw	r22, r8
     436:	0e 94 3a 01 	call	0x274	; 0x274 <_Z5fightdh>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		else search();
     43c:	0e 94 91 01 	call	0x322	; 0x322 <_Z6searchv>
		void set(rgb_color(*func)(int, double), double variable) {
			for(int i=0; i<number; i++)
				set(i, func(i, variable));
		}
		void show() {
			led_strip_write(colors, number);
     440:	48 81       	ld	r20, Y
     442:	59 81       	ldd	r21, Y+1	; 0x01
     444:	61 ed       	ldi	r22, 0xD1	; 209
     446:	71 e0       	ldi	r23, 0x01	; 1
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN4Leds15led_strip_writeEP9rgb_colorj>
     44e:	2f e7       	ldi	r18, 0x7F	; 127
     450:	88 e3       	ldi	r24, 0x38	; 56
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45e:	00 00       	nop
     460:	b9 cf       	rjmp	.-142    	; 0x3d4 <main+0x5a>

00000462 <_GLOBAL__sub_I_serial>:
		//panel.print(&serial);
		
		led.show();
		_delay_ms(50);
    }
     462:	cf 92       	push	r12
     464:	df 92       	push	r13
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
#include "RC5.h"
#include "WS2812B.h"
#include "Scalak_lib.h"
#include "PID_Controller.h"

Stream serial;
     46e:	8e e3       	ldi	r24, 0x3E	; 62
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN6StreamC1Ev>
DecoderRC5 decoder;
     476:	85 e3       	ldi	r24, 0x35	; 53
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN10DecoderRC5C1Ev>
PID pid(127.5, 0, 0);
     47e:	c1 2c       	mov	r12, r1
     480:	d1 2c       	mov	r13, r1
     482:	76 01       	movw	r14, r12
     484:	97 01       	movw	r18, r14
     486:	86 01       	movw	r16, r12
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	6f ef       	ldi	r22, 0xFF	; 255
     48e:	72 e4       	ldi	r23, 0x42	; 66
     490:	8d e1       	ldi	r24, 0x1D	; 29
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN3PIDC1Eddd>

ISR(TIMER2_OVF_vect) {
	decoder.TIMER_ISR();
}

drv8838 motors;
     498:	89 e1       	ldi	r24, 0x19	; 25
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN7drv8838C1Ev>
IR38kHz dist;
     4a0:	88 e1       	ldi	r24, 0x18	; 24
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN7IR38kHzC1Ev>
QTR1A edge;
     4a8:	86 e1       	ldi	r24, 0x16	; 22
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN5QTR1AC1Ev>
Buzzer beep;
     4b0:	85 e1       	ldi	r24, 0x15	; 21
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN6BuzzerC1Ev>
Switch panel;
     4b8:	84 e1       	ldi	r24, 0x14	; 20
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	0e 94 71 07 	call	0xee2	; 0xee2 <_ZN6SwitchC1Ev>
StartModule remote;
     4c0:	8d e0       	ldi	r24, 0x0D	; 13
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN11StartModuleC1Ev>
     4c8:	84 e1       	ldi	r24, 0x14	; 20
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	01 97       	sbiw	r24, 0x01	; 1
};

class Leds {
	public:
		Leds() {}
		Leds(int number_a) {
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <_GLOBAL__sub_I_serial+0x6a>
			number = number_a;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <led+0x1>
     4d8:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <led>
		//panel.print(&serial);
		
		led.show();
		_delay_ms(50);
    }
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	df 90       	pop	r13
     4e6:	cf 90       	pop	r12
     4e8:	08 95       	ret

000004ea <_ZN3PIDC1Eddd>:
#include "PID_Controller.h"

PID::PID() {}

PID::PID(double Kp_a, double Ki_a, double Kd_a) {
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	fc 01       	movw	r30, r24
	Kp = Kp_a;
     4f8:	40 83       	st	Z, r20
     4fa:	51 83       	std	Z+1, r21	; 0x01
     4fc:	62 83       	std	Z+2, r22	; 0x02
     4fe:	73 83       	std	Z+3, r23	; 0x03
	Ki = Ki_a;
     500:	04 83       	std	Z+4, r16	; 0x04
     502:	15 83       	std	Z+5, r17	; 0x05
     504:	26 83       	std	Z+6, r18	; 0x06
     506:	37 83       	std	Z+7, r19	; 0x07
	Kd = Kd_a;
     508:	c0 86       	std	Z+8, r12	; 0x08
     50a:	d1 86       	std	Z+9, r13	; 0x09
     50c:	e2 86       	std	Z+10, r14	; 0x0a
     50e:	f3 86       	std	Z+11, r15	; 0x0b
	deltaTime = 1;
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e8       	ldi	r26, 0x80	; 128
     516:	bf e3       	ldi	r27, 0x3F	; 63
     518:	84 8b       	std	Z+20, r24	; 0x14
     51a:	95 8b       	std	Z+21, r25	; 0x15
     51c:	a6 8b       	std	Z+22, r26	; 0x16
     51e:	b7 8b       	std	Z+23, r27	; 0x17

	integral = 0;
     520:	14 86       	std	Z+12, r1	; 0x0c
     522:	15 86       	std	Z+13, r1	; 0x0d
     524:	16 86       	std	Z+14, r1	; 0x0e
     526:	17 86       	std	Z+15, r1	; 0x0f
	lastError = 0;
     528:	10 8a       	std	Z+16, r1	; 0x10
     52a:	11 8a       	std	Z+17, r1	; 0x11
     52c:	12 8a       	std	Z+18, r1	; 0x12
     52e:	13 8a       	std	Z+19, r1	; 0x13
}
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	df 90       	pop	r13
     53a:	cf 90       	pop	r12
     53c:	08 95       	ret

0000053e <_ZN3PID9calculateEdd>:

double PID::calculate(double processVarible, double setPoint) {
     53e:	4f 92       	push	r4
     540:	5f 92       	push	r5
     542:	6f 92       	push	r6
     544:	7f 92       	push	r7
     546:	8f 92       	push	r8
     548:	9f 92       	push	r9
     54a:	af 92       	push	r10
     54c:	bf 92       	push	r11
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	00 d0       	rcall	.+0      	; 0x560 <_ZN3PID9calculateEdd+0x22>
     560:	00 d0       	rcall	.+0      	; 0x562 <_ZN3PID9calculateEdd+0x24>
     562:	00 d0       	rcall	.+0      	; 0x564 <_ZN3PID9calculateEdd+0x26>
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	9e 83       	std	Y+6, r25	; 0x06
     56a:	8d 83       	std	Y+5, r24	; 0x05
     56c:	cb 01       	movw	r24, r22
     56e:	ba 01       	movw	r22, r20
	double error = processVarible - setPoint;
     570:	a9 01       	movw	r20, r18
     572:	98 01       	movw	r18, r16
     574:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__subsf3>
     578:	6b 01       	movw	r12, r22
     57a:	7c 01       	movw	r14, r24
	double derivative = (error-lastError)/deltaTime;
     57c:	ed 81       	ldd	r30, Y+5	; 0x05
     57e:	fe 81       	ldd	r31, Y+6	; 0x06
     580:	84 88       	ldd	r8, Z+20	; 0x14
     582:	95 88       	ldd	r9, Z+21	; 0x15
     584:	a6 88       	ldd	r10, Z+22	; 0x16
     586:	b7 88       	ldd	r11, Z+23	; 0x17
     588:	20 89       	ldd	r18, Z+16	; 0x10
     58a:	31 89       	ldd	r19, Z+17	; 0x11
     58c:	42 89       	ldd	r20, Z+18	; 0x12
     58e:	53 89       	ldd	r21, Z+19	; 0x13
     590:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__subsf3>
     594:	a5 01       	movw	r20, r10
     596:	94 01       	movw	r18, r8
     598:	0e 94 4d 0a 	call	0x149a	; 0x149a <__divsf3>
     59c:	69 83       	std	Y+1, r22	; 0x01
     59e:	7a 83       	std	Y+2, r23	; 0x02
     5a0:	8b 83       	std	Y+3, r24	; 0x03
     5a2:	9c 83       	std	Y+4, r25	; 0x04
	integral +=(error*deltaTime);
     5a4:	a5 01       	movw	r20, r10
     5a6:	94 01       	movw	r18, r8
     5a8:	c7 01       	movw	r24, r14
     5aa:	b6 01       	movw	r22, r12
     5ac:	0e 94 a5 0b 	call	0x174a	; 0x174a <__mulsf3>
     5b0:	ed 81       	ldd	r30, Y+5	; 0x05
     5b2:	fe 81       	ldd	r31, Y+6	; 0x06
     5b4:	24 85       	ldd	r18, Z+12	; 0x0c
     5b6:	35 85       	ldd	r19, Z+13	; 0x0d
     5b8:	46 85       	ldd	r20, Z+14	; 0x0e
     5ba:	57 85       	ldd	r21, Z+15	; 0x0f
     5bc:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__addsf3>
     5c0:	4b 01       	movw	r8, r22
     5c2:	5c 01       	movw	r10, r24
     5c4:	ed 81       	ldd	r30, Y+5	; 0x05
     5c6:	fe 81       	ldd	r31, Y+6	; 0x06
     5c8:	64 87       	std	Z+12, r22	; 0x0c
     5ca:	75 87       	std	Z+13, r23	; 0x0d
     5cc:	86 87       	std	Z+14, r24	; 0x0e
     5ce:	97 87       	std	Z+15, r25	; 0x0f

	double controlVariable = Kp*error + Ki*integral + Kd*derivative;
     5d0:	20 81       	ld	r18, Z
     5d2:	31 81       	ldd	r19, Z+1	; 0x01
     5d4:	42 81       	ldd	r20, Z+2	; 0x02
     5d6:	53 81       	ldd	r21, Z+3	; 0x03
     5d8:	c7 01       	movw	r24, r14
     5da:	b6 01       	movw	r22, r12
     5dc:	0e 94 a5 0b 	call	0x174a	; 0x174a <__mulsf3>
     5e0:	2b 01       	movw	r4, r22
     5e2:	3c 01       	movw	r6, r24
     5e4:	ed 81       	ldd	r30, Y+5	; 0x05
     5e6:	fe 81       	ldd	r31, Y+6	; 0x06
     5e8:	24 81       	ldd	r18, Z+4	; 0x04
     5ea:	35 81       	ldd	r19, Z+5	; 0x05
     5ec:	46 81       	ldd	r20, Z+6	; 0x06
     5ee:	57 81       	ldd	r21, Z+7	; 0x07
     5f0:	c5 01       	movw	r24, r10
     5f2:	b4 01       	movw	r22, r8
     5f4:	0e 94 a5 0b 	call	0x174a	; 0x174a <__mulsf3>
     5f8:	9b 01       	movw	r18, r22
     5fa:	ac 01       	movw	r20, r24
     5fc:	c3 01       	movw	r24, r6
     5fe:	b2 01       	movw	r22, r4
     600:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__addsf3>
     604:	4b 01       	movw	r8, r22
     606:	5c 01       	movw	r10, r24
     608:	ed 81       	ldd	r30, Y+5	; 0x05
     60a:	fe 81       	ldd	r31, Y+6	; 0x06
     60c:	20 85       	ldd	r18, Z+8	; 0x08
     60e:	31 85       	ldd	r19, Z+9	; 0x09
     610:	42 85       	ldd	r20, Z+10	; 0x0a
     612:	53 85       	ldd	r21, Z+11	; 0x0b
     614:	69 81       	ldd	r22, Y+1	; 0x01
     616:	7a 81       	ldd	r23, Y+2	; 0x02
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	9c 81       	ldd	r25, Y+4	; 0x04
     61c:	0e 94 a5 0b 	call	0x174a	; 0x174a <__mulsf3>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	c5 01       	movw	r24, r10
     626:	b4 01       	movw	r22, r8
     628:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__addsf3>

	lastError = error;
     62c:	ed 81       	ldd	r30, Y+5	; 0x05
     62e:	fe 81       	ldd	r31, Y+6	; 0x06
     630:	c0 8a       	std	Z+16, r12	; 0x10
     632:	d1 8a       	std	Z+17, r13	; 0x11
     634:	e2 8a       	std	Z+18, r14	; 0x12
     636:	f3 8a       	std	Z+19, r15	; 0x13

	return controlVariable;
}
     638:	26 96       	adiw	r28, 0x06	; 6
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	af 90       	pop	r10
     658:	9f 90       	pop	r9
     65a:	8f 90       	pop	r8
     65c:	7f 90       	pop	r7
     65e:	6f 90       	pop	r6
     660:	5f 90       	pop	r5
     662:	4f 90       	pop	r4
     664:	08 95       	ret

00000666 <_ZN3PID5resetEv>:

void PID::reset() {
	integral = 0;
     666:	fc 01       	movw	r30, r24
     668:	14 86       	std	Z+12, r1	; 0x0c
     66a:	15 86       	std	Z+13, r1	; 0x0d
     66c:	16 86       	std	Z+14, r1	; 0x0e
     66e:	17 86       	std	Z+15, r1	; 0x0f
	lastError = 0;
     670:	10 8a       	std	Z+16, r1	; 0x10
     672:	11 8a       	std	Z+17, r1	; 0x11
     674:	12 8a       	std	Z+18, r1	; 0x12
     676:	13 8a       	std	Z+19, r1	; 0x13
     678:	08 95       	ret

0000067a <_ZN10DecoderRC5C1Ev>:
	return result;
}

uint8_t DecoderRC5::getToggle() {
	return (uint8_t)((message & 0x0800)>>11);
}
     67a:	08 95       	ret

0000067c <_ZN10DecoderRC55resetEv>:
     67c:	fc 01       	movw	r30, r24
     67e:	10 82       	st	Z, r1
     680:	8e e0       	ldi	r24, 0x0E	; 14
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	96 83       	std	Z+6, r25	; 0x06
     686:	85 83       	std	Z+5, r24	; 0x05
     688:	12 82       	std	Z+2, r1	; 0x02
     68a:	11 82       	std	Z+1, r1	; 0x01
     68c:	10 86       	std	Z+8, r1	; 0x08
     68e:	17 82       	std	Z+7, r1	; 0x07
     690:	85 e0       	ldi	r24, 0x05	; 5
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	94 83       	std	Z+4, r25	; 0x04
     696:	83 83       	std	Z+3, r24	; 0x03
     698:	08 95       	ret

0000069a <_ZN10DecoderRC510initializeEv>:
     69a:	9c 01       	movw	r18, r24
     69c:	52 98       	cbi	0x0a, 2	; 10
     69e:	5a 9a       	sbi	0x0b, 2	; 11
     6a0:	e8 9a       	sbi	0x1d, 0	; 29
     6a2:	e9 e6       	ldi	r30, 0x69	; 105
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	90 81       	ld	r25, Z
     6a8:	91 60       	ori	r25, 0x01	; 1
     6aa:	90 83       	st	Z, r25
     6ac:	90 81       	ld	r25, Z
     6ae:	9d 7f       	andi	r25, 0xFD	; 253
     6b0:	90 83       	st	Z, r25
     6b2:	e1 eb       	ldi	r30, 0xB1	; 177
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	90 81       	ld	r25, Z
     6b8:	91 60       	ori	r25, 0x01	; 1
     6ba:	90 83       	st	Z, r25
     6bc:	e0 e7       	ldi	r30, 0x70	; 112
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	90 81       	ld	r25, Z
     6c2:	91 60       	ori	r25, 0x01	; 1
     6c4:	90 83       	st	Z, r25
     6c6:	78 94       	sei
     6c8:	c9 01       	movw	r24, r18
     6ca:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN10DecoderRC55resetEv>
     6ce:	08 95       	ret

000006d0 <_ZN10DecoderRC59TIMER_ISREv>:
     6d0:	fc 01       	movw	r30, r24
     6d2:	27 81       	ldd	r18, Z+7	; 0x07
     6d4:	30 85       	ldd	r19, Z+8	; 0x08
     6d6:	2f 5f       	subi	r18, 0xFF	; 255
     6d8:	3f 4f       	sbci	r19, 0xFF	; 255
     6da:	30 87       	std	Z+8, r19	; 0x08
     6dc:	27 83       	std	Z+7, r18	; 0x07
     6de:	08 95       	ret

000006e0 <_ZN10DecoderRC57INT_ISREv>:
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <_ZN10DecoderRC57INT_ISREv+0xc>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <_ZN10DecoderRC57INT_ISREv+0xe>
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	8c 01       	movw	r16, r24
     6f4:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	f8 01       	movw	r30, r16
     6fe:	97 81       	ldd	r25, Z+7	; 0x07
     700:	82 0f       	add	r24, r18
     702:	91 1d       	adc	r25, r1
     704:	96 95       	lsr	r25
     706:	87 95       	ror	r24
     708:	96 95       	lsr	r25
     70a:	87 95       	ror	r24
     70c:	4a 99       	sbic	0x09, 2	; 9
     70e:	02 c0       	rjmp	.+4      	; 0x714 <_ZN10DecoderRC57INT_ISREv+0x34>
     710:	f1 2c       	mov	r15, r1
     712:	03 c0       	rjmp	.+6      	; 0x71a <_ZN10DecoderRC57INT_ISREv+0x3a>
     714:	68 94       	set
     716:	ff 24       	eor	r15, r15
     718:	f1 f8       	bld	r15, 1
     71a:	9c 01       	movw	r18, r24
     71c:	2d 56       	subi	r18, 0x6D	; 109
     71e:	3a 40       	sbci	r19, 0x0A	; 10
     720:	2f 3e       	cpi	r18, 0xEF	; 239
     722:	36 40       	sbci	r19, 0x06	; 6
     724:	18 f4       	brcc	.+6      	; 0x72c <_ZN10DecoderRC57INT_ISREv+0x4c>
     726:	24 e0       	ldi	r18, 0x04	; 4
     728:	f2 0e       	add	r15, r18
     72a:	08 c0       	rjmp	.+16     	; 0x73c <_ZN10DecoderRC57INT_ISREv+0x5c>
     72c:	88 57       	subi	r24, 0x78	; 120
     72e:	93 40       	sbci	r25, 0x03	; 3
     730:	83 3f       	cpi	r24, 0xF3	; 243
     732:	96 40       	sbci	r25, 0x06	; 6
     734:	18 f0       	brcs	.+6      	; 0x73c <_ZN10DecoderRC57INT_ISREv+0x5c>
     736:	c8 01       	movw	r24, r16
     738:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN10DecoderRC55resetEv>
     73c:	f8 01       	movw	r30, r16
     73e:	23 81       	ldd	r18, Z+3	; 0x03
     740:	34 81       	ldd	r19, Z+4	; 0x04
     742:	25 30       	cpi	r18, 0x05	; 5
     744:	31 05       	cpc	r19, r1
     746:	c9 f4       	brne	.+50     	; 0x77a <_ZN10DecoderRC57INT_ISREv+0x9a>
     748:	85 81       	ldd	r24, Z+5	; 0x05
     74a:	96 81       	ldd	r25, Z+6	; 0x06
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	96 83       	std	Z+6, r25	; 0x06
     750:	85 83       	std	Z+5, r24	; 0x05
     752:	21 81       	ldd	r18, Z+1	; 0x01
     754:	32 81       	ldd	r19, Z+2	; 0x02
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	ba 01       	movw	r22, r20
     75c:	02 c0       	rjmp	.+4      	; 0x762 <_ZN10DecoderRC57INT_ISREv+0x82>
     75e:	66 0f       	add	r22, r22
     760:	77 1f       	adc	r23, r23
     762:	8a 95       	dec	r24
     764:	e2 f7       	brpl	.-8      	; 0x75e <_ZN10DecoderRC57INT_ISREv+0x7e>
     766:	cb 01       	movw	r24, r22
     768:	82 2b       	or	r24, r18
     76a:	93 2b       	or	r25, r19
     76c:	92 83       	std	Z+2, r25	; 0x02
     76e:	81 83       	std	Z+1, r24	; 0x01
     770:	54 83       	std	Z+4, r21	; 0x04
     772:	43 83       	std	Z+3, r20	; 0x03
     774:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     778:	59 c0       	rjmp	.+178    	; 0x82c <_ZN10DecoderRC57INT_ISREv+0x14c>
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	81 e9       	ldi	r24, 0x91	; 145
     780:	8a 83       	std	Y+2, r24	; 0x02
     782:	8b e9       	ldi	r24, 0x9B	; 155
     784:	8b 83       	std	Y+3, r24	; 0x03
     786:	8b ef       	ldi	r24, 0xFB	; 251
     788:	8c 83       	std	Y+4, r24	; 0x04
     78a:	fe 01       	movw	r30, r28
     78c:	e2 0f       	add	r30, r18
     78e:	f3 1f       	adc	r31, r19
     790:	81 81       	ldd	r24, Z+1	; 0x01
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	02 c0       	rjmp	.+4      	; 0x79a <_ZN10DecoderRC57INT_ISREv+0xba>
     796:	95 95       	asr	r25
     798:	87 95       	ror	r24
     79a:	fa 94       	dec	r15
     79c:	e2 f7       	brpl	.-8      	; 0x796 <_ZN10DecoderRC57INT_ISREv+0xb6>
     79e:	ac 01       	movw	r20, r24
     7a0:	43 70       	andi	r20, 0x03	; 3
     7a2:	55 27       	eor	r21, r21
     7a4:	24 17       	cp	r18, r20
     7a6:	35 07       	cpc	r19, r21
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <_ZN10DecoderRC57INT_ISREv+0xd0>
     7aa:	24 30       	cpi	r18, 0x04	; 4
     7ac:	31 05       	cpc	r19, r1
     7ae:	24 f0       	brlt	.+8      	; 0x7b8 <_ZN10DecoderRC57INT_ISREv+0xd8>
     7b0:	c8 01       	movw	r24, r16
     7b2:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN10DecoderRC55resetEv>
     7b6:	3a c0       	rjmp	.+116    	; 0x82c <_ZN10DecoderRC57INT_ISREv+0x14c>
     7b8:	f8 01       	movw	r30, r16
     7ba:	54 83       	std	Z+4, r21	; 0x04
     7bc:	43 83       	std	Z+3, r20	; 0x03
     7be:	42 30       	cpi	r20, 0x02	; 2
     7c0:	51 05       	cpc	r21, r1
     7c2:	41 f4       	brne	.+16     	; 0x7d4 <_ZN10DecoderRC57INT_ISREv+0xf4>
     7c4:	85 81       	ldd	r24, Z+5	; 0x05
     7c6:	96 81       	ldd	r25, Z+6	; 0x06
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	96 83       	std	Z+6, r25	; 0x06
     7cc:	85 83       	std	Z+5, r24	; 0x05
     7ce:	89 2b       	or	r24, r25
     7d0:	41 f5       	brne	.+80     	; 0x822 <_ZN10DecoderRC57INT_ISREv+0x142>
     7d2:	20 c0       	rjmp	.+64     	; 0x814 <_ZN10DecoderRC57INT_ISREv+0x134>
     7d4:	41 30       	cpi	r20, 0x01	; 1
     7d6:	51 05       	cpc	r21, r1
     7d8:	b1 f4       	brne	.+44     	; 0x806 <_ZN10DecoderRC57INT_ISREv+0x126>
     7da:	f8 01       	movw	r30, r16
     7dc:	85 81       	ldd	r24, Z+5	; 0x05
     7de:	96 81       	ldd	r25, Z+6	; 0x06
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	96 83       	std	Z+6, r25	; 0x06
     7e4:	85 83       	std	Z+5, r24	; 0x05
     7e6:	21 81       	ldd	r18, Z+1	; 0x01
     7e8:	32 81       	ldd	r19, Z+2	; 0x02
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	ba 01       	movw	r22, r20
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <_ZN10DecoderRC57INT_ISREv+0x116>
     7f2:	66 0f       	add	r22, r22
     7f4:	77 1f       	adc	r23, r23
     7f6:	8a 95       	dec	r24
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <_ZN10DecoderRC57INT_ISREv+0x112>
     7fa:	cb 01       	movw	r24, r22
     7fc:	82 2b       	or	r24, r18
     7fe:	93 2b       	or	r25, r19
     800:	92 83       	std	Z+2, r25	; 0x02
     802:	81 83       	std	Z+1, r24	; 0x01
     804:	0e c0       	rjmp	.+28     	; 0x822 <_ZN10DecoderRC57INT_ISREv+0x142>
     806:	f8 01       	movw	r30, r16
     808:	25 81       	ldd	r18, Z+5	; 0x05
     80a:	36 81       	ldd	r19, Z+6	; 0x06
     80c:	23 2b       	or	r18, r19
     80e:	49 f4       	brne	.+18     	; 0x822 <_ZN10DecoderRC57INT_ISREv+0x142>
     810:	80 fd       	sbrc	r24, 0
     812:	07 c0       	rjmp	.+14     	; 0x822 <_ZN10DecoderRC57INT_ISREv+0x142>
     814:	86 e0       	ldi	r24, 0x06	; 6
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	f8 01       	movw	r30, r16
     81a:	94 83       	std	Z+4, r25	; 0x04
     81c:	83 83       	std	Z+3, r24	; 0x03
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 83       	st	Z, r24
     822:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     826:	f8 01       	movw	r30, r16
     828:	10 86       	std	Z+8, r1	; 0x08
     82a:	17 82       	std	Z+7, r1	; 0x07
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	08 95       	ret

00000840 <_ZN10DecoderRC510newMessageEv>:
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	10 82       	st	Z, r1
     846:	08 95       	ret

00000848 <_ZN10DecoderRC510getAddressEv>:

uint8_t DecoderRC5::getAddress() {
	return (uint8_t)((message & 0x07C0)>>6);
     848:	fc 01       	movw	r30, r24
     84a:	81 81       	ldd	r24, Z+1	; 0x01
     84c:	92 81       	ldd	r25, Z+2	; 0x02
     84e:	00 24       	eor	r0, r0
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	00 1c       	adc	r0, r0
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	00 1c       	adc	r0, r0
     85c:	89 2f       	mov	r24, r25
     85e:	90 2d       	mov	r25, r0
}
     860:	8f 71       	andi	r24, 0x1F	; 31
     862:	08 95       	ret

00000864 <_ZN10DecoderRC510getCommandEv>:

uint8_t DecoderRC5::getCommand() {
	return (uint8_t)(message & 0x003F);
     864:	fc 01       	movw	r30, r24
     866:	81 81       	ldd	r24, Z+1	; 0x01
     868:	92 81       	ldd	r25, Z+2	; 0x02
     86a:	8f 73       	andi	r24, 0x3F	; 63
     86c:	08 95       	ret

0000086e <_ZN7drv8838C1Ev>:
bool Switch::getState() {
	return !(PINB & (1<<PINB4));
}

void Switch::print(Stream* serial) {
	serial->println(Switch::getState());
     86e:	fc 01       	movw	r30, r24
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	82 83       	std	Z+2, r24	; 0x02
     874:	10 82       	st	Z, r1
     876:	83 83       	std	Z+3, r24	; 0x03
     878:	11 82       	std	Z+1, r1	; 0x01
     87a:	08 95       	ret

0000087c <_ZN7drv88383fixEh>:
     87c:	08 95       	ret

0000087e <_ZN7drv88388setSpeedEhh>:
     87e:	26 2f       	mov	r18, r22
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	fc 01       	movw	r30, r24
     884:	e2 0f       	add	r30, r18
     886:	f3 1f       	adc	r31, r19
     888:	40 83       	st	Z, r20
     88a:	66 23       	and	r22, r22
     88c:	99 f0       	breq	.+38     	; 0x8b4 <_ZN7drv88388setSpeedEhh+0x36>
     88e:	61 30       	cpi	r22, 0x01	; 1
     890:	29 f5       	brne	.+74     	; 0x8dc <_ZN7drv88388setSpeedEhh+0x5e>
     892:	47 bd       	out	0x27, r20	; 39
     894:	fc 01       	movw	r30, r24
     896:	e2 0f       	add	r30, r18
     898:	f3 1f       	adc	r31, r19
     89a:	40 81       	ld	r20, Z
     89c:	44 23       	and	r20, r20
     89e:	f1 f0       	breq	.+60     	; 0x8dc <_ZN7drv88388setSpeedEhh+0x5e>
     8a0:	fc 01       	movw	r30, r24
     8a2:	e2 0f       	add	r30, r18
     8a4:	f3 1f       	adc	r31, r19
     8a6:	82 81       	ldd	r24, Z+2	; 0x02
     8a8:	88 23       	and	r24, r24
     8aa:	11 f0       	breq	.+4      	; 0x8b0 <_ZN7drv88388setSpeedEhh+0x32>
     8ac:	5f 9a       	sbi	0x0b, 7	; 11
     8ae:	08 95       	ret
     8b0:	5f 98       	cbi	0x0b, 7	; 11
     8b2:	08 95       	ret
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8ba:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8be:	fc 01       	movw	r30, r24
     8c0:	e2 0f       	add	r30, r18
     8c2:	f3 1f       	adc	r31, r19
     8c4:	40 81       	ld	r20, Z
     8c6:	44 23       	and	r20, r20
     8c8:	49 f0       	breq	.+18     	; 0x8dc <_ZN7drv88388setSpeedEhh+0x5e>
     8ca:	fc 01       	movw	r30, r24
     8cc:	e2 0f       	add	r30, r18
     8ce:	f3 1f       	adc	r31, r19
     8d0:	82 81       	ldd	r24, Z+2	; 0x02
     8d2:	88 23       	and	r24, r24
     8d4:	11 f0       	breq	.+4      	; 0x8da <_ZN7drv88388setSpeedEhh+0x5c>
     8d6:	2a 9a       	sbi	0x05, 2	; 5
     8d8:	08 95       	ret
     8da:	2a 98       	cbi	0x05, 2	; 5
     8dc:	08 95       	ret

000008de <_ZN7drv88389setSpeedsEhh>:
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	ec 01       	movw	r28, r24
     8e6:	14 2f       	mov	r17, r20
     8e8:	46 2f       	mov	r20, r22
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN7drv88388setSpeedEhh>
     8f0:	41 2f       	mov	r20, r17
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	ce 01       	movw	r24, r28
     8f6:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN7drv88388setSpeedEhh>
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	08 95       	ret

00000902 <_ZN7drv88389setSpeedsEh>:
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	ec 01       	movw	r28, r24
     90a:	16 2f       	mov	r17, r22
     90c:	46 2f       	mov	r20, r22
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN7drv88388setSpeedEhh>
     914:	41 2f       	mov	r20, r17
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	ce 01       	movw	r24, r28
     91a:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN7drv88388setSpeedEhh>
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	08 95       	ret

00000926 <_ZN7drv88384stopEv>:
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ec 01       	movw	r28, r24
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN7drv88388setSpeedEhh>
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN7drv88388setSpeedEhh>
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <_ZN7drv883810initializeEhh>:
     944:	fc 01       	movw	r30, r24
     946:	9a b1       	in	r25, 0x0a	; 10
     948:	90 6c       	ori	r25, 0xC0	; 192
     94a:	9a b9       	out	0x0a, r25	; 10
     94c:	94 b1       	in	r25, 0x04	; 4
     94e:	96 60       	ori	r25, 0x06	; 6
     950:	94 b9       	out	0x04, r25	; 4
     952:	94 b5       	in	r25, 0x24	; 36
     954:	93 68       	ori	r25, 0x83	; 131
     956:	94 bd       	out	0x24, r25	; 36
     958:	95 b5       	in	r25, 0x25	; 37
     95a:	91 60       	ori	r25, 0x01	; 1
     95c:	95 bd       	out	0x25, r25	; 37
     95e:	a0 e8       	ldi	r26, 0x80	; 128
     960:	b0 e0       	ldi	r27, 0x00	; 0
     962:	9c 91       	ld	r25, X
     964:	91 68       	ori	r25, 0x81	; 129
     966:	9c 93       	st	X, r25
     968:	a1 e8       	ldi	r26, 0x81	; 129
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	9c 91       	ld	r25, X
     96e:	99 60       	ori	r25, 0x09	; 9
     970:	9c 93       	st	X, r25
     972:	61 30       	cpi	r22, 0x01	; 1
     974:	21 f4       	brne	.+8      	; 0x97e <_ZN7drv883810initializeEhh+0x3a>
     976:	92 81       	ldd	r25, Z+2	; 0x02
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	89 27       	eor	r24, r25
     97c:	82 83       	std	Z+2, r24	; 0x02
     97e:	41 30       	cpi	r20, 0x01	; 1
     980:	21 f4       	brne	.+8      	; 0x98a <_ZN7drv883810initializeEhh+0x46>
     982:	93 81       	ldd	r25, Z+3	; 0x03
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	89 27       	eor	r24, r25
     988:	83 83       	std	Z+3, r24	; 0x03
     98a:	cf 01       	movw	r24, r30
     98c:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7drv88384stopEv>
     990:	08 95       	ret

00000992 <_ZN7IR38kHzC1Ev>:
     992:	08 95       	ret

00000994 <_ZN7IR38kHz10initializeEv>:
     994:	87 b1       	in	r24, 0x07	; 7
     996:	87 7c       	andi	r24, 0xC7	; 199
     998:	87 b9       	out	0x07, r24	; 7
     99a:	84 b1       	in	r24, 0x04	; 4
     99c:	8f 73       	andi	r24, 0x3F	; 63
     99e:	84 b9       	out	0x04, r24	; 4
     9a0:	88 b1       	in	r24, 0x08	; 8
     9a2:	88 63       	ori	r24, 0x38	; 56
     9a4:	88 b9       	out	0x08, r24	; 8
     9a6:	85 b1       	in	r24, 0x05	; 5
     9a8:	80 6c       	ori	r24, 0xC0	; 192
     9aa:	85 b9       	out	0x05, r24	; 5
     9ac:	08 95       	ret

000009ae <_ZN7IR38kHz11getStateRAWEh>:
     9ae:	62 30       	cpi	r22, 0x02	; 2
     9b0:	c1 f0       	breq	.+48     	; 0x9e2 <_ZN7IR38kHz11getStateRAWEh+0x34>
     9b2:	28 f4       	brcc	.+10     	; 0x9be <_ZN7IR38kHz11getStateRAWEh+0x10>
     9b4:	66 23       	and	r22, r22
     9b6:	41 f0       	breq	.+16     	; 0x9c8 <_ZN7IR38kHz11getStateRAWEh+0x1a>
     9b8:	61 30       	cpi	r22, 0x01	; 1
     9ba:	69 f0       	breq	.+26     	; 0x9d6 <_ZN7IR38kHz11getStateRAWEh+0x28>
     9bc:	26 c0       	rjmp	.+76     	; 0xa0a <_ZN7IR38kHz11getStateRAWEh+0x5c>
     9be:	63 30       	cpi	r22, 0x03	; 3
     9c0:	b9 f0       	breq	.+46     	; 0x9f0 <_ZN7IR38kHz11getStateRAWEh+0x42>
     9c2:	64 30       	cpi	r22, 0x04	; 4
     9c4:	d9 f0       	breq	.+54     	; 0x9fc <_ZN7IR38kHz11getStateRAWEh+0x4e>
     9c6:	21 c0       	rjmp	.+66     	; 0xa0a <_ZN7IR38kHz11getStateRAWEh+0x5c>
     9c8:	86 b1       	in	r24, 0x06	; 6
     9ca:	83 fb       	bst	r24, 3
     9cc:	99 27       	eor	r25, r25
     9ce:	90 f9       	bld	r25, 0
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	89 27       	eor	r24, r25
     9d4:	08 95       	ret
     9d6:	86 b1       	in	r24, 0x06	; 6
     9d8:	82 95       	swap	r24
     9da:	81 70       	andi	r24, 0x01	; 1
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	89 27       	eor	r24, r25
     9e0:	08 95       	ret
     9e2:	86 b1       	in	r24, 0x06	; 6
     9e4:	85 fb       	bst	r24, 5
     9e6:	99 27       	eor	r25, r25
     9e8:	90 f9       	bld	r25, 0
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	89 27       	eor	r24, r25
     9ee:	08 95       	ret
     9f0:	83 b1       	in	r24, 0x03	; 3
     9f2:	80 95       	com	r24
     9f4:	88 1f       	adc	r24, r24
     9f6:	88 27       	eor	r24, r24
     9f8:	88 1f       	adc	r24, r24
     9fa:	08 95       	ret
     9fc:	83 b1       	in	r24, 0x03	; 3
     9fe:	86 fb       	bst	r24, 6
     a00:	99 27       	eor	r25, r25
     a02:	90 f9       	bld	r25, 0
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	89 27       	eor	r24, r25
     a08:	08 95       	ret
     a0a:	08 95       	ret

00000a0c <_ZN7IR38kHz8getStateEh>:
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	6c 01       	movw	r12, r24
     a1c:	f6 2e       	mov	r15, r22
     a1e:	ca e0       	ldi	r28, 0x0A	; 10
     a20:	d0 e0       	ldi	r29, 0x00	; 0
     a22:	00 e0       	ldi	r16, 0x00	; 0
     a24:	10 e0       	ldi	r17, 0x00	; 0
     a26:	6f 2d       	mov	r22, r15
     a28:	c6 01       	movw	r24, r12
     a2a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN7IR38kHz11getStateRAWEh>
     a2e:	08 0f       	add	r16, r24
     a30:	11 1d       	adc	r17, r1
     a32:	21 97       	sbiw	r28, 0x01	; 1
     a34:	c1 f7       	brne	.-16     	; 0xa26 <_ZN7IR38kHz8getStateEh+0x1a>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	07 30       	cpi	r16, 0x07	; 7
     a3a:	11 05       	cpc	r17, r1
     a3c:	0c f4       	brge	.+2      	; 0xa40 <_ZN7IR38kHz8getStateEh+0x34>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <_ZN7IR38kHz14getErrorSingleEv>:
     a50:	8f 92       	push	r8
     a52:	9f 92       	push	r9
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	5c 01       	movw	r10, r24
     a68:	0e ef       	ldi	r16, 0xFE	; 254
     a6a:	1f ef       	ldi	r17, 0xFF	; 255
     a6c:	c0 e0       	ldi	r28, 0x00	; 0
     a6e:	c1 2c       	mov	r12, r1
     a70:	d1 2c       	mov	r13, r1
     a72:	e1 2c       	mov	r14, r1
     a74:	f1 2c       	mov	r15, r1
     a76:	6c 2f       	mov	r22, r28
     a78:	c5 01       	movw	r24, r10
     a7a:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZN7IR38kHz8getStateEh>
     a7e:	88 23       	and	r24, r24
     a80:	29 f0       	breq	.+10     	; 0xa8c <_ZN7IR38kHz14getErrorSingleEv+0x3c>
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	e8 1a       	sub	r14, r24
     a86:	f8 0a       	sbc	r15, r24
     a88:	c0 0e       	add	r12, r16
     a8a:	d1 1e       	adc	r13, r17
     a8c:	cf 5f       	subi	r28, 0xFF	; 255
     a8e:	0f 5f       	subi	r16, 0xFF	; 255
     a90:	1f 4f       	sbci	r17, 0xFF	; 255
     a92:	c5 30       	cpi	r28, 0x05	; 5
     a94:	81 f7       	brne	.-32     	; 0xa76 <_ZN7IR38kHz14getErrorSingleEv+0x26>
     a96:	b6 01       	movw	r22, r12
     a98:	dd 0c       	add	r13, r13
     a9a:	88 0b       	sbc	r24, r24
     a9c:	99 0b       	sbc	r25, r25
     a9e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__floatsisf>
     aa2:	4b 01       	movw	r8, r22
     aa4:	5c 01       	movw	r10, r24
     aa6:	b7 01       	movw	r22, r14
     aa8:	ff 0c       	add	r15, r15
     aaa:	88 0b       	sbc	r24, r24
     aac:	99 0b       	sbc	r25, r25
     aae:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__floatsisf>
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	c5 01       	movw	r24, r10
     ab8:	b4 01       	movw	r22, r8
     aba:	0e 94 4d 0a 	call	0x149a	; 0x149a <__divsf3>
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	af 90       	pop	r10
     ad0:	9f 90       	pop	r9
     ad2:	8f 90       	pop	r8
     ad4:	08 95       	ret

00000ad6 <_ZN7IR38kHz13getErrorMultiEv>:
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	6c 01       	movw	r12, r24
     af8:	c0 e0       	ldi	r28, 0x00	; 0
     afa:	d0 e0       	ldi	r29, 0x00	; 0
     afc:	0f 2e       	mov	r0, r31
     afe:	41 2c       	mov	r4, r1
     b00:	51 2c       	mov	r5, r1
     b02:	fa e7       	ldi	r31, 0x7A	; 122
     b04:	6f 2e       	mov	r6, r31
     b06:	f4 e4       	ldi	r31, 0x44	; 68
     b08:	7f 2e       	mov	r7, r31
     b0a:	f0 2d       	mov	r31, r0
     b0c:	e1 2c       	mov	r14, r1
     b0e:	f1 2c       	mov	r15, r1
     b10:	00 e0       	ldi	r16, 0x00	; 0
     b12:	10 e0       	ldi	r17, 0x00	; 0
     b14:	bc 2e       	mov	r11, r28
     b16:	6c 2f       	mov	r22, r28
     b18:	c6 01       	movw	r24, r12
     b1a:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZN7IR38kHz8getStateEh>
     b1e:	88 23       	and	r24, r24
     b20:	31 f0       	breq	.+12     	; 0xb2e <_ZN7IR38kHz13getErrorMultiEv+0x58>
     b22:	0f 5f       	subi	r16, 0xFF	; 255
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	ce 01       	movw	r24, r28
     b28:	02 97       	sbiw	r24, 0x02	; 2
     b2a:	e8 0e       	add	r14, r24
     b2c:	f9 1e       	adc	r15, r25
     b2e:	6b 2d       	mov	r22, r11
     b30:	c6 01       	movw	r24, r12
     b32:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZN7IR38kHz8getStateEh>
     b36:	81 11       	cpse	r24, r1
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <_ZN7IR38kHz13getErrorMultiEv+0x6a>
     b3a:	01 15       	cp	r16, r1
     b3c:	11 05       	cpc	r17, r1
     b3e:	21 f4       	brne	.+8      	; 0xb48 <_ZN7IR38kHz13getErrorMultiEv+0x72>
     b40:	c4 30       	cpi	r28, 0x04	; 4
     b42:	d1 05       	cpc	r29, r1
     b44:	51 f5       	brne	.+84     	; 0xb9a <_ZN7IR38kHz13getErrorMultiEv+0xc4>
     b46:	4b c0       	rjmp	.+150    	; 0xbde <_ZN7IR38kHz13getErrorMultiEv+0x108>
     b48:	b7 01       	movw	r22, r14
     b4a:	ff 0c       	add	r15, r15
     b4c:	88 0b       	sbc	r24, r24
     b4e:	99 0b       	sbc	r25, r25
     b50:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__floatsisf>
     b54:	4b 01       	movw	r8, r22
     b56:	5c 01       	movw	r10, r24
     b58:	b8 01       	movw	r22, r16
     b5a:	11 0f       	add	r17, r17
     b5c:	88 0b       	sbc	r24, r24
     b5e:	99 0b       	sbc	r25, r25
     b60:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__floatsisf>
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
     b68:	c5 01       	movw	r24, r10
     b6a:	b4 01       	movw	r22, r8
     b6c:	0e 94 4d 0a 	call	0x149a	; 0x149a <__divsf3>
     b70:	4b 01       	movw	r8, r22
     b72:	5c 01       	movw	r10, r24
     b74:	9f 77       	andi	r25, 0x7F	; 127
     b76:	a3 01       	movw	r20, r6
     b78:	92 01       	movw	r18, r4
     b7a:	5f 77       	andi	r21, 0x7F	; 127
     b7c:	0e 94 48 0a 	call	0x1490	; 0x1490 <__cmpsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f0       	brlt	.+10     	; 0xb8e <_ZN7IR38kHz13getErrorMultiEv+0xb8>
     b84:	e1 2c       	mov	r14, r1
     b86:	f1 2c       	mov	r15, r1
     b88:	00 e0       	ldi	r16, 0x00	; 0
     b8a:	10 e0       	ldi	r17, 0x00	; 0
     b8c:	06 c0       	rjmp	.+12     	; 0xb9a <_ZN7IR38kHz13getErrorMultiEv+0xc4>
     b8e:	24 01       	movw	r4, r8
     b90:	35 01       	movw	r6, r10
     b92:	e1 2c       	mov	r14, r1
     b94:	f1 2c       	mov	r15, r1
     b96:	00 e0       	ldi	r16, 0x00	; 0
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	21 96       	adiw	r28, 0x01	; 1
     b9c:	c5 30       	cpi	r28, 0x05	; 5
     b9e:	d1 05       	cpc	r29, r1
     ba0:	09 f0       	breq	.+2      	; 0xba4 <_ZN7IR38kHz13getErrorMultiEv+0xce>
     ba2:	b8 cf       	rjmp	.-144    	; 0xb14 <_ZN7IR38kHz13getErrorMultiEv+0x3e>
     ba4:	53 01       	movw	r10, r6
     ba6:	42 01       	movw	r8, r4
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	4a e7       	ldi	r20, 0x7A	; 122
     bae:	54 e4       	ldi	r21, 0x44	; 68
     bb0:	c5 01       	movw	r24, r10
     bb2:	b4 01       	movw	r22, r8
     bb4:	0e 94 48 0a 	call	0x1490	; 0x1490 <__cmpsf2>
     bb8:	81 11       	cpse	r24, r1
     bba:	0c c0       	rjmp	.+24     	; 0xbd4 <_ZN7IR38kHz13getErrorMultiEv+0xfe>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	a9 01       	movw	r20, r18
     bc2:	ca 01       	movw	r24, r20
     bc4:	b9 01       	movw	r22, r18
     bc6:	0e 94 4d 0a 	call	0x149a	; 0x149a <__divsf3>
     bca:	56 2f       	mov	r21, r22
     bcc:	47 2f       	mov	r20, r23
     bce:	38 2f       	mov	r19, r24
     bd0:	29 2f       	mov	r18, r25
     bd2:	2a c0       	rjmp	.+84     	; 0xc28 <_ZN7IR38kHz13getErrorMultiEv+0x152>
     bd4:	58 2d       	mov	r21, r8
     bd6:	49 2d       	mov	r20, r9
     bd8:	3a 2d       	mov	r19, r10
     bda:	2b 2d       	mov	r18, r11
     bdc:	25 c0       	rjmp	.+74     	; 0xc28 <_ZN7IR38kHz13getErrorMultiEv+0x152>
     bde:	b7 01       	movw	r22, r14
     be0:	ff 0c       	add	r15, r15
     be2:	88 0b       	sbc	r24, r24
     be4:	99 0b       	sbc	r25, r25
     be6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__floatsisf>
     bea:	4b 01       	movw	r8, r22
     bec:	5c 01       	movw	r10, r24
     bee:	b8 01       	movw	r22, r16
     bf0:	11 0f       	add	r17, r17
     bf2:	88 0b       	sbc	r24, r24
     bf4:	99 0b       	sbc	r25, r25
     bf6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__floatsisf>
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	c5 01       	movw	r24, r10
     c00:	b4 01       	movw	r22, r8
     c02:	0e 94 4d 0a 	call	0x149a	; 0x149a <__divsf3>
     c06:	4b 01       	movw	r8, r22
     c08:	5c 01       	movw	r10, r24
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	5f 77       	andi	r21, 0x7F	; 127
     c10:	c3 01       	movw	r24, r6
     c12:	b2 01       	movw	r22, r4
     c14:	9f 77       	andi	r25, 0x7F	; 127
     c16:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__gesf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	2c f2       	brlt	.-118    	; 0xba8 <_ZN7IR38kHz13getErrorMultiEv+0xd2>
     c1e:	e1 2c       	mov	r14, r1
     c20:	f1 2c       	mov	r15, r1
     c22:	00 e0       	ldi	r16, 0x00	; 0
     c24:	10 e0       	ldi	r17, 0x00	; 0
     c26:	b9 cf       	rjmp	.-142    	; 0xb9a <_ZN7IR38kHz13getErrorMultiEv+0xc4>
     c28:	65 2f       	mov	r22, r21
     c2a:	74 2f       	mov	r23, r20
     c2c:	83 2f       	mov	r24, r19
     c2e:	92 2f       	mov	r25, r18
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	bf 90       	pop	r11
     c42:	af 90       	pop	r10
     c44:	9f 90       	pop	r9
     c46:	8f 90       	pop	r8
     c48:	7f 90       	pop	r7
     c4a:	6f 90       	pop	r6
     c4c:	5f 90       	pop	r5
     c4e:	4f 90       	pop	r4
     c50:	08 95       	ret

00000c52 <_ZN7IR38kHz8getErrorEh>:
     c52:	66 23       	and	r22, r22
     c54:	19 f0       	breq	.+6      	; 0xc5c <_ZN7IR38kHz8getErrorEh+0xa>
     c56:	61 30       	cpi	r22, 0x01	; 1
     c58:	21 f0       	breq	.+8      	; 0xc62 <_ZN7IR38kHz8getErrorEh+0x10>
     c5a:	06 c0       	rjmp	.+12     	; 0xc68 <_ZN7IR38kHz8getErrorEh+0x16>
     c5c:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN7IR38kHz14getErrorSingleEv>
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <_ZN7IR38kHz8getErrorEh+0x18>
     c62:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN7IR38kHz13getErrorMultiEv>
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <_ZN7IR38kHz8getErrorEh+0x18>
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <_ZN7IR38kHz8getErrorEh+0x20>
     c6a:	56 2f       	mov	r21, r22
     c6c:	47 2f       	mov	r20, r23
     c6e:	38 2f       	mov	r19, r24
     c70:	29 2f       	mov	r18, r25
     c72:	65 2f       	mov	r22, r21
     c74:	74 2f       	mov	r23, r20
     c76:	83 2f       	mov	r24, r19
     c78:	92 2f       	mov	r25, r18
     c7a:	08 95       	ret

00000c7c <_ZN5QTR1AC1Ev>:
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
     c82:	08 95       	ret

00000c84 <_ZN5QTR1A11getStateRAWEh>:
     c84:	ec e7       	ldi	r30, 0x7C	; 124
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 7f       	andi	r24, 0xF0	; 240
     c8c:	80 83       	st	Z, r24
     c8e:	66 23       	and	r22, r22
     c90:	19 f0       	breq	.+6      	; 0xc98 <_ZN5QTR1A11getStateRAWEh+0x14>
     c92:	61 30       	cpi	r22, 0x01	; 1
     c94:	39 f0       	breq	.+14     	; 0xca4 <_ZN5QTR1A11getStateRAWEh+0x20>
     c96:	0b c0       	rjmp	.+22     	; 0xcae <_ZN5QTR1A11getStateRAWEh+0x2a>
     c98:	ec e7       	ldi	r30, 0x7C	; 124
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	82 60       	ori	r24, 0x02	; 2
     ca0:	80 83       	st	Z, r24
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <_ZN5QTR1A11getStateRAWEh+0x2a>
     ca4:	ec e7       	ldi	r30, 0x7C	; 124
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	81 60       	ori	r24, 0x01	; 1
     cac:	80 83       	st	Z, r24
     cae:	ea e7       	ldi	r30, 0x7A	; 122
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 64       	ori	r24, 0x40	; 64
     cb6:	80 83       	st	Z, r24
     cb8:	80 81       	ld	r24, Z
     cba:	86 fd       	sbrc	r24, 6
     cbc:	fd cf       	rjmp	.-6      	; 0xcb8 <_ZN5QTR1A11getStateRAWEh+0x34>
     cbe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     cc2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     cc6:	08 95       	ret

00000cc8 <_ZN5QTR1A8getStateEh>:
     cc8:	6f 92       	push	r6
     cca:	7f 92       	push	r7
     ccc:	8f 92       	push	r8
     cce:	9f 92       	push	r9
     cd0:	af 92       	push	r10
     cd2:	bf 92       	push	r11
     cd4:	cf 92       	push	r12
     cd6:	df 92       	push	r13
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	8c 01       	movw	r16, r24
     ce6:	96 2e       	mov	r9, r22
     ce8:	c5 e0       	ldi	r28, 0x05	; 5
     cea:	d0 e0       	ldi	r29, 0x00	; 0
     cec:	e1 2c       	mov	r14, r1
     cee:	f1 2c       	mov	r15, r1
     cf0:	aa 24       	eor	r10, r10
     cf2:	a3 94       	inc	r10
     cf4:	61 2c       	mov	r6, r1
     cf6:	bb 24       	eor	r11, r11
     cf8:	b3 94       	inc	r11
     cfa:	c1 2c       	mov	r12, r1
     cfc:	71 2c       	mov	r7, r1
     cfe:	81 2c       	mov	r8, r1
     d00:	f8 01       	movw	r30, r16
     d02:	d0 80       	ld	r13, Z
     d04:	69 2d       	mov	r22, r9
     d06:	c8 01       	movw	r24, r16
     d08:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN5QTR1A11getStateRAWEh>
     d0c:	f8 01       	movw	r30, r16
     d0e:	21 81       	ldd	r18, Z+1	; 0x01
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4a 2d       	mov	r20, r10
     d14:	82 17       	cp	r24, r18
     d16:	93 07       	cpc	r25, r19
     d18:	08 f0       	brcs	.+2      	; 0xd1c <_ZN5QTR1A8getStateEh+0x54>
     d1a:	46 2d       	mov	r20, r6
     d1c:	8b 2d       	mov	r24, r11
     d1e:	9c 2d       	mov	r25, r12
     d20:	4d 15       	cp	r20, r13
     d22:	11 f0       	breq	.+4      	; 0xd28 <_ZN5QTR1A8getStateEh+0x60>
     d24:	87 2d       	mov	r24, r7
     d26:	98 2d       	mov	r25, r8
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	21 97       	sbiw	r28, 0x01	; 1
     d2e:	41 f7       	brne	.-48     	; 0xd00 <_ZN5QTR1A8getStateEh+0x38>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	f3 e0       	ldi	r31, 0x03	; 3
     d34:	ef 16       	cp	r14, r31
     d36:	f1 04       	cpc	r15, r1
     d38:	0c f4       	brge	.+2      	; 0xd3c <_ZN5QTR1A8getStateEh+0x74>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	bf 90       	pop	r11
     d4e:	af 90       	pop	r10
     d50:	9f 90       	pop	r9
     d52:	8f 90       	pop	r8
     d54:	7f 90       	pop	r7
     d56:	6f 90       	pop	r6
     d58:	08 95       	ret

00000d5a <_ZN5QTR1A7setModeEh>:
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	61 30       	cpi	r22, 0x01	; 1
     d62:	41 f0       	breq	.+16     	; 0xd74 <_ZN5QTR1A7setModeEh+0x1a>
     d64:	18 f0       	brcs	.+6      	; 0xd6c <_ZN5QTR1A7setModeEh+0x12>
     d66:	62 30       	cpi	r22, 0x02	; 2
     d68:	41 f0       	breq	.+16     	; 0xd7a <_ZN5QTR1A7setModeEh+0x20>
     d6a:	15 c0       	rjmp	.+42     	; 0xd96 <_ZN5QTR1A7setModeEh+0x3c>
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	fc 01       	movw	r30, r24
     d70:	20 83       	st	Z, r18
     d72:	11 c0       	rjmp	.+34     	; 0xd96 <_ZN5QTR1A7setModeEh+0x3c>
     d74:	fc 01       	movw	r30, r24
     d76:	10 82       	st	Z, r1
     d78:	0e c0       	rjmp	.+28     	; 0xd96 <_ZN5QTR1A7setModeEh+0x3c>
     d7a:	ec 01       	movw	r28, r24
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN5QTR1A8getStateEh>
     d82:	18 2f       	mov	r17, r24
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	ce 01       	movw	r24, r28
     d88:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN5QTR1A8getStateEh>
     d8c:	18 13       	cpse	r17, r24
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <_ZN5QTR1A7setModeEh+0x3c>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	18 27       	eor	r17, r24
     d94:	18 83       	st	Y, r17
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	08 95       	ret

00000d9e <_ZN5QTR1A10initializeEhh>:
     d9e:	fc 01       	movw	r30, r24
     da0:	ac e7       	ldi	r26, 0x7C	; 124
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	9c 91       	ld	r25, X
     da6:	90 64       	ori	r25, 0x40	; 64
     da8:	9c 93       	st	X, r25
     daa:	aa e7       	ldi	r26, 0x7A	; 122
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	9c 91       	ld	r25, X
     db0:	90 68       	ori	r25, 0x80	; 128
     db2:	9c 93       	st	X, r25
     db4:	41 83       	std	Z+1, r20	; 0x01
     db6:	cf 01       	movw	r24, r30
     db8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5QTR1A7setModeEh>
     dbc:	08 95       	ret

00000dbe <_ZN5QTR1A10getHorizonEv>:
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	8c 01       	movw	r16, r24
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN5QTR1A8getStateEh>
     dcc:	c8 2f       	mov	r28, r24
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	c8 01       	movw	r24, r16
     dd2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN5QTR1A8getStateEh>
     dd6:	cc 0f       	add	r28, r28
     dd8:	8c 0f       	add	r24, r28
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <_ZN11StartModuleC1Ev>:
     de2:	fc 01       	movw	r30, r24
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	80 83       	st	Z, r24
     de8:	11 82       	std	Z+1, r1	; 0x01
     dea:	12 82       	std	Z+2, r1	; 0x02
     dec:	16 82       	std	Z+6, r1	; 0x06
     dee:	08 95       	ret

00000df0 <_ZN11StartModule10printDebugEP6Stream>:
     df0:	fc 01       	movw	r30, r24
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	88 23       	and	r24, r24
     df6:	09 f4       	brne	.+2      	; 0xdfa <_ZN11StartModule10printDebugEP6Stream+0xa>
     df8:	5b c0       	rjmp	.+182    	; 0xeb0 <_ZN11StartModule10printDebugEP6Stream+0xc0>
     dfa:	cb 01       	movw	r24, r22
     dfc:	20 81       	ld	r18, Z
     dfe:	24 31       	cpi	r18, 0x14	; 20
     e00:	89 f1       	breq	.+98     	; 0xe64 <_ZN11StartModule10printDebugEP6Stream+0x74>
     e02:	25 31       	cpi	r18, 0x15	; 21
     e04:	41 f0       	breq	.+16     	; 0xe16 <_ZN11StartModule10printDebugEP6Stream+0x26>
     e06:	21 30       	cpi	r18, 0x01	; 1
     e08:	09 f0       	breq	.+2      	; 0xe0c <_ZN11StartModule10printDebugEP6Stream+0x1c>
     e0a:	52 c0       	rjmp	.+164    	; 0xeb0 <_ZN11StartModule10printDebugEP6Stream+0xc0>
     e0c:	65 e0       	ldi	r22, 0x05	; 5
     e0e:	71 e0       	ldi	r23, 0x01	; 1
     e10:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     e14:	08 95       	ret
     e16:	23 81       	ldd	r18, Z+3	; 0x03
     e18:	23 30       	cpi	r18, 0x03	; 3
     e1a:	a9 f0       	breq	.+42     	; 0xe46 <_ZN11StartModule10printDebugEP6Stream+0x56>
     e1c:	28 f4       	brcc	.+10     	; 0xe28 <_ZN11StartModule10printDebugEP6Stream+0x38>
     e1e:	21 30       	cpi	r18, 0x01	; 1
     e20:	41 f0       	breq	.+16     	; 0xe32 <_ZN11StartModule10printDebugEP6Stream+0x42>
     e22:	22 30       	cpi	r18, 0x02	; 2
     e24:	59 f0       	breq	.+22     	; 0xe3c <_ZN11StartModule10printDebugEP6Stream+0x4c>
     e26:	08 95       	ret
     e28:	24 30       	cpi	r18, 0x04	; 4
     e2a:	91 f0       	breq	.+36     	; 0xe50 <_ZN11StartModule10printDebugEP6Stream+0x60>
     e2c:	25 30       	cpi	r18, 0x05	; 5
     e2e:	a9 f0       	breq	.+42     	; 0xe5a <_ZN11StartModule10printDebugEP6Stream+0x6a>
     e30:	08 95       	ret
     e32:	6c e1       	ldi	r22, 0x1C	; 28
     e34:	71 e0       	ldi	r23, 0x01	; 1
     e36:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     e3a:	08 95       	ret
     e3c:	6f e2       	ldi	r22, 0x2F	; 47
     e3e:	71 e0       	ldi	r23, 0x01	; 1
     e40:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     e44:	08 95       	ret
     e46:	60 e4       	ldi	r22, 0x40	; 64
     e48:	71 e0       	ldi	r23, 0x01	; 1
     e4a:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     e4e:	08 95       	ret
     e50:	60 e5       	ldi	r22, 0x50	; 80
     e52:	71 e0       	ldi	r23, 0x01	; 1
     e54:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     e58:	08 95       	ret
     e5a:	65 e6       	ldi	r22, 0x65	; 101
     e5c:	71 e0       	ldi	r23, 0x01	; 1
     e5e:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     e62:	08 95       	ret
     e64:	23 81       	ldd	r18, Z+3	; 0x03
     e66:	23 30       	cpi	r18, 0x03	; 3
     e68:	a9 f0       	breq	.+42     	; 0xe94 <_ZN11StartModule10printDebugEP6Stream+0xa4>
     e6a:	28 f4       	brcc	.+10     	; 0xe76 <_ZN11StartModule10printDebugEP6Stream+0x86>
     e6c:	21 30       	cpi	r18, 0x01	; 1
     e6e:	41 f0       	breq	.+16     	; 0xe80 <_ZN11StartModule10printDebugEP6Stream+0x90>
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	59 f0       	breq	.+22     	; 0xe8a <_ZN11StartModule10printDebugEP6Stream+0x9a>
     e74:	08 95       	ret
     e76:	24 30       	cpi	r18, 0x04	; 4
     e78:	91 f0       	breq	.+36     	; 0xe9e <_ZN11StartModule10printDebugEP6Stream+0xae>
     e7a:	25 30       	cpi	r18, 0x05	; 5
     e7c:	a9 f0       	breq	.+42     	; 0xea8 <_ZN11StartModule10printDebugEP6Stream+0xb8>
     e7e:	08 95       	ret
     e80:	65 e7       	ldi	r22, 0x75	; 117
     e82:	71 e0       	ldi	r23, 0x01	; 1
     e84:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     e88:	08 95       	ret
     e8a:	68 e8       	ldi	r22, 0x88	; 136
     e8c:	71 e0       	ldi	r23, 0x01	; 1
     e8e:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     e92:	08 95       	ret
     e94:	69 e9       	ldi	r22, 0x99	; 153
     e96:	71 e0       	ldi	r23, 0x01	; 1
     e98:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     e9c:	08 95       	ret
     e9e:	69 ea       	ldi	r22, 0xA9	; 169
     ea0:	71 e0       	ldi	r23, 0x01	; 1
     ea2:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     ea6:	08 95       	ret
     ea8:	6e eb       	ldi	r22, 0xBE	; 190
     eaa:	71 e0       	ldi	r23, 0x01	; 1
     eac:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN6Stream7printlnEPc>
     eb0:	08 95       	ret

00000eb2 <_ZN11StartModule7setModeEh>:
     eb2:	fc 01       	movw	r30, r24
     eb4:	60 83       	st	Z, r22
     eb6:	62 30       	cpi	r22, 0x02	; 2
     eb8:	41 f4       	brne	.+16     	; 0xeca <_ZN11StartModule7setModeEh+0x18>
     eba:	30 99       	sbic	0x06, 0	; 6
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <_ZN11StartModule7setModeEh+0x12>
     ebe:	25 e1       	ldi	r18, 0x15	; 21
     ec0:	20 83       	st	Z, r18
     ec2:	08 95       	ret
     ec4:	24 e1       	ldi	r18, 0x14	; 20
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18
     eca:	08 95       	ret

00000ecc <_ZN11StartModule8getStateEv>:
     ecc:	fc 01       	movw	r30, r24
     ece:	83 81       	ldd	r24, Z+3	; 0x03
     ed0:	08 95       	ret

00000ed2 <_ZN6BuzzerC1Ev>:
     ed2:	08 95       	ret

00000ed4 <_ZN6Buzzer4stopEv>:
     ed4:	28 98       	cbi	0x05, 0	; 5
     ed6:	08 95       	ret

00000ed8 <_ZN6Buzzer10initializeEv>:
     ed8:	20 9a       	sbi	0x04, 0	; 4
     eda:	28 98       	cbi	0x05, 0	; 5
     edc:	0e 94 6a 07 	call	0xed4	; 0xed4 <_ZN6Buzzer4stopEv>
     ee0:	08 95       	ret

00000ee2 <_ZN6SwitchC1Ev>:
     ee2:	08 95       	ret

00000ee4 <_ZN6Switch10initializeEv>:
     ee4:	24 98       	cbi	0x04, 4	; 4
     ee6:	2c 9a       	sbi	0x05, 4	; 5
     ee8:	08 95       	ret

00000eea <_ZN6Switch8getStateEv>:
     eea:	83 b1       	in	r24, 0x03	; 3
     eec:	82 95       	swap	r24
     eee:	81 70       	andi	r24, 0x01	; 1
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	89 27       	eor	r24, r25
     ef4:	08 95       	ret

00000ef6 <_Z11EEPROMwriteth>:
}

void EEPROMwrite(unsigned short address, unsigned char data) {
	while(EECR & (1<<EEPE)) {}
     ef6:	f9 99       	sbic	0x1f, 1	; 31
     ef8:	fe cf       	rjmp	.-4      	; 0xef6 <_Z11EEPROMwriteth>
	
	EECR = (0<<EEPM1) | (0<<EEPM0);
     efa:	1f ba       	out	0x1f, r1	; 31
	
	if(address<512) EEAR = address;
     efc:	81 15       	cp	r24, r1
     efe:	22 e0       	ldi	r18, 0x02	; 2
     f00:	92 07       	cpc	r25, r18
     f02:	18 f4       	brcc	.+6      	; 0xf0a <_Z11EEPROMwriteth+0x14>
     f04:	92 bd       	out	0x22, r25	; 34
     f06:	81 bd       	out	0x21, r24	; 33
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <_Z11EEPROMwriteth+0x1c>
	else EEAR = 511;
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	92 bd       	out	0x22, r25	; 34
     f10:	81 bd       	out	0x21, r24	; 33
	
	EEDR = data;
     f12:	60 bd       	out	0x20, r22	; 32
	
	EECR |= (1<<EEMPE);
     f14:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
     f16:	f9 9a       	sbi	0x1f, 1	; 31
     f18:	08 95       	ret

00000f1a <_ZN11StartModule8setStateEh>:
		_delay_ms(10);
	}
}

void StartModule::setState(unsigned char state) {
	currentState = state;
     f1a:	fc 01       	movw	r30, r24
     f1c:	63 83       	std	Z+3, r22	; 0x03
	switch(currentState) {
     f1e:	63 30       	cpi	r22, 0x03	; 3
     f20:	b9 f0       	breq	.+46     	; 0xf50 <_ZN11StartModule8setStateEh+0x36>
     f22:	28 f4       	brcc	.+10     	; 0xf2e <_ZN11StartModule8setStateEh+0x14>
     f24:	61 30       	cpi	r22, 0x01	; 1
     f26:	41 f0       	breq	.+16     	; 0xf38 <_ZN11StartModule8setStateEh+0x1e>
     f28:	62 30       	cpi	r22, 0x02	; 2
     f2a:	61 f0       	breq	.+24     	; 0xf44 <_ZN11StartModule8setStateEh+0x2a>
     f2c:	23 c0       	rjmp	.+70     	; 0xf74 <_ZN11StartModule8setStateEh+0x5a>
     f2e:	64 30       	cpi	r22, 0x04	; 4
     f30:	a9 f0       	breq	.+42     	; 0xf5c <_ZN11StartModule8setStateEh+0x42>
     f32:	65 30       	cpi	r22, 0x05	; 5
     f34:	c9 f0       	breq	.+50     	; 0xf68 <_ZN11StartModule8setStateEh+0x4e>
     f36:	1e c0       	rjmp	.+60     	; 0xf74 <_ZN11StartModule8setStateEh+0x5a>
		case STATE_PROGRAMING:		EEPROMwrite(SAVED_STATE, STATE_POWER_ON);		break;
     f38:	62 e0       	ldi	r22, 0x02	; 2
     f3a:	8a e0       	ldi	r24, 0x0A	; 10
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 7b 07 	call	0xef6	; 0xef6 <_Z11EEPROMwriteth>
     f42:	08 95       	ret
		case STATE_POWER_ON:		EEPROMwrite(SAVED_STATE, STATE_POWER_ON);		break;
     f44:	62 e0       	ldi	r22, 0x02	; 2
     f46:	8a e0       	ldi	r24, 0x0A	; 10
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 7b 07 	call	0xef6	; 0xef6 <_Z11EEPROMwriteth>
     f4e:	08 95       	ret
		case STATE_STARTED:			EEPROMwrite(SAVED_STATE, STATE_STARTED);		break;
     f50:	63 e0       	ldi	r22, 0x03	; 3
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 7b 07 	call	0xef6	; 0xef6 <_Z11EEPROMwriteth>
     f5a:	08 95       	ret
		case STATE_STOPPED_SAFE:	EEPROMwrite(SAVED_STATE, STATE_STOPPED_SAFE);	break;
     f5c:	64 e0       	ldi	r22, 0x04	; 4
     f5e:	8a e0       	ldi	r24, 0x0A	; 10
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 7b 07 	call	0xef6	; 0xef6 <_Z11EEPROMwriteth>
     f66:	08 95       	ret
		case STATE_STOPPED:			EEPROMwrite(SAVED_STATE, STATE_POWER_ON);		break;
     f68:	62 e0       	ldi	r22, 0x02	; 2
     f6a:	8a e0       	ldi	r24, 0x0A	; 10
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 7b 07 	call	0xef6	; 0xef6 <_Z11EEPROMwriteth>
     f72:	08 95       	ret
		default:					setState(STATE_PROGRAMING);						break;
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
     f7a:	08 95       	ret

00000f7c <_ZN11StartModule10waitManualEP6StreamPFvvES3_>:
		case STATE_STOPPED_SAFE:	setState(STATE_STOPPED);	break;
		default: break;
	}
}

void StartModule::waitManual(Stream* serial, void(*func)(), void(*quitFunc)()) {
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
     f90:	8b 01       	movw	r16, r22
     f92:	7a 01       	movw	r14, r20
     f94:	69 01       	movw	r12, r18
	if(!StartModule::read()) clicked = false;
     f96:	30 9b       	sbis	0x06, 0	; 6
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x26>
     f9a:	1a 82       	std	Y+2, r1	; 0x02
	if(StartModule::read() && !clicked) {
     f9c:	30 9b       	sbis	0x06, 0	; 6
     f9e:	40 c0       	rjmp	.+128    	; 0x1020 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0xa4>
     fa0:	0a c0       	rjmp	.+20     	; 0xfb6 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x3a>
     fa2:	30 99       	sbic	0x06, 0	; 6
     fa4:	08 c0       	rjmp	.+16     	; 0xfb6 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x3a>
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	81 11       	cpse	r24, r1
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x3a>
     fac:	39 c0       	rjmp	.+114    	; 0x1020 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0xa4>
		clicked = true;
		if(currentState==STATE_POWER_ON) setState(STATE_STARTED);
     fae:	63 e0       	ldi	r22, 0x03	; 3
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
		else setState(STATE_POWER_ON);
	}
	while(currentState==STATE_POWER_ON) {
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	e9 f5       	brne	.+122    	; 0x1036 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0xba>
		func();

		if(!StartModule::read()) clicked = false;
		if(StartModule::read() && !clicked) {
			clicked = true;
     fbc:	bb 24       	eor	r11, r11
     fbe:	b3 94       	inc	r11
     fc0:	05 c0       	rjmp	.+10     	; 0xfcc <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x50>
void StartModule::waitManual(Stream* serial, void(*func)(), void(*quitFunc)()) {
	if(!StartModule::read()) clicked = false;
	if(StartModule::read() && !clicked) {
		clicked = true;
		if(currentState==STATE_POWER_ON) setState(STATE_STARTED);
		else setState(STATE_POWER_ON);
     fc2:	62 e0       	ldi	r22, 0x02	; 2
     fc4:	ce 01       	movw	r24, r28
     fc6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
     fca:	f5 cf       	rjmp	.-22     	; 0xfb6 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x3a>
	}
	while(currentState==STATE_POWER_ON) {
		func();
     fcc:	f7 01       	movw	r30, r14
     fce:	09 95       	icall

		if(!StartModule::read()) clicked = false;
     fd0:	30 9b       	sbis	0x06, 0	; 6
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x60>
     fd4:	1a 82       	std	Y+2, r1	; 0x02
		if(StartModule::read() && !clicked) {
     fd6:	30 9b       	sbis	0x06, 0	; 6
     fd8:	29 c0       	rjmp	.+82     	; 0x102c <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0xb0>
     fda:	0f c0       	rjmp	.+30     	; 0xffa <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x7e>
     fdc:	30 99       	sbic	0x06, 0	; 6
     fde:	0d c0       	rjmp	.+26     	; 0xffa <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x7e>
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	81 11       	cpse	r24, r1
     fe4:	0a c0       	rjmp	.+20     	; 0xffa <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x7e>
     fe6:	22 c0       	rjmp	.+68     	; 0x102c <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0xb0>
			clicked = true;
			if(currentState==STATE_POWER_ON) setState(STATE_STARTED);
     fe8:	63 e0       	ldi	r22, 0x03	; 3
     fea:	ce 01       	movw	r24, r28
     fec:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x7e>
			else setState(STATE_POWER_ON);
     ff2:	62 e0       	ldi	r22, 0x02	; 2
     ff4:	ce 01       	movw	r24, r28
     ff6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
		}
		
		if(currentState==STATE_STARTED)
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	11 f4       	brne	.+4      	; 0x1004 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x88>
			quitFunc();
    1000:	f6 01       	movw	r30, r12
    1002:	09 95       	icall
			
		printDebug(serial);
    1004:	b8 01       	movw	r22, r16
    1006:	ce 01       	movw	r24, r28
    1008:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN11StartModule10printDebugEP6Stream>
    100c:	83 ec       	ldi	r24, 0xC3	; 195
    100e:	99 e0       	ldi	r25, 0x09	; 9
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x94>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x9a>
    1016:	00 00       	nop
	if(StartModule::read() && !clicked) {
		clicked = true;
		if(currentState==STATE_POWER_ON) setState(STATE_STARTED);
		else setState(STATE_POWER_ON);
	}
	while(currentState==STATE_POWER_ON) {
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	b9 f2       	breq	.-82     	; 0xfcc <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x50>
    101e:	0b c0       	rjmp	.+22     	; 0x1036 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0xba>
}

void StartModule::waitManual(Stream* serial, void(*func)(), void(*quitFunc)()) {
	if(!StartModule::read()) clicked = false;
	if(StartModule::read() && !clicked) {
		clicked = true;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	8a 83       	std	Y+2, r24	; 0x02
		if(currentState==STATE_POWER_ON) setState(STATE_STARTED);
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	61 f6       	brne	.-104    	; 0xfc2 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x46>
    102a:	c1 cf       	rjmp	.-126    	; 0xfae <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x32>
	while(currentState==STATE_POWER_ON) {
		func();

		if(!StartModule::read()) clicked = false;
		if(StartModule::read() && !clicked) {
			clicked = true;
    102c:	ba 82       	std	Y+2, r11	; 0x02
			if(currentState==STATE_POWER_ON) setState(STATE_STARTED);
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	f9 f6       	brne	.-66     	; 0xff2 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x76>
    1034:	d9 cf       	rjmp	.-78     	; 0xfe8 <_ZN11StartModule10waitManualEP6StreamPFvvES3_+0x6c>
			quitFunc();
			
		printDebug(serial);
		_delay_ms(10);
	}
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	bf 90       	pop	r11
    1048:	08 95       	ret

0000104a <_ZN11StartModule11setCommandsEh>:
		default:					setState(STATE_PROGRAMING);						break;
	}
}

void StartModule::setCommands(uint8_t command) {
	stopCommand = command & 0xFE;
    104a:	6e 7f       	andi	r22, 0xFE	; 254
    104c:	fc 01       	movw	r30, r24
    104e:	64 83       	std	Z+4, r22	; 0x04
	startCommand = (command & 0xFE) + 1;
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	26 0f       	add	r18, r22
    1054:	25 83       	std	Z+5, r18	; 0x05
	
	EEPROMwrite(DYHLO_IDENTIFIER, stopCommand);
    1056:	8b e0       	ldi	r24, 0x0B	; 11
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 7b 07 	call	0xef6	; 0xef6 <_Z11EEPROMwriteth>
    105e:	08 95       	ret

00001060 <_ZN11StartModule6updateEP10DecoderRC5>:
		printDebug(serial);
		_delay_ms(10);
	}
}

void StartModule::update(DecoderRC5* decoder) {
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	8b 01       	movw	r16, r22
	if(decoder->newMessage()) {
    106e:	cb 01       	movw	r24, r22
    1070:	0e 94 20 04 	call	0x840	; 0x840 <_ZN10DecoderRC510newMessageEv>
    1074:	88 23       	and	r24, r24
    1076:	09 f4       	brne	.+2      	; 0x107a <_ZN11StartModule6updateEP10DecoderRC5+0x1a>
    1078:	42 c0       	rjmp	.+132    	; 0x10fe <_ZN11StartModule6updateEP10DecoderRC5+0x9e>
		uint8_t address = decoder->getAddress();
    107a:	c8 01       	movw	r24, r16
    107c:	0e 94 24 04 	call	0x848	; 0x848 <_ZN10DecoderRC510getAddressEv>
    1080:	f8 2e       	mov	r15, r24
		uint8_t command = decoder->getCommand();
    1082:	c8 01       	movw	r24, r16
    1084:	0e 94 32 04 	call	0x864	; 0x864 <_ZN10DecoderRC510getCommandEv>
    1088:	18 2f       	mov	r17, r24

		switch(currentState) {
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	19 f0       	breq	.+6      	; 0x1096 <_ZN11StartModule6updateEP10DecoderRC5+0x36>
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	f9 f0       	breq	.+62     	; 0x10d2 <_ZN11StartModule6updateEP10DecoderRC5+0x72>
    1094:	34 c0       	rjmp	.+104    	; 0x10fe <_ZN11StartModule6updateEP10DecoderRC5+0x9e>
			case STATE_POWER_ON:
				if(address==ADDRESS_START_STOP && command==startCommand) setState(STATE_STARTED);
    1096:	87 e0       	ldi	r24, 0x07	; 7
    1098:	f8 12       	cpse	r15, r24
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <_ZN11StartModule6updateEP10DecoderRC5+0x56>
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	18 13       	cpse	r17, r24
    10a0:	43 c0       	rjmp	.+134    	; 0x1128 <_ZN11StartModule6updateEP10DecoderRC5+0xc8>
    10a2:	63 e0       	ldi	r22, 0x03	; 3
    10a4:	ce 01       	movw	r24, r28
    10a6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
    10aa:	3e c0       	rjmp	.+124    	; 0x1128 <_ZN11StartModule6updateEP10DecoderRC5+0xc8>
				if(address==ADDRESS_START_STOP && command==stopCommand) setState(STATE_STOPPED_SAFE);
    10ac:	64 e0       	ldi	r22, 0x04	; 4
    10ae:	ce 01       	movw	r24, r28
    10b0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
    10b4:	24 c0       	rjmp	.+72     	; 0x10fe <_ZN11StartModule6updateEP10DecoderRC5+0x9e>
				if(address==ADDRESS_PROGRAMING) {
    10b6:	8b e0       	ldi	r24, 0x0B	; 11
    10b8:	f8 12       	cpse	r15, r24
    10ba:	43 c0       	rjmp	.+134    	; 0x1142 <_ZN11StartModule6updateEP10DecoderRC5+0xe2>
					setState(STATE_PROGRAMING);
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
					setCommands(command);
    10c4:	61 2f       	mov	r22, r17
    10c6:	ce 01       	movw	r24, r28
    10c8:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN11StartModule11setCommandsEh>
					prog = true;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	8e 83       	std	Y+6, r24	; 0x06
    10d0:	33 c0       	rjmp	.+102    	; 0x1138 <_ZN11StartModule6updateEP10DecoderRC5+0xd8>
				}	break;
			case STATE_STARTED:
				if(address==ADDRESS_START_STOP && command==stopCommand) setState(STATE_STOPPED_SAFE);
    10d2:	87 e0       	ldi	r24, 0x07	; 7
    10d4:	f8 12       	cpse	r15, r24
    10d6:	2c c0       	rjmp	.+88     	; 0x1130 <_ZN11StartModule6updateEP10DecoderRC5+0xd0>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	18 13       	cpse	r17, r24
    10dc:	32 c0       	rjmp	.+100    	; 0x1142 <_ZN11StartModule6updateEP10DecoderRC5+0xe2>
    10de:	64 e0       	ldi	r22, 0x04	; 4
    10e0:	ce 01       	movw	r24, r28
    10e2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
    10e6:	0b c0       	rjmp	.+22     	; 0x10fe <_ZN11StartModule6updateEP10DecoderRC5+0x9e>
				if(address==ADDRESS_PROGRAMING) {
					setState(STATE_PROGRAMING);
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	ce 01       	movw	r24, r28
    10ec:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
					setCommands(command);
    10f0:	61 2f       	mov	r22, r17
    10f2:	ce 01       	movw	r24, r28
    10f4:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN11StartModule11setCommandsEh>
					prog = true;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	8e 83       	std	Y+6, r24	; 0x06
    10fc:	1d c0       	rjmp	.+58     	; 0x1138 <_ZN11StartModule6updateEP10DecoderRC5+0xd8>
				}	break;
			default: break;
		}
	}
	switch(currentState) {
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	19 f0       	breq	.+6      	; 0x110a <_ZN11StartModule6updateEP10DecoderRC5+0xaa>
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	59 f0       	breq	.+22     	; 0x111e <_ZN11StartModule6updateEP10DecoderRC5+0xbe>
    1108:	1c c0       	rjmp	.+56     	; 0x1142 <_ZN11StartModule6updateEP10DecoderRC5+0xe2>
		case STATE_PROGRAMING:
			if(prog) prog = false;
    110a:	8e 81       	ldd	r24, Y+6	; 0x06
    110c:	88 23       	and	r24, r24
    110e:	11 f0       	breq	.+4      	; 0x1114 <_ZN11StartModule6updateEP10DecoderRC5+0xb4>
    1110:	1e 82       	std	Y+6, r1	; 0x06
    1112:	17 c0       	rjmp	.+46     	; 0x1142 <_ZN11StartModule6updateEP10DecoderRC5+0xe2>
			else setState(STATE_POWER_ON);	break;
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
    111c:	12 c0       	rjmp	.+36     	; 0x1142 <_ZN11StartModule6updateEP10DecoderRC5+0xe2>
		case STATE_STOPPED_SAFE:	setState(STATE_STOPPED);	break;
    111e:	65 e0       	ldi	r22, 0x05	; 5
    1120:	ce 01       	movw	r24, r28
    1122:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
		default: break;
	}
}
    1126:	0d c0       	rjmp	.+26     	; 0x1142 <_ZN11StartModule6updateEP10DecoderRC5+0xe2>
		uint8_t command = decoder->getCommand();

		switch(currentState) {
			case STATE_POWER_ON:
				if(address==ADDRESS_START_STOP && command==startCommand) setState(STATE_STARTED);
				if(address==ADDRESS_START_STOP && command==stopCommand) setState(STATE_STOPPED_SAFE);
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	18 13       	cpse	r17, r24
    112c:	e8 cf       	rjmp	.-48     	; 0x10fe <_ZN11StartModule6updateEP10DecoderRC5+0x9e>
    112e:	be cf       	rjmp	.-132    	; 0x10ac <_ZN11StartModule6updateEP10DecoderRC5+0x4c>
					setCommands(command);
					prog = true;
				}	break;
			case STATE_STARTED:
				if(address==ADDRESS_START_STOP && command==stopCommand) setState(STATE_STOPPED_SAFE);
				if(address==ADDRESS_PROGRAMING) {
    1130:	8b e0       	ldi	r24, 0x0B	; 11
    1132:	f8 12       	cpse	r15, r24
    1134:	06 c0       	rjmp	.+12     	; 0x1142 <_ZN11StartModule6updateEP10DecoderRC5+0xe2>
    1136:	d8 cf       	rjmp	.-80     	; 0x10e8 <_ZN11StartModule6updateEP10DecoderRC5+0x88>
					prog = true;
				}	break;
			default: break;
		}
	}
	switch(currentState) {
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	49 f3       	breq	.-46     	; 0x1110 <_ZN11StartModule6updateEP10DecoderRC5+0xb0>
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	71 f3       	breq	.-36     	; 0x111e <_ZN11StartModule6updateEP10DecoderRC5+0xbe>
			if(prog) prog = false;
			else setState(STATE_POWER_ON);	break;
		case STATE_STOPPED_SAFE:	setState(STATE_STOPPED);	break;
		default: break;
	}
}
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	08 95       	ret

0000114e <_ZN11StartModule10waitModuleEP6StreamP10DecoderRC5PFvvES5_>:
	}
	
	printDebug(serial);
}

void StartModule::waitModule(Stream* serial, DecoderRC5* decoder, void(*func)(), void(*quitFunc)()) {
    114e:	af 92       	push	r10
    1150:	bf 92       	push	r11
    1152:	cf 92       	push	r12
    1154:	df 92       	push	r13
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	ec 01       	movw	r28, r24
    1164:	5b 01       	movw	r10, r22
    1166:	7a 01       	movw	r14, r20
    1168:	69 01       	movw	r12, r18
	StartModule::update(decoder);
    116a:	ba 01       	movw	r22, r20
    116c:	0e 94 30 08 	call	0x1060	; 0x1060 <_ZN11StartModule6updateEP10DecoderRC5>
	
	while(currentState!=STATE_STARTED) {
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	c1 f0       	breq	.+48     	; 0x11a6 <_ZN11StartModule10waitModuleEP6StreamP10DecoderRC5PFvvES5_+0x58>
		func();
    1176:	f6 01       	movw	r30, r12
    1178:	09 95       	icall
		StartModule::update(decoder);
    117a:	b7 01       	movw	r22, r14
    117c:	ce 01       	movw	r24, r28
    117e:	0e 94 30 08 	call	0x1060	; 0x1060 <_ZN11StartModule6updateEP10DecoderRC5>
		if(currentState==STATE_STARTED)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	11 f4       	brne	.+4      	; 0x118c <_ZN11StartModule10waitModuleEP6StreamP10DecoderRC5PFvvES5_+0x3e>
			quitFunc();	
    1188:	f8 01       	movw	r30, r16
    118a:	09 95       	icall

		printDebug(serial);
    118c:	b5 01       	movw	r22, r10
    118e:	ce 01       	movw	r24, r28
    1190:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN11StartModule10printDebugEP6Stream>
    1194:	83 ec       	ldi	r24, 0xC3	; 195
    1196:	99 e0       	ldi	r25, 0x09	; 9
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <_ZN11StartModule10waitModuleEP6StreamP10DecoderRC5PFvvES5_+0x4a>
    119c:	00 c0       	rjmp	.+0      	; 0x119e <_ZN11StartModule10waitModuleEP6StreamP10DecoderRC5PFvvES5_+0x50>
    119e:	00 00       	nop
}

void StartModule::waitModule(Stream* serial, DecoderRC5* decoder, void(*func)(), void(*quitFunc)()) {
	StartModule::update(decoder);
	
	while(currentState!=STATE_STARTED) {
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	41 f7       	brne	.-48     	; 0x1176 <_ZN11StartModule10waitModuleEP6StreamP10DecoderRC5PFvvES5_+0x28>
			quitFunc();	

		printDebug(serial);
		_delay_ms(10);
	}
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	af 90       	pop	r10
    11ba:	08 95       	ret

000011bc <_ZN11StartModule4waitEP6StreamP10DecoderRC5PFvvES5_>:
	
	if(mode==MANUAL && (currentState==STATE_PROGRAMING || currentState==STATE_STOPPED_SAFE || currentState==STATE_STOPPED))
		setState(STATE_POWER_ON);
}

void StartModule::wait(Stream* serial, DecoderRC5* decoder, void(*func)(), void(*quitFunc)()) {
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	ec 01       	movw	r28, r24
    11ca:	7b 01       	movw	r14, r22
    11cc:	b9 01       	movw	r22, r18
	switch(mode) {
    11ce:	88 81       	ld	r24, Y
    11d0:	84 31       	cpi	r24, 0x14	; 20
    11d2:	39 f0       	breq	.+14     	; 0x11e2 <_ZN11StartModule4waitEP6StreamP10DecoderRC5PFvvES5_+0x26>
    11d4:	85 31       	cpi	r24, 0x15	; 21
    11d6:	59 f4       	brne	.+22     	; 0x11ee <_ZN11StartModule4waitEP6StreamP10DecoderRC5PFvvES5_+0x32>
		case OFF: break;
		case MODULE:	StartModule::waitModule(serial, decoder, func, quitFunc);	break;
    11d8:	b7 01       	movw	r22, r14
    11da:	ce 01       	movw	r24, r28
    11dc:	0e 94 a7 08 	call	0x114e	; 0x114e <_ZN11StartModule10waitModuleEP6StreamP10DecoderRC5PFvvES5_>
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <_ZN11StartModule4waitEP6StreamP10DecoderRC5PFvvES5_+0x32>
		case MANUAL:	StartModule::waitManual(serial, func, quitFunc);			break;
    11e2:	98 01       	movw	r18, r16
    11e4:	ab 01       	movw	r20, r22
    11e6:	b7 01       	movw	r22, r14
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN11StartModule10waitManualEP6StreamPFvvES3_>
		default: break;
	}
	
	printDebug(serial);
    11ee:	b7 01       	movw	r22, r14
    11f0:	ce 01       	movw	r24, r28
    11f2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN11StartModule10printDebugEP6Stream>
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	08 95       	ret

00001204 <_Z10EEPROMreadh>:
	EECR |= (1<<EEMPE);
	EECR |= (1<<EEPE);
}

unsigned char EEPROMread(unsigned char address) {
	while(EECR & (1<<EEPE)) {}
    1204:	f9 99       	sbic	0x1f, 1	; 31
    1206:	fe cf       	rjmp	.-4      	; 0x1204 <_Z10EEPROMreadh>
	
	EEAR = address;
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	92 bd       	out	0x22, r25	; 34
    120c:	81 bd       	out	0x21, r24	; 33
	
	EECR |= (1<<EERE);
    120e:	f8 9a       	sbi	0x1f, 0	; 31
	
	return EEDR;
    1210:	80 b5       	in	r24, 0x20	; 32
    1212:	08 95       	ret

00001214 <_ZN11StartModule10initializeEh>:
	debug = false;
	clicked = false;
	prog = false;
}

void StartModule::initialize(uint8_t mode) {
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
    121c:	16 2f       	mov	r17, r22
	DDRC &= ~(1<<PINC0);
    121e:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1<<PINC0);
    1220:	40 9a       	sbi	0x08, 0	; 8
	
	setMode(mode);
    1222:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN11StartModule7setModeEh>

	setState(EEPROMread(SAVED_STATE));
    1226:	8a e0       	ldi	r24, 0x0A	; 10
    1228:	0e 94 02 09 	call	0x1204	; 0x1204 <_Z10EEPROMreadh>
    122c:	68 2f       	mov	r22, r24
    122e:	ce 01       	movw	r24, r28
    1230:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
	setCommands(EEPROMread(DYHLO_IDENTIFIER));
    1234:	8b e0       	ldi	r24, 0x0B	; 11
    1236:	0e 94 02 09 	call	0x1204	; 0x1204 <_Z10EEPROMreadh>
    123a:	68 2f       	mov	r22, r24
    123c:	ce 01       	movw	r24, r28
    123e:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN11StartModule11setCommandsEh>
	
	if(mode==MANUAL && (currentState==STATE_PROGRAMING || currentState==STATE_STOPPED_SAFE || currentState==STATE_STOPPED))
    1242:	14 31       	cpi	r17, 0x14	; 20
    1244:	51 f4       	brne	.+20     	; 0x125a <_ZN11StartModule10initializeEh+0x46>
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	19 f0       	breq	.+6      	; 0x1252 <_ZN11StartModule10initializeEh+0x3e>
    124c:	84 50       	subi	r24, 0x04	; 4
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	20 f4       	brcc	.+8      	; 0x125a <_ZN11StartModule10initializeEh+0x46>
		setState(STATE_POWER_ON);
    1252:	62 e0       	ldi	r22, 0x02	; 2
    1254:	ce 01       	movw	r24, r28
    1256:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN11StartModule8setStateEh>
}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	08 95       	ret

00001262 <_ZN6StreamC1Ev>:
			
			newS = true;
		}
	}
	return newS;
}
    1262:	08 95       	ret

00001264 <_ZN6Stream5beginEm>:
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	ec 01       	movw	r28, r24
    126a:	db 01       	movw	r26, r22
    126c:	ca 01       	movw	r24, r20
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	aa 1f       	adc	r26, r26
    1274:	bb 1f       	adc	r27, r27
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	aa 1f       	adc	r26, r26
    127c:	bb 1f       	adc	r27, r27
    127e:	9c 01       	movw	r18, r24
    1280:	ad 01       	movw	r20, r26
    1282:	22 0f       	add	r18, r18
    1284:	33 1f       	adc	r19, r19
    1286:	44 1f       	adc	r20, r20
    1288:	55 1f       	adc	r21, r21
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	44 1f       	adc	r20, r20
    1290:	55 1f       	adc	r21, r21
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	72 e1       	ldi	r23, 0x12	; 18
    1296:	8a e7       	ldi	r24, 0x7A	; 122
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 17 0c 	call	0x182e	; 0x182e <__udivmodsi4>
    129e:	ba 01       	movw	r22, r20
    12a0:	a9 01       	movw	r20, r18
    12a2:	41 50       	subi	r20, 0x01	; 1
    12a4:	51 09       	sbc	r21, r1
    12a6:	61 09       	sbc	r22, r1
    12a8:	71 09       	sbc	r23, r1
    12aa:	bb 27       	eor	r27, r27
    12ac:	a7 2f       	mov	r26, r23
    12ae:	96 2f       	mov	r25, r22
    12b0:	85 2f       	mov	r24, r21
    12b2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    12b6:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    12ba:	88 e1       	ldi	r24, 0x18	; 24
    12bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12c0:	e2 ec       	ldi	r30, 0xC2	; 194
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 61       	ori	r24, 0x10	; 16
    12c8:	80 83       	st	Z, r24
    12ca:	80 81       	ld	r24, Z
    12cc:	86 60       	ori	r24, 0x06	; 6
    12ce:	80 83       	st	Z, r24
    12d0:	fe 01       	movw	r30, r28
    12d2:	e0 58       	subi	r30, 0x80	; 128
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	11 82       	std	Z+1, r1	; 0x01
    12d8:	10 82       	st	Z, r1
    12da:	de 01       	movw	r26, r28
    12dc:	e0 54       	subi	r30, 0x40	; 64
    12de:	f1 09       	sbc	r31, r1
    12e0:	83 e2       	ldi	r24, 0x23	; 35
    12e2:	8d 93       	st	X+, r24
    12e4:	ae 17       	cp	r26, r30
    12e6:	bf 07       	cpc	r27, r31
    12e8:	e1 f7       	brne	.-8      	; 0x12e2 <_ZN6Stream5beginEm+0x7e>
    12ea:	1f ae       	std	Y+63, r1	; 0x3f
    12ec:	9e 01       	movw	r18, r28
    12ee:	20 58       	subi	r18, 0x80	; 128
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	83 e2       	ldi	r24, 0x23	; 35
    12f4:	81 93       	st	Z+, r24
    12f6:	e2 17       	cp	r30, r18
    12f8:	f3 07       	cpc	r31, r19
    12fa:	e1 f7       	brne	.-8      	; 0x12f4 <_ZN6Stream5beginEm+0x90>
    12fc:	c1 58       	subi	r28, 0x81	; 129
    12fe:	df 4f       	sbci	r29, 0xFF	; 255
    1300:	18 82       	st	Y, r1
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <_ZN6Stream5writeEh>:
    1308:	e0 ec       	ldi	r30, 0xC0	; 192
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	85 ff       	sbrs	r24, 5
    1310:	fd cf       	rjmp	.-6      	; 0x130c <_ZN6Stream5writeEh+0x4>
    1312:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1316:	08 95       	ret

00001318 <_ZN6Stream5printEPc>:

void Stream::print(char* str){
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	eb 01       	movw	r28, r22
	int index = 0;
	while(str[index]!='\0') {
    1322:	68 81       	ld	r22, Y
    1324:	66 23       	and	r22, r22
    1326:	41 f0       	breq	.+16     	; 0x1338 <_ZN6Stream5printEPc+0x20>
    1328:	8c 01       	movw	r16, r24
    132a:	21 96       	adiw	r28, 0x01	; 1
		Stream::write((unsigned char)str[index]);
    132c:	c8 01       	movw	r24, r16
    132e:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN6Stream5writeEh>
	return newS;
}

void Stream::print(char* str){
	int index = 0;
	while(str[index]!='\0') {
    1332:	69 91       	ld	r22, Y+
    1334:	61 11       	cpse	r22, r1
    1336:	fa cf       	rjmp	.-12     	; 0x132c <_ZN6Stream5printEPc+0x14>
		Stream::write((unsigned char)str[index]);
		index++;
	}
}
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	08 95       	ret

00001342 <_ZN6Stream7printlnEPc>:
void Stream::print(int number) {
	char* str = Stream::intToString(number);
	Stream::print(str);
}

void Stream::println(char* str){
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	ec 01       	movw	r28, r24
	Stream::print(str);
    1348:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZN6Stream5printEPc>
	Stream::print("\n\0");
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	71 e0       	ldi	r23, 0x01	; 1
    1350:	ce 01       	movw	r24, r28
    1352:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZN6Stream5printEPc>
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <_ZN4Leds15led_strip_writeEP9rgb_colorj>:
#include "WS2812B.h"

void __attribute__((noinline)) Leds::led_strip_write(rgb_color* colors, unsigned int count) {
    135c:	fb 01       	movw	r30, r22
	LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
    135e:	5b 98       	cbi	0x0b, 3	; 11
	LED_STRIP_DDR |= (1<<LED_STRIP_PIN);
    1360:	53 9a       	sbi	0x0a, 3	; 10

	cli();
    1362:	f8 94       	cli
	while(count--) {
    1364:	ca 01       	movw	r24, r20
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	45 2b       	or	r20, r21
    136a:	09 f4       	brne	.+2      	; 0x136e <_ZN4Leds15led_strip_writeEP9rgb_colorj+0x12>
    136c:	1e c0       	rjmp	.+60     	; 0x13aa <led_strip_asm_end30+0x4>
		"led_strip_asm_end%=: "
		: "=b" (colors)
		: "0" (colors),
		"I" (_SFR_IO_ADDR(LED_STRIP_PORT)),
		"I" (LED_STRIP_PIN)
		);
    136e:	01 90       	ld	r0, Z+
    1370:	00 80       	ld	r0, Z
    1372:	07 d0       	rcall	.+14     	; 0x1382 <send_led_strip_byte30>
    1374:	02 90       	ld	r0, -Z
    1376:	05 d0       	rcall	.+10     	; 0x1382 <send_led_strip_byte30>
    1378:	01 90       	ld	r0, Z+
    137a:	01 90       	ld	r0, Z+
    137c:	01 90       	ld	r0, Z+
    137e:	01 d0       	rcall	.+2      	; 0x1382 <send_led_strip_byte30>
    1380:	12 c0       	rjmp	.+36     	; 0x13a6 <led_strip_asm_end30>

00001382 <send_led_strip_byte30>:
    1382:	08 d0       	rcall	.+16     	; 0x1394 <send_led_strip_bit30>
    1384:	07 d0       	rcall	.+14     	; 0x1394 <send_led_strip_bit30>
    1386:	06 d0       	rcall	.+12     	; 0x1394 <send_led_strip_bit30>
    1388:	05 d0       	rcall	.+10     	; 0x1394 <send_led_strip_bit30>
    138a:	04 d0       	rcall	.+8      	; 0x1394 <send_led_strip_bit30>
    138c:	03 d0       	rcall	.+6      	; 0x1394 <send_led_strip_bit30>
    138e:	02 d0       	rcall	.+4      	; 0x1394 <send_led_strip_bit30>
    1390:	01 d0       	rcall	.+2      	; 0x1394 <send_led_strip_bit30>
    1392:	08 95       	ret

00001394 <send_led_strip_bit30>:
    1394:	00 1c       	adc	r0, r0
    1396:	5b 9a       	sbi	0x0b, 3	; 11
    1398:	08 f0       	brcs	.+2      	; 0x139c <send_led_strip_bit30+0x8>
    139a:	5b 98       	cbi	0x0b, 3	; 11
    139c:	00 00       	nop
    139e:	00 00       	nop
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <send_led_strip_bit30+0x10>
    13a2:	5b 98       	cbi	0x0b, 3	; 11
    13a4:	08 95       	ret

000013a6 <led_strip_asm_end30>:
void __attribute__((noinline)) Leds::led_strip_write(rgb_color* colors, unsigned int count) {
	LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
	LED_STRIP_DDR |= (1<<LED_STRIP_PIN);

	cli();
	while(count--) {
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	10 f7       	brcc	.-60     	; 0x136e <_ZN4Leds15led_strip_writeEP9rgb_colorj+0x12>
		: "0" (colors),
		"I" (_SFR_IO_ADDR(LED_STRIP_PORT)),
		"I" (LED_STRIP_PIN)
		);
	}
	sei();
    13aa:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ac:	85 ed       	ldi	r24, 0xD5	; 213
    13ae:	8a 95       	dec	r24
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <led_strip_asm_end30+0x8>
    13b2:	00 00       	nop
    13b4:	08 95       	ret

000013b6 <__subsf3>:
    13b6:	50 58       	subi	r21, 0x80	; 128

000013b8 <__addsf3>:
    13b8:	bb 27       	eor	r27, r27
    13ba:	aa 27       	eor	r26, r26
    13bc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__addsf3x>
    13c0:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__fp_round>
    13c4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscA>
    13c8:	38 f0       	brcs	.+14     	; 0x13d8 <__addsf3+0x20>
    13ca:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_pscB>
    13ce:	20 f0       	brcs	.+8      	; 0x13d8 <__addsf3+0x20>
    13d0:	39 f4       	brne	.+14     	; 0x13e0 <__addsf3+0x28>
    13d2:	9f 3f       	cpi	r25, 0xFF	; 255
    13d4:	19 f4       	brne	.+6      	; 0x13dc <__addsf3+0x24>
    13d6:	26 f4       	brtc	.+8      	; 0x13e0 <__addsf3+0x28>
    13d8:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__fp_nan>
    13dc:	0e f4       	brtc	.+2      	; 0x13e0 <__addsf3+0x28>
    13de:	e0 95       	com	r30
    13e0:	e7 fb       	bst	r30, 7
    13e2:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_inf>

000013e6 <__addsf3x>:
    13e6:	e9 2f       	mov	r30, r25
    13e8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_split3>
    13ec:	58 f3       	brcs	.-42     	; 0x13c4 <__addsf3+0xc>
    13ee:	ba 17       	cp	r27, r26
    13f0:	62 07       	cpc	r22, r18
    13f2:	73 07       	cpc	r23, r19
    13f4:	84 07       	cpc	r24, r20
    13f6:	95 07       	cpc	r25, r21
    13f8:	20 f0       	brcs	.+8      	; 0x1402 <__addsf3x+0x1c>
    13fa:	79 f4       	brne	.+30     	; 0x141a <__addsf3x+0x34>
    13fc:	a6 f5       	brtc	.+104    	; 0x1466 <__addsf3x+0x80>
    13fe:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_zero>
    1402:	0e f4       	brtc	.+2      	; 0x1406 <__addsf3x+0x20>
    1404:	e0 95       	com	r30
    1406:	0b 2e       	mov	r0, r27
    1408:	ba 2f       	mov	r27, r26
    140a:	a0 2d       	mov	r26, r0
    140c:	0b 01       	movw	r0, r22
    140e:	b9 01       	movw	r22, r18
    1410:	90 01       	movw	r18, r0
    1412:	0c 01       	movw	r0, r24
    1414:	ca 01       	movw	r24, r20
    1416:	a0 01       	movw	r20, r0
    1418:	11 24       	eor	r1, r1
    141a:	ff 27       	eor	r31, r31
    141c:	59 1b       	sub	r21, r25
    141e:	99 f0       	breq	.+38     	; 0x1446 <__addsf3x+0x60>
    1420:	59 3f       	cpi	r21, 0xF9	; 249
    1422:	50 f4       	brcc	.+20     	; 0x1438 <__addsf3x+0x52>
    1424:	50 3e       	cpi	r21, 0xE0	; 224
    1426:	68 f1       	brcs	.+90     	; 0x1482 <__addsf3x+0x9c>
    1428:	1a 16       	cp	r1, r26
    142a:	f0 40       	sbci	r31, 0x00	; 0
    142c:	a2 2f       	mov	r26, r18
    142e:	23 2f       	mov	r18, r19
    1430:	34 2f       	mov	r19, r20
    1432:	44 27       	eor	r20, r20
    1434:	58 5f       	subi	r21, 0xF8	; 248
    1436:	f3 cf       	rjmp	.-26     	; 0x141e <__addsf3x+0x38>
    1438:	46 95       	lsr	r20
    143a:	37 95       	ror	r19
    143c:	27 95       	ror	r18
    143e:	a7 95       	ror	r26
    1440:	f0 40       	sbci	r31, 0x00	; 0
    1442:	53 95       	inc	r21
    1444:	c9 f7       	brne	.-14     	; 0x1438 <__addsf3x+0x52>
    1446:	7e f4       	brtc	.+30     	; 0x1466 <__addsf3x+0x80>
    1448:	1f 16       	cp	r1, r31
    144a:	ba 0b       	sbc	r27, r26
    144c:	62 0b       	sbc	r22, r18
    144e:	73 0b       	sbc	r23, r19
    1450:	84 0b       	sbc	r24, r20
    1452:	ba f0       	brmi	.+46     	; 0x1482 <__addsf3x+0x9c>
    1454:	91 50       	subi	r25, 0x01	; 1
    1456:	a1 f0       	breq	.+40     	; 0x1480 <__addsf3x+0x9a>
    1458:	ff 0f       	add	r31, r31
    145a:	bb 1f       	adc	r27, r27
    145c:	66 1f       	adc	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	88 1f       	adc	r24, r24
    1462:	c2 f7       	brpl	.-16     	; 0x1454 <__addsf3x+0x6e>
    1464:	0e c0       	rjmp	.+28     	; 0x1482 <__addsf3x+0x9c>
    1466:	ba 0f       	add	r27, r26
    1468:	62 1f       	adc	r22, r18
    146a:	73 1f       	adc	r23, r19
    146c:	84 1f       	adc	r24, r20
    146e:	48 f4       	brcc	.+18     	; 0x1482 <__addsf3x+0x9c>
    1470:	87 95       	ror	r24
    1472:	77 95       	ror	r23
    1474:	67 95       	ror	r22
    1476:	b7 95       	ror	r27
    1478:	f7 95       	ror	r31
    147a:	9e 3f       	cpi	r25, 0xFE	; 254
    147c:	08 f0       	brcs	.+2      	; 0x1480 <__addsf3x+0x9a>
    147e:	b0 cf       	rjmp	.-160    	; 0x13e0 <__addsf3+0x28>
    1480:	93 95       	inc	r25
    1482:	88 0f       	add	r24, r24
    1484:	08 f0       	brcs	.+2      	; 0x1488 <__addsf3x+0xa2>
    1486:	99 27       	eor	r25, r25
    1488:	ee 0f       	add	r30, r30
    148a:	97 95       	ror	r25
    148c:	87 95       	ror	r24
    148e:	08 95       	ret

00001490 <__cmpsf2>:
    1490:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__fp_cmp>
    1494:	08 f4       	brcc	.+2      	; 0x1498 <__cmpsf2+0x8>
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	08 95       	ret

0000149a <__divsf3>:
    149a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__divsf3x>
    149e:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__fp_round>
    14a2:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_pscB>
    14a6:	58 f0       	brcs	.+22     	; 0x14be <__divsf3+0x24>
    14a8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscA>
    14ac:	40 f0       	brcs	.+16     	; 0x14be <__divsf3+0x24>
    14ae:	29 f4       	brne	.+10     	; 0x14ba <__divsf3+0x20>
    14b0:	5f 3f       	cpi	r21, 0xFF	; 255
    14b2:	29 f0       	breq	.+10     	; 0x14be <__divsf3+0x24>
    14b4:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_inf>
    14b8:	51 11       	cpse	r21, r1
    14ba:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__fp_szero>
    14be:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__fp_nan>

000014c2 <__divsf3x>:
    14c2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_split3>
    14c6:	68 f3       	brcs	.-38     	; 0x14a2 <__divsf3+0x8>

000014c8 <__divsf3_pse>:
    14c8:	99 23       	and	r25, r25
    14ca:	b1 f3       	breq	.-20     	; 0x14b8 <__divsf3+0x1e>
    14cc:	55 23       	and	r21, r21
    14ce:	91 f3       	breq	.-28     	; 0x14b4 <__divsf3+0x1a>
    14d0:	95 1b       	sub	r25, r21
    14d2:	55 0b       	sbc	r21, r21
    14d4:	bb 27       	eor	r27, r27
    14d6:	aa 27       	eor	r26, r26
    14d8:	62 17       	cp	r22, r18
    14da:	73 07       	cpc	r23, r19
    14dc:	84 07       	cpc	r24, r20
    14de:	38 f0       	brcs	.+14     	; 0x14ee <__divsf3_pse+0x26>
    14e0:	9f 5f       	subi	r25, 0xFF	; 255
    14e2:	5f 4f       	sbci	r21, 0xFF	; 255
    14e4:	22 0f       	add	r18, r18
    14e6:	33 1f       	adc	r19, r19
    14e8:	44 1f       	adc	r20, r20
    14ea:	aa 1f       	adc	r26, r26
    14ec:	a9 f3       	breq	.-22     	; 0x14d8 <__divsf3_pse+0x10>
    14ee:	35 d0       	rcall	.+106    	; 0x155a <__divsf3_pse+0x92>
    14f0:	0e 2e       	mov	r0, r30
    14f2:	3a f0       	brmi	.+14     	; 0x1502 <__divsf3_pse+0x3a>
    14f4:	e0 e8       	ldi	r30, 0x80	; 128
    14f6:	32 d0       	rcall	.+100    	; 0x155c <__divsf3_pse+0x94>
    14f8:	91 50       	subi	r25, 0x01	; 1
    14fa:	50 40       	sbci	r21, 0x00	; 0
    14fc:	e6 95       	lsr	r30
    14fe:	00 1c       	adc	r0, r0
    1500:	ca f7       	brpl	.-14     	; 0x14f4 <__divsf3_pse+0x2c>
    1502:	2b d0       	rcall	.+86     	; 0x155a <__divsf3_pse+0x92>
    1504:	fe 2f       	mov	r31, r30
    1506:	29 d0       	rcall	.+82     	; 0x155a <__divsf3_pse+0x92>
    1508:	66 0f       	add	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	88 1f       	adc	r24, r24
    150e:	bb 1f       	adc	r27, r27
    1510:	26 17       	cp	r18, r22
    1512:	37 07       	cpc	r19, r23
    1514:	48 07       	cpc	r20, r24
    1516:	ab 07       	cpc	r26, r27
    1518:	b0 e8       	ldi	r27, 0x80	; 128
    151a:	09 f0       	breq	.+2      	; 0x151e <__divsf3_pse+0x56>
    151c:	bb 0b       	sbc	r27, r27
    151e:	80 2d       	mov	r24, r0
    1520:	bf 01       	movw	r22, r30
    1522:	ff 27       	eor	r31, r31
    1524:	93 58       	subi	r25, 0x83	; 131
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	3a f0       	brmi	.+14     	; 0x1538 <__divsf3_pse+0x70>
    152a:	9e 3f       	cpi	r25, 0xFE	; 254
    152c:	51 05       	cpc	r21, r1
    152e:	78 f0       	brcs	.+30     	; 0x154e <__divsf3_pse+0x86>
    1530:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_inf>
    1534:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__fp_szero>
    1538:	5f 3f       	cpi	r21, 0xFF	; 255
    153a:	e4 f3       	brlt	.-8      	; 0x1534 <__divsf3_pse+0x6c>
    153c:	98 3e       	cpi	r25, 0xE8	; 232
    153e:	d4 f3       	brlt	.-12     	; 0x1534 <__divsf3_pse+0x6c>
    1540:	86 95       	lsr	r24
    1542:	77 95       	ror	r23
    1544:	67 95       	ror	r22
    1546:	b7 95       	ror	r27
    1548:	f7 95       	ror	r31
    154a:	9f 5f       	subi	r25, 0xFF	; 255
    154c:	c9 f7       	brne	.-14     	; 0x1540 <__divsf3_pse+0x78>
    154e:	88 0f       	add	r24, r24
    1550:	91 1d       	adc	r25, r1
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	97 f9       	bld	r25, 7
    1558:	08 95       	ret
    155a:	e1 e0       	ldi	r30, 0x01	; 1
    155c:	66 0f       	add	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	bb 1f       	adc	r27, r27
    1564:	62 17       	cp	r22, r18
    1566:	73 07       	cpc	r23, r19
    1568:	84 07       	cpc	r24, r20
    156a:	ba 07       	cpc	r27, r26
    156c:	20 f0       	brcs	.+8      	; 0x1576 <__divsf3_pse+0xae>
    156e:	62 1b       	sub	r22, r18
    1570:	73 0b       	sbc	r23, r19
    1572:	84 0b       	sbc	r24, r20
    1574:	ba 0b       	sbc	r27, r26
    1576:	ee 1f       	adc	r30, r30
    1578:	88 f7       	brcc	.-30     	; 0x155c <__divsf3_pse+0x94>
    157a:	e0 95       	com	r30
    157c:	08 95       	ret

0000157e <__fixunssfsi>:
    157e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fp_splitA>
    1582:	88 f0       	brcs	.+34     	; 0x15a6 <__fixunssfsi+0x28>
    1584:	9f 57       	subi	r25, 0x7F	; 127
    1586:	98 f0       	brcs	.+38     	; 0x15ae <__fixunssfsi+0x30>
    1588:	b9 2f       	mov	r27, r25
    158a:	99 27       	eor	r25, r25
    158c:	b7 51       	subi	r27, 0x17	; 23
    158e:	b0 f0       	brcs	.+44     	; 0x15bc <__fixunssfsi+0x3e>
    1590:	e1 f0       	breq	.+56     	; 0x15ca <__fixunssfsi+0x4c>
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	88 1f       	adc	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	1a f0       	brmi	.+6      	; 0x15a2 <__fixunssfsi+0x24>
    159c:	ba 95       	dec	r27
    159e:	c9 f7       	brne	.-14     	; 0x1592 <__fixunssfsi+0x14>
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <__fixunssfsi+0x4c>
    15a2:	b1 30       	cpi	r27, 0x01	; 1
    15a4:	91 f0       	breq	.+36     	; 0x15ca <__fixunssfsi+0x4c>
    15a6:	0e 94 99 0b 	call	0x1732	; 0x1732 <__fp_zero>
    15aa:	b1 e0       	ldi	r27, 0x01	; 1
    15ac:	08 95       	ret
    15ae:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_zero>
    15b2:	67 2f       	mov	r22, r23
    15b4:	78 2f       	mov	r23, r24
    15b6:	88 27       	eor	r24, r24
    15b8:	b8 5f       	subi	r27, 0xF8	; 248
    15ba:	39 f0       	breq	.+14     	; 0x15ca <__fixunssfsi+0x4c>
    15bc:	b9 3f       	cpi	r27, 0xF9	; 249
    15be:	cc f3       	brlt	.-14     	; 0x15b2 <__fixunssfsi+0x34>
    15c0:	86 95       	lsr	r24
    15c2:	77 95       	ror	r23
    15c4:	67 95       	ror	r22
    15c6:	b3 95       	inc	r27
    15c8:	d9 f7       	brne	.-10     	; 0x15c0 <__fixunssfsi+0x42>
    15ca:	3e f4       	brtc	.+14     	; 0x15da <__fixunssfsi+0x5c>
    15cc:	90 95       	com	r25
    15ce:	80 95       	com	r24
    15d0:	70 95       	com	r23
    15d2:	61 95       	neg	r22
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	8f 4f       	sbci	r24, 0xFF	; 255
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	08 95       	ret

000015dc <__floatunsisf>:
    15dc:	e8 94       	clt
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <__floatsisf+0x12>

000015e0 <__floatsisf>:
    15e0:	97 fb       	bst	r25, 7
    15e2:	3e f4       	brtc	.+14     	; 0x15f2 <__floatsisf+0x12>
    15e4:	90 95       	com	r25
    15e6:	80 95       	com	r24
    15e8:	70 95       	com	r23
    15ea:	61 95       	neg	r22
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	8f 4f       	sbci	r24, 0xFF	; 255
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	99 23       	and	r25, r25
    15f4:	a9 f0       	breq	.+42     	; 0x1620 <__floatsisf+0x40>
    15f6:	f9 2f       	mov	r31, r25
    15f8:	96 e9       	ldi	r25, 0x96	; 150
    15fa:	bb 27       	eor	r27, r27
    15fc:	93 95       	inc	r25
    15fe:	f6 95       	lsr	r31
    1600:	87 95       	ror	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	b7 95       	ror	r27
    1608:	f1 11       	cpse	r31, r1
    160a:	f8 cf       	rjmp	.-16     	; 0x15fc <__floatsisf+0x1c>
    160c:	fa f4       	brpl	.+62     	; 0x164c <__floatsisf+0x6c>
    160e:	bb 0f       	add	r27, r27
    1610:	11 f4       	brne	.+4      	; 0x1616 <__floatsisf+0x36>
    1612:	60 ff       	sbrs	r22, 0
    1614:	1b c0       	rjmp	.+54     	; 0x164c <__floatsisf+0x6c>
    1616:	6f 5f       	subi	r22, 0xFF	; 255
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	8f 4f       	sbci	r24, 0xFF	; 255
    161c:	9f 4f       	sbci	r25, 0xFF	; 255
    161e:	16 c0       	rjmp	.+44     	; 0x164c <__floatsisf+0x6c>
    1620:	88 23       	and	r24, r24
    1622:	11 f0       	breq	.+4      	; 0x1628 <__floatsisf+0x48>
    1624:	96 e9       	ldi	r25, 0x96	; 150
    1626:	11 c0       	rjmp	.+34     	; 0x164a <__floatsisf+0x6a>
    1628:	77 23       	and	r23, r23
    162a:	21 f0       	breq	.+8      	; 0x1634 <__floatsisf+0x54>
    162c:	9e e8       	ldi	r25, 0x8E	; 142
    162e:	87 2f       	mov	r24, r23
    1630:	76 2f       	mov	r23, r22
    1632:	05 c0       	rjmp	.+10     	; 0x163e <__floatsisf+0x5e>
    1634:	66 23       	and	r22, r22
    1636:	71 f0       	breq	.+28     	; 0x1654 <__floatsisf+0x74>
    1638:	96 e8       	ldi	r25, 0x86	; 134
    163a:	86 2f       	mov	r24, r22
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	2a f0       	brmi	.+10     	; 0x164c <__floatsisf+0x6c>
    1642:	9a 95       	dec	r25
    1644:	66 0f       	add	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	88 1f       	adc	r24, r24
    164a:	da f7       	brpl	.-10     	; 0x1642 <__floatsisf+0x62>
    164c:	88 0f       	add	r24, r24
    164e:	96 95       	lsr	r25
    1650:	87 95       	ror	r24
    1652:	97 f9       	bld	r25, 7
    1654:	08 95       	ret

00001656 <__fp_cmp>:
    1656:	99 0f       	add	r25, r25
    1658:	00 08       	sbc	r0, r0
    165a:	55 0f       	add	r21, r21
    165c:	aa 0b       	sbc	r26, r26
    165e:	e0 e8       	ldi	r30, 0x80	; 128
    1660:	fe ef       	ldi	r31, 0xFE	; 254
    1662:	16 16       	cp	r1, r22
    1664:	17 06       	cpc	r1, r23
    1666:	e8 07       	cpc	r30, r24
    1668:	f9 07       	cpc	r31, r25
    166a:	c0 f0       	brcs	.+48     	; 0x169c <__fp_cmp+0x46>
    166c:	12 16       	cp	r1, r18
    166e:	13 06       	cpc	r1, r19
    1670:	e4 07       	cpc	r30, r20
    1672:	f5 07       	cpc	r31, r21
    1674:	98 f0       	brcs	.+38     	; 0x169c <__fp_cmp+0x46>
    1676:	62 1b       	sub	r22, r18
    1678:	73 0b       	sbc	r23, r19
    167a:	84 0b       	sbc	r24, r20
    167c:	95 0b       	sbc	r25, r21
    167e:	39 f4       	brne	.+14     	; 0x168e <__fp_cmp+0x38>
    1680:	0a 26       	eor	r0, r26
    1682:	61 f0       	breq	.+24     	; 0x169c <__fp_cmp+0x46>
    1684:	23 2b       	or	r18, r19
    1686:	24 2b       	or	r18, r20
    1688:	25 2b       	or	r18, r21
    168a:	21 f4       	brne	.+8      	; 0x1694 <__fp_cmp+0x3e>
    168c:	08 95       	ret
    168e:	0a 26       	eor	r0, r26
    1690:	09 f4       	brne	.+2      	; 0x1694 <__fp_cmp+0x3e>
    1692:	a1 40       	sbci	r26, 0x01	; 1
    1694:	a6 95       	lsr	r26
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	81 1d       	adc	r24, r1
    169a:	81 1d       	adc	r24, r1
    169c:	08 95       	ret

0000169e <__fp_inf>:
    169e:	97 f9       	bld	r25, 7
    16a0:	9f 67       	ori	r25, 0x7F	; 127
    16a2:	80 e8       	ldi	r24, 0x80	; 128
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	08 95       	ret

000016aa <__fp_nan>:
    16aa:	9f ef       	ldi	r25, 0xFF	; 255
    16ac:	80 ec       	ldi	r24, 0xC0	; 192
    16ae:	08 95       	ret

000016b0 <__fp_pscA>:
    16b0:	00 24       	eor	r0, r0
    16b2:	0a 94       	dec	r0
    16b4:	16 16       	cp	r1, r22
    16b6:	17 06       	cpc	r1, r23
    16b8:	18 06       	cpc	r1, r24
    16ba:	09 06       	cpc	r0, r25
    16bc:	08 95       	ret

000016be <__fp_pscB>:
    16be:	00 24       	eor	r0, r0
    16c0:	0a 94       	dec	r0
    16c2:	12 16       	cp	r1, r18
    16c4:	13 06       	cpc	r1, r19
    16c6:	14 06       	cpc	r1, r20
    16c8:	05 06       	cpc	r0, r21
    16ca:	08 95       	ret

000016cc <__fp_round>:
    16cc:	09 2e       	mov	r0, r25
    16ce:	03 94       	inc	r0
    16d0:	00 0c       	add	r0, r0
    16d2:	11 f4       	brne	.+4      	; 0x16d8 <__fp_round+0xc>
    16d4:	88 23       	and	r24, r24
    16d6:	52 f0       	brmi	.+20     	; 0x16ec <__fp_round+0x20>
    16d8:	bb 0f       	add	r27, r27
    16da:	40 f4       	brcc	.+16     	; 0x16ec <__fp_round+0x20>
    16dc:	bf 2b       	or	r27, r31
    16de:	11 f4       	brne	.+4      	; 0x16e4 <__fp_round+0x18>
    16e0:	60 ff       	sbrs	r22, 0
    16e2:	04 c0       	rjmp	.+8      	; 0x16ec <__fp_round+0x20>
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	08 95       	ret

000016ee <__fp_split3>:
    16ee:	57 fd       	sbrc	r21, 7
    16f0:	90 58       	subi	r25, 0x80	; 128
    16f2:	44 0f       	add	r20, r20
    16f4:	55 1f       	adc	r21, r21
    16f6:	59 f0       	breq	.+22     	; 0x170e <__fp_splitA+0x10>
    16f8:	5f 3f       	cpi	r21, 0xFF	; 255
    16fa:	71 f0       	breq	.+28     	; 0x1718 <__fp_splitA+0x1a>
    16fc:	47 95       	ror	r20

000016fe <__fp_splitA>:
    16fe:	88 0f       	add	r24, r24
    1700:	97 fb       	bst	r25, 7
    1702:	99 1f       	adc	r25, r25
    1704:	61 f0       	breq	.+24     	; 0x171e <__fp_splitA+0x20>
    1706:	9f 3f       	cpi	r25, 0xFF	; 255
    1708:	79 f0       	breq	.+30     	; 0x1728 <__fp_splitA+0x2a>
    170a:	87 95       	ror	r24
    170c:	08 95       	ret
    170e:	12 16       	cp	r1, r18
    1710:	13 06       	cpc	r1, r19
    1712:	14 06       	cpc	r1, r20
    1714:	55 1f       	adc	r21, r21
    1716:	f2 cf       	rjmp	.-28     	; 0x16fc <__fp_split3+0xe>
    1718:	46 95       	lsr	r20
    171a:	f1 df       	rcall	.-30     	; 0x16fe <__fp_splitA>
    171c:	08 c0       	rjmp	.+16     	; 0x172e <__fp_splitA+0x30>
    171e:	16 16       	cp	r1, r22
    1720:	17 06       	cpc	r1, r23
    1722:	18 06       	cpc	r1, r24
    1724:	99 1f       	adc	r25, r25
    1726:	f1 cf       	rjmp	.-30     	; 0x170a <__fp_splitA+0xc>
    1728:	86 95       	lsr	r24
    172a:	71 05       	cpc	r23, r1
    172c:	61 05       	cpc	r22, r1
    172e:	08 94       	sec
    1730:	08 95       	ret

00001732 <__fp_zero>:
    1732:	e8 94       	clt

00001734 <__fp_szero>:
    1734:	bb 27       	eor	r27, r27
    1736:	66 27       	eor	r22, r22
    1738:	77 27       	eor	r23, r23
    173a:	cb 01       	movw	r24, r22
    173c:	97 f9       	bld	r25, 7
    173e:	08 95       	ret

00001740 <__gesf2>:
    1740:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__fp_cmp>
    1744:	08 f4       	brcc	.+2      	; 0x1748 <__gesf2+0x8>
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	08 95       	ret

0000174a <__mulsf3>:
    174a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__mulsf3x>
    174e:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__fp_round>
    1752:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscA>
    1756:	38 f0       	brcs	.+14     	; 0x1766 <__mulsf3+0x1c>
    1758:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_pscB>
    175c:	20 f0       	brcs	.+8      	; 0x1766 <__mulsf3+0x1c>
    175e:	95 23       	and	r25, r21
    1760:	11 f0       	breq	.+4      	; 0x1766 <__mulsf3+0x1c>
    1762:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_inf>
    1766:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__fp_nan>
    176a:	11 24       	eor	r1, r1
    176c:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__fp_szero>

00001770 <__mulsf3x>:
    1770:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_split3>
    1774:	70 f3       	brcs	.-36     	; 0x1752 <__mulsf3+0x8>

00001776 <__mulsf3_pse>:
    1776:	95 9f       	mul	r25, r21
    1778:	c1 f3       	breq	.-16     	; 0x176a <__mulsf3+0x20>
    177a:	95 0f       	add	r25, r21
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	55 1f       	adc	r21, r21
    1780:	62 9f       	mul	r22, r18
    1782:	f0 01       	movw	r30, r0
    1784:	72 9f       	mul	r23, r18
    1786:	bb 27       	eor	r27, r27
    1788:	f0 0d       	add	r31, r0
    178a:	b1 1d       	adc	r27, r1
    178c:	63 9f       	mul	r22, r19
    178e:	aa 27       	eor	r26, r26
    1790:	f0 0d       	add	r31, r0
    1792:	b1 1d       	adc	r27, r1
    1794:	aa 1f       	adc	r26, r26
    1796:	64 9f       	mul	r22, r20
    1798:	66 27       	eor	r22, r22
    179a:	b0 0d       	add	r27, r0
    179c:	a1 1d       	adc	r26, r1
    179e:	66 1f       	adc	r22, r22
    17a0:	82 9f       	mul	r24, r18
    17a2:	22 27       	eor	r18, r18
    17a4:	b0 0d       	add	r27, r0
    17a6:	a1 1d       	adc	r26, r1
    17a8:	62 1f       	adc	r22, r18
    17aa:	73 9f       	mul	r23, r19
    17ac:	b0 0d       	add	r27, r0
    17ae:	a1 1d       	adc	r26, r1
    17b0:	62 1f       	adc	r22, r18
    17b2:	83 9f       	mul	r24, r19
    17b4:	a0 0d       	add	r26, r0
    17b6:	61 1d       	adc	r22, r1
    17b8:	22 1f       	adc	r18, r18
    17ba:	74 9f       	mul	r23, r20
    17bc:	33 27       	eor	r19, r19
    17be:	a0 0d       	add	r26, r0
    17c0:	61 1d       	adc	r22, r1
    17c2:	23 1f       	adc	r18, r19
    17c4:	84 9f       	mul	r24, r20
    17c6:	60 0d       	add	r22, r0
    17c8:	21 1d       	adc	r18, r1
    17ca:	82 2f       	mov	r24, r18
    17cc:	76 2f       	mov	r23, r22
    17ce:	6a 2f       	mov	r22, r26
    17d0:	11 24       	eor	r1, r1
    17d2:	9f 57       	subi	r25, 0x7F	; 127
    17d4:	50 40       	sbci	r21, 0x00	; 0
    17d6:	9a f0       	brmi	.+38     	; 0x17fe <__mulsf3_pse+0x88>
    17d8:	f1 f0       	breq	.+60     	; 0x1816 <__mulsf3_pse+0xa0>
    17da:	88 23       	and	r24, r24
    17dc:	4a f0       	brmi	.+18     	; 0x17f0 <__mulsf3_pse+0x7a>
    17de:	ee 0f       	add	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	bb 1f       	adc	r27, r27
    17e4:	66 1f       	adc	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	91 50       	subi	r25, 0x01	; 1
    17ec:	50 40       	sbci	r21, 0x00	; 0
    17ee:	a9 f7       	brne	.-22     	; 0x17da <__mulsf3_pse+0x64>
    17f0:	9e 3f       	cpi	r25, 0xFE	; 254
    17f2:	51 05       	cpc	r21, r1
    17f4:	80 f0       	brcs	.+32     	; 0x1816 <__mulsf3_pse+0xa0>
    17f6:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_inf>
    17fa:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__fp_szero>
    17fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1800:	e4 f3       	brlt	.-8      	; 0x17fa <__mulsf3_pse+0x84>
    1802:	98 3e       	cpi	r25, 0xE8	; 232
    1804:	d4 f3       	brlt	.-12     	; 0x17fa <__mulsf3_pse+0x84>
    1806:	86 95       	lsr	r24
    1808:	77 95       	ror	r23
    180a:	67 95       	ror	r22
    180c:	b7 95       	ror	r27
    180e:	f7 95       	ror	r31
    1810:	e7 95       	ror	r30
    1812:	9f 5f       	subi	r25, 0xFF	; 255
    1814:	c1 f7       	brne	.-16     	; 0x1806 <__mulsf3_pse+0x90>
    1816:	fe 2b       	or	r31, r30
    1818:	88 0f       	add	r24, r24
    181a:	91 1d       	adc	r25, r1
    181c:	96 95       	lsr	r25
    181e:	87 95       	ror	r24
    1820:	97 f9       	bld	r25, 7
    1822:	08 95       	ret

00001824 <__unordsf2>:
    1824:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__fp_cmp>
    1828:	88 0b       	sbc	r24, r24
    182a:	99 0b       	sbc	r25, r25
    182c:	08 95       	ret

0000182e <__udivmodsi4>:
    182e:	a1 e2       	ldi	r26, 0x21	; 33
    1830:	1a 2e       	mov	r1, r26
    1832:	aa 1b       	sub	r26, r26
    1834:	bb 1b       	sub	r27, r27
    1836:	fd 01       	movw	r30, r26
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <__udivmodsi4_ep>

0000183a <__udivmodsi4_loop>:
    183a:	aa 1f       	adc	r26, r26
    183c:	bb 1f       	adc	r27, r27
    183e:	ee 1f       	adc	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	a2 17       	cp	r26, r18
    1844:	b3 07       	cpc	r27, r19
    1846:	e4 07       	cpc	r30, r20
    1848:	f5 07       	cpc	r31, r21
    184a:	20 f0       	brcs	.+8      	; 0x1854 <__udivmodsi4_ep>
    184c:	a2 1b       	sub	r26, r18
    184e:	b3 0b       	sbc	r27, r19
    1850:	e4 0b       	sbc	r30, r20
    1852:	f5 0b       	sbc	r31, r21

00001854 <__udivmodsi4_ep>:
    1854:	66 1f       	adc	r22, r22
    1856:	77 1f       	adc	r23, r23
    1858:	88 1f       	adc	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	1a 94       	dec	r1
    185e:	69 f7       	brne	.-38     	; 0x183a <__udivmodsi4_loop>
    1860:	60 95       	com	r22
    1862:	70 95       	com	r23
    1864:	80 95       	com	r24
    1866:	90 95       	com	r25
    1868:	9b 01       	movw	r18, r22
    186a:	ac 01       	movw	r20, r24
    186c:	bd 01       	movw	r22, r26
    186e:	cf 01       	movw	r24, r30
    1870:	08 95       	ret

00001872 <__tablejump2__>:
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	05 90       	lpm	r0, Z+
    1878:	f4 91       	lpm	r31, Z
    187a:	e0 2d       	mov	r30, r0
    187c:	09 94       	ijmp

0000187e <_exit>:
    187e:	f8 94       	cli

00001880 <__stop_program>:
    1880:	ff cf       	rjmp	.-2      	; 0x1880 <__stop_program>
