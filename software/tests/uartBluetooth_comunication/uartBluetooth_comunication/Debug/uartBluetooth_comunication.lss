
uartBluetooth_comunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000d0a  00000d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000096  00800098  00800098  00000dd6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001368  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000921  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000677  00000000  00000000  00002b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00003204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000609  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b80  00000000  00000000  00003a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004591  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	08 00       	.word	0x0008	; ????
  56:	00 00       	nop
  58:	be 92       	st	-X, r11
  5a:	24 49       	sbci	r18, 0x94	; 148
  5c:	12 3e       	cpi	r17, 0xE2	; 226
  5e:	ab aa       	std	Y+51, r10	; 0x33
  60:	aa 2a       	or	r10, r26
  62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
  64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
  66:	4c 3e       	cpi	r20, 0xEC	; 236
  68:	00 00       	nop
  6a:	00 80       	ld	r0, Z
  6c:	be ab       	std	Y+54, r27	; 0x36
  6e:	aa aa       	std	Y+50, r10	; 0x32
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	00 00       	nop
  74:	00 00       	nop
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 08       	sbc	r0, r0
  82:	41 78       	andi	r20, 0x81	; 129
  84:	d3 bb       	out	0x13, r29	; 19
  86:	43 87       	std	Z+11, r20	; 0x0b
  88:	d1 13       	cpse	r29, r17
  8a:	3d 19       	sub	r19, r13
  8c:	0e 3c       	cpi	r16, 0xCE	; 206
  8e:	c3 bd       	out	0x23, r28	; 35
  90:	42 82       	std	Z+2, r4	; 0x02
  92:	ad 2b       	or	r26, r29
  94:	3e 68       	ori	r19, 0x8E	; 142
  96:	ec 82       	std	Y+4, r14	; 0x04
  98:	76 be       	out	0x36, r7	; 54
  9a:	d9 8f       	std	Y+25, r29	; 0x19
  9c:	e1 a9       	ldd	r30, Z+49	; 0x31
  9e:	3e 4c       	sbci	r19, 0xCE	; 206
  a0:	80 ef       	ldi	r24, 0xF0	; 240
  a2:	ff be       	out	0x3f, r15	; 63
  a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__fp_splitA+0x28>
  a6:	ff 7f       	andi	r31, 0xFF	; 255
  a8:	3f 00       	.word	0x003f	; ????
  aa:	00 00       	nop
  ac:	00 00       	nop
  ae:	07 63       	ori	r16, 0x37	; 55
  b0:	42 36       	cpi	r20, 0x62	; 98
  b2:	b7 9b       	sbis	0x16, 7	; 22
  b4:	d8 a7       	std	Y+40, r29	; 0x28
  b6:	1a 39       	cpi	r17, 0x9A	; 154
  b8:	68 56       	subi	r22, 0x68	; 104
  ba:	18 ae       	std	Y+56, r1	; 0x38
  bc:	ba ab       	std	Y+50, r27	; 0x32
  be:	55 8c       	ldd	r5, Z+29	; 0x1d
  c0:	1d 3c       	cpi	r17, 0xCD	; 205
  c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
  c4:	57 63       	ori	r21, 0x37	; 55
  c6:	bd 6d       	ori	r27, 0xDD	; 221
  c8:	ed fd       	.word	0xfded	; ????
  ca:	75 3e       	cpi	r23, 0xE5	; 229
  cc:	f6 17       	cp	r31, r22
  ce:	72 31       	cpi	r23, 0x12	; 18
  d0:	bf 00       	.word	0x00bf	; ????
  d2:	00 00       	nop
  d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__ctors_start>:
  d6:	d5 00       	.word	0x00d5	; ????

000000d8 <__ctors_end>:
  d8:	11 24       	eor	r1, r1
  da:	1f be       	out	0x3f, r1	; 63
  dc:	cf e5       	ldi	r28, 0x5F	; 95
  de:	d8 e0       	ldi	r29, 0x08	; 8
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	a0 e6       	ldi	r26, 0x60	; 96
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	ea e0       	ldi	r30, 0x0A	; 10
  ec:	fd e0       	ldi	r31, 0x0D	; 13
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
  f0:	05 90       	lpm	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	a8 39       	cpi	r26, 0x98	; 152
  f6:	b1 07       	cpc	r27, r17
  f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	a8 e9       	ldi	r26, 0x98	; 152
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
 102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
 104:	ae 32       	cpi	r26, 0x2E	; 46
 106:	b2 07       	cpc	r27, r18
 108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	cc e6       	ldi	r28, 0x6C	; 108
 10e:	d0 e0       	ldi	r29, 0x00	; 0
 110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
 112:	21 97       	sbiw	r28, 0x01	; 1
 114:	fe 01       	movw	r30, r28
 116:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__tablejump2__>
 11a:	cb 36       	cpi	r28, 0x6B	; 107
 11c:	d1 07       	cpc	r29, r17
 11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
 120:	0e 94 96 00 	call	0x12c	; 0x12c <main>
 124:	0c 94 83 06 	jmp	0xd06	; 0xd06 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <main>:

Stream Serial;

int main() {
	
	Serial.begin(9600);
 12c:	40 e8       	ldi	r20, 0x80	; 128
 12e:	55 e2       	ldi	r21, 0x25	; 37
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	88 e9       	ldi	r24, 0x98	; 152
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN6Stream5beginEm>
	
    while(true) {
		bool isNew = Serial.listen();
 13c:	88 e9       	ldi	r24, 0x98	; 152
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN6Stream6listenEv>
 144:	c8 2f       	mov	r28, r24
		
		char* str = Serial.getString();
 146:	88 e9       	ldi	r24, 0x98	; 152
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN6Stream9getStringEv>
 14e:	8c 01       	movw	r16, r24
		
		if(isNew) {
 150:	cc 23       	and	r28, r28
 152:	a1 f3       	breq	.-24     	; 0x13c <main+0x10>
			Serial.print("Type:\t\0");
 154:	6a e7       	ldi	r22, 0x7A	; 122
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	88 e9       	ldi	r24, 0x98	; 152
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Stream5printEPc>
			Serial.println(Stream::getCommandType(str));
 160:	c8 01       	movw	r24, r16
 162:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN6Stream14getCommandTypeEPc>
 166:	bc 01       	movw	r22, r24
 168:	88 e9       	ldi	r24, 0x98	; 152
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN6Stream7printlnEPc>
			Serial.print("Index:\t\0");
 170:	62 e8       	ldi	r22, 0x82	; 130
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	88 e9       	ldi	r24, 0x98	; 152
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Stream5printEPc>
			Serial.println(Stream::getCommandIndex(str));
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Stream15getCommandIndexEPc>
 182:	bc 01       	movw	r22, r24
 184:	88 e9       	ldi	r24, 0x98	; 152
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 40 02 	call	0x480	; 0x480 <_ZN6Stream7printlnEi>
			Serial.print("Value:\t\0");
 18c:	6b e8       	ldi	r22, 0x8B	; 139
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	88 e9       	ldi	r24, 0x98	; 152
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Stream5printEPc>
			Serial.println(Stream::getCommandValue(str));
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Stream15getCommandValueEPc>
 19e:	bc 01       	movw	r22, r24
 1a0:	88 e9       	ldi	r24, 0x98	; 152
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 40 02 	call	0x480	; 0x480 <_ZN6Stream7printlnEi>
 1a8:	c9 cf       	rjmp	.-110    	; 0x13c <main+0x10>

000001aa <_GLOBAL__sub_I_Serial>:

#include <avr/io.h>
#include <util/delay.h>
#include "UART.h"

Stream Serial;
 1aa:	88 e9       	ldi	r24, 0x98	; 152
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_ZN6StreamC1Ev>
 1b2:	08 95       	ret

000001b4 <_ZN6StreamC1Ev>:
#include <avr/io.h>
#include <math.h>
#include "UART.h"

Stream::Stream() {}
 1b4:	08 95       	ret

000001b6 <_ZN6Stream5beginEm>:

void Stream::begin(unsigned long baudRate) {
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
	//unsigned long baudRateValue = 103;
	unsigned long baudRateValue = (16000000/(16*baudRate))-1;
 1bc:	db 01       	movw	r26, r22
 1be:	ca 01       	movw	r24, r20
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	aa 1f       	adc	r26, r26
 1c6:	bb 1f       	adc	r27, r27
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	aa 1f       	adc	r26, r26
 1ce:	bb 1f       	adc	r27, r27
 1d0:	9c 01       	movw	r18, r24
 1d2:	ad 01       	movw	r20, r26
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	44 1f       	adc	r20, r20
 1da:	55 1f       	adc	r21, r21
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	44 1f       	adc	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	74 e2       	ldi	r23, 0x24	; 36
 1e8:	84 ef       	ldi	r24, 0xF4	; 244
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__udivmodsi4>
 1f0:	da 01       	movw	r26, r20
 1f2:	c9 01       	movw	r24, r18
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	a1 09       	sbc	r26, r1
 1f8:	b1 09       	sbc	r27, r1
	UBRRL = baudRateValue;
 1fa:	89 b9       	out	0x09, r24	; 9
	UBRRH = (baudRateValue>>8);
 1fc:	89 2f       	mov	r24, r25
 1fe:	9a 2f       	mov	r25, r26
 200:	ab 2f       	mov	r26, r27
 202:	bb 27       	eor	r27, r27
 204:	80 bd       	out	0x20, r24	; 32
	
	UCSRA = 0x00;
 206:	1b b8       	out	0x0b, r1	; 11
	UCSRB = (1<<TXEN)|(1<<RXEN);
 208:	88 e1       	ldi	r24, 0x18	; 24
 20a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 20c:	86 e8       	ldi	r24, 0x86	; 134
 20e:	80 bd       	out	0x20, r24	; 32
	
	bufferLen = 0;
 210:	fe 01       	movw	r30, r28
 212:	e0 58       	subi	r30, 0x80	; 128
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	11 82       	std	Z+1, r1	; 0x01
 218:	10 82       	st	Z, r1
 21a:	de 01       	movw	r26, r28
 21c:	e0 54       	subi	r30, 0x40	; 64
 21e:	f1 09       	sbc	r31, r1
	for(int i=0; i<64; i++)
		buffer[i] = '#';
 220:	83 e2       	ldi	r24, 0x23	; 35
 222:	8d 93       	st	X+, r24
	UCSRA = 0x00;
	UCSRB = (1<<TXEN)|(1<<RXEN);
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
	
	bufferLen = 0;
	for(int i=0; i<64; i++)
 224:	ae 17       	cp	r26, r30
 226:	bf 07       	cpc	r27, r31
 228:	e1 f7       	brne	.-8      	; 0x222 <_ZN6Stream5beginEm+0x6c>
		buffer[i] = '#';
	buffer[63] = '\0';
 22a:	1f ae       	std	Y+63, r1	; 0x3f
 22c:	9e 01       	movw	r18, r28
 22e:	20 58       	subi	r18, 0x80	; 128
 230:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for(int i=0; i<64; i++)
		str[i] = '#';
 232:	83 e2       	ldi	r24, 0x23	; 35
 234:	81 93       	st	Z+, r24
	bufferLen = 0;
	for(int i=0; i<64; i++)
		buffer[i] = '#';
	buffer[63] = '\0';
	
	for(int i=0; i<64; i++)
 236:	e2 17       	cp	r30, r18
 238:	f3 07       	cpc	r31, r19
 23a:	e1 f7       	brne	.-8      	; 0x234 <_ZN6Stream5beginEm+0x7e>
		str[i] = '#';
	str[63] = '\0';
 23c:	c1 58       	subi	r28, 0x81	; 129
 23e:	df 4f       	sbci	r29, 0xFF	; 255
 240:	18 82       	st	Y, r1
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <_ZN6Stream5writeEh>:

void Stream::write(unsigned char data) {
	while(!(UCSRA&(1<<UDRE)));
 248:	5d 9b       	sbis	0x0b, 5	; 11
 24a:	fe cf       	rjmp	.-4      	; 0x248 <_ZN6Stream5writeEh>
	UDR = data;
 24c:	6c b9       	out	0x0c, r22	; 12
	while(!(UCSRA&(1<<TXC)));
 24e:	5e 9b       	sbis	0x0b, 6	; 11
 250:	fe cf       	rjmp	.-4      	; 0x24e <_ZN6Stream5writeEh+0x6>
}
 252:	08 95       	ret

00000254 <_ZN6Stream4readEv>:

unsigned char Stream::read() {
	while(!(UCSRA&(1<<RXC)));
 254:	5f 9b       	sbis	0x0b, 7	; 11
 256:	fe cf       	rjmp	.-4      	; 0x254 <_ZN6Stream4readEv>
	return UDR;
 258:	8c b1       	in	r24, 0x0c	; 12
}
 25a:	08 95       	ret

0000025c <_ZN6Stream6listenEv>:

bool Stream::listen() {
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
	bool newS = false;
	if(UCSRA&(1<<RXC)) {
 260:	5f 9b       	sbis	0x0b, 7	; 11
 262:	3e c0       	rjmp	.+124    	; 0x2e0 <_ZN6Stream6listenEv+0x84>
 264:	ec 01       	movw	r28, r24
		char c = Stream::read();
 266:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN6Stream4readEv>
		if(c!='\n' && c!='\0') {
 26a:	8a 30       	cpi	r24, 0x0A	; 10
 26c:	d9 f1       	breq	.+118    	; 0x2e4 <_ZN6Stream6listenEv+0x88>
 26e:	88 23       	and	r24, r24
 270:	d9 f1       	breq	.+118    	; 0x2e8 <_ZN6Stream6listenEv+0x8c>
			buffer[bufferLen] = c;
 272:	fe 01       	movw	r30, r28
 274:	e0 58       	subi	r30, 0x80	; 128
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	40 81       	ld	r20, Z
 27a:	51 81       	ldd	r21, Z+1	; 0x01
 27c:	de 01       	movw	r26, r28
 27e:	a4 0f       	add	r26, r20
 280:	b5 1f       	adc	r27, r21
 282:	8c 93       	st	X, r24
			bufferLen++;
 284:	4f 5f       	subi	r20, 0xFF	; 255
 286:	5f 4f       	sbci	r21, 0xFF	; 255
 288:	51 83       	std	Z+1, r21	; 0x01
 28a:	40 83       	st	Z, r20
		}
		
		if(c=='\r') {
 28c:	8d 30       	cpi	r24, 0x0D	; 13
 28e:	71 f5       	brne	.+92     	; 0x2ec <_ZN6Stream6listenEv+0x90>
 290:	ce 01       	movw	r24, r28
 292:	80 5c       	subi	r24, 0xC0	; 192
 294:	9f 4f       	sbci	r25, 0xFF	; 255
 296:	fc 01       	movw	r30, r24
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
			for(int i=0; i<64; i++) {
				if(i<bufferLen) str[i] = buffer[i];
 29c:	24 17       	cp	r18, r20
 29e:	35 07       	cpc	r19, r21
 2a0:	34 f4       	brge	.+12     	; 0x2ae <_ZN6Stream6listenEv+0x52>
 2a2:	df 01       	movw	r26, r30
 2a4:	a0 54       	subi	r26, 0x40	; 64
 2a6:	b1 09       	sbc	r27, r1
 2a8:	6c 91       	ld	r22, X
 2aa:	60 83       	st	Z, r22
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <_ZN6Stream6listenEv+0x5e>
				else if(i==bufferLen) str[i] = '\0';
 2ae:	42 17       	cp	r20, r18
 2b0:	53 07       	cpc	r21, r19
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <_ZN6Stream6listenEv+0x5c>
 2b4:	10 82       	st	Z, r1
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <_ZN6Stream6listenEv+0x5e>
				else str[i] = 0;
 2b8:	10 82       	st	Z, r1
			buffer[bufferLen] = c;
			bufferLen++;
		}
		
		if(c=='\r') {
			for(int i=0; i<64; i++) {
 2ba:	2f 5f       	subi	r18, 0xFF	; 255
 2bc:	3f 4f       	sbci	r19, 0xFF	; 255
 2be:	31 96       	adiw	r30, 0x01	; 1
 2c0:	20 34       	cpi	r18, 0x40	; 64
 2c2:	31 05       	cpc	r19, r1
 2c4:	59 f7       	brne	.-42     	; 0x29c <_ZN6Stream6listenEv+0x40>
 2c6:	fe 01       	movw	r30, r28
				else if(i==bufferLen) str[i] = '\0';
				else str[i] = 0;
			}
			
			for(int i=0; i<64; i++)
				buffer[i] = '#';
 2c8:	23 e2       	ldi	r18, 0x23	; 35
 2ca:	21 93       	st	Z+, r18
				if(i<bufferLen) str[i] = buffer[i];
				else if(i==bufferLen) str[i] = '\0';
				else str[i] = 0;
			}
			
			for(int i=0; i<64; i++)
 2cc:	e8 17       	cp	r30, r24
 2ce:	f9 07       	cpc	r31, r25
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <_ZN6Stream6listenEv+0x6e>
				buffer[i] = '#';
			buffer[63] = '\0';
 2d2:	1f ae       	std	Y+63, r1	; 0x3f
			bufferLen = 0;
 2d4:	c0 58       	subi	r28, 0x80	; 128
 2d6:	df 4f       	sbci	r29, 0xFF	; 255
 2d8:	19 82       	std	Y+1, r1	; 0x01
 2da:	18 82       	st	Y, r1
			
			newS = true;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <_ZN6Stream6listenEv+0x92>
	while(!(UCSRA&(1<<RXC)));
	return UDR;
}

bool Stream::listen() {
	bool newS = false;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <_ZN6Stream6listenEv+0x92>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <_ZN6Stream6listenEv+0x92>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <_ZN6Stream6listenEv+0x92>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
			
			newS = true;
		}
	}
	return newS;
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <_ZN6Stream5printEPc>:

void Stream::print(char* str){
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	eb 01       	movw	r28, r22
	int index = 0;
	while(str[index]!='\0') {
 2fe:	68 81       	ld	r22, Y
 300:	66 23       	and	r22, r22
 302:	41 f0       	breq	.+16     	; 0x314 <_ZN6Stream5printEPc+0x20>
 304:	8c 01       	movw	r16, r24
 306:	21 96       	adiw	r28, 0x01	; 1
		Stream::write((unsigned char)str[index]);
 308:	c8 01       	movw	r24, r16
 30a:	0e 94 24 01 	call	0x248	; 0x248 <_ZN6Stream5writeEh>
	return newS;
}

void Stream::print(char* str){
	int index = 0;
	while(str[index]!='\0') {
 30e:	69 91       	ld	r22, Y+
 310:	61 11       	cpse	r22, r1
 312:	fa cf       	rjmp	.-12     	; 0x308 <_ZN6Stream5printEPc+0x14>
		Stream::write((unsigned char)str[index]);
		index++;
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <_ZN6Stream7printlnEPc>:
void Stream::print(int number) {
	char* str = Stream::intToString(number);
	Stream::print(str);
}

void Stream::println(char* str){
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	ec 01       	movw	r28, r24
	Stream::print(str);
 324:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Stream5printEPc>
	Stream::print("\r\n\0");
 328:	64 e9       	ldi	r22, 0x94	; 148
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Stream5printEPc>
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <_ZN6Stream9getStringEv>:
	Stream::print("\r\n\0");
}

char* Stream::getString() {
	return str;
}
 338:	80 5c       	subi	r24, 0xC0	; 192
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	08 95       	ret

0000033e <_ZN6Stream11intToStringEi>:

char* Stream::intToString(int number) {
 33e:	4f 92       	push	r4
 340:	5f 92       	push	r5
 342:	6f 92       	push	r6
 344:	7f 92       	push	r7
 346:	8f 92       	push	r8
 348:	9f 92       	push	r9
 34a:	af 92       	push	r10
 34c:	bf 92       	push	r11
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	5c 01       	movw	r10, r24
	static char str[20];
	int index = 0;
	
	if(number<0) {
 35c:	99 23       	and	r25, r25
 35e:	54 f4       	brge	.+20     	; 0x374 <_ZN6Stream11intToStringEi+0x36>
		str[0] = '-';
 360:	8d e2       	ldi	r24, 0x2D	; 45
 362:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZZN6Stream11intToStringEiE3str>
		index++;
		number *=-1;
 366:	b1 94       	neg	r11
 368:	a1 94       	neg	r10
 36a:	b1 08       	sbc	r11, r1
	static char str[20];
	int index = 0;
	
	if(number<0) {
		str[0] = '-';
		index++;
 36c:	ee 24       	eor	r14, r14
 36e:	e3 94       	inc	r14
 370:	f1 2c       	mov	r15, r1
 372:	02 c0       	rjmp	.+4      	; 0x378 <_ZN6Stream11intToStringEi+0x3a>
	return str;
}

char* Stream::intToString(int number) {
	static char str[20];
	int index = 0;
 374:	e1 2c       	mov	r14, r1
 376:	f1 2c       	mov	r15, r1
		index++;
		number *=-1;
	}
	
	int digits = 1;
	if(number>0) digits +=(int)log10((double)number);
 378:	1a 14       	cp	r1, r10
 37a:	1b 04       	cpc	r1, r11
 37c:	7c f4       	brge	.+30     	; 0x39c <_ZN6Stream11intToStringEi+0x5e>
 37e:	b5 01       	movw	r22, r10
 380:	0b 2c       	mov	r0, r11
 382:	00 0c       	add	r0, r0
 384:	88 0b       	sbc	r24, r24
 386:	99 0b       	sbc	r25, r25
 388:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 38c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <log10>
 390:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixsfsi>
 394:	8b 01       	movw	r16, r22
	
	for(int i=digits-1; i>=0; i--) {
 396:	77 23       	and	r23, r23
 398:	1c f4       	brge	.+6      	; 0x3a0 <_ZN6Stream11intToStringEi+0x62>
 39a:	43 c0       	rjmp	.+134    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 39c:	00 e0       	ldi	r16, 0x00	; 0
 39e:	10 e0       	ldi	r17, 0x00	; 0
 3a0:	e7 01       	movw	r28, r14
 3a2:	c6 5e       	subi	r28, 0xE6	; 230
 3a4:	de 4f       	sbci	r29, 0xFE	; 254
		int n = (int)(number/pow(10, i));
 3a6:	b5 01       	movw	r22, r10
 3a8:	bb 0c       	add	r11, r11
 3aa:	88 0b       	sbc	r24, r24
 3ac:	99 0b       	sbc	r25, r25
 3ae:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 3b2:	4b 01       	movw	r8, r22
 3b4:	5c 01       	movw	r10, r24
 3b6:	b8 01       	movw	r22, r16
 3b8:	01 2e       	mov	r0, r17
 3ba:	00 0c       	add	r0, r0
 3bc:	88 0b       	sbc	r24, r24
 3be:	99 0b       	sbc	r25, r25
 3c0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 3c4:	9b 01       	movw	r18, r22
 3c6:	ac 01       	movw	r20, r24
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	80 e2       	ldi	r24, 0x20	; 32
 3ce:	91 e4       	ldi	r25, 0x41	; 65
 3d0:	0e 94 26 05 	call	0xa4c	; 0xa4c <pow>
 3d4:	2b 01       	movw	r4, r22
 3d6:	3c 01       	movw	r6, r24
 3d8:	9b 01       	movw	r18, r22
 3da:	ac 01       	movw	r20, r24
 3dc:	c5 01       	movw	r24, r10
 3de:	b4 01       	movw	r22, r8
 3e0:	0e 94 2b 03 	call	0x656	; 0x656 <__divsf3>
 3e4:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixsfsi>
		str[index] = (char)(n+'0');
 3e8:	20 e3       	ldi	r18, 0x30	; 48
 3ea:	26 0f       	add	r18, r22
 3ec:	29 93       	st	Y+, r18
 3ee:	9e 01       	movw	r18, r28
 3f0:	2a 51       	subi	r18, 0x1A	; 26
 3f2:	31 40       	sbci	r19, 0x01	; 1
 3f4:	79 01       	movw	r14, r18
		index++;
		number -=n*pow(10, i);
 3f6:	07 2e       	mov	r0, r23
 3f8:	00 0c       	add	r0, r0
 3fa:	88 0b       	sbc	r24, r24
 3fc:	99 0b       	sbc	r25, r25
 3fe:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 402:	a3 01       	movw	r20, r6
 404:	92 01       	movw	r18, r4
 406:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 40a:	9b 01       	movw	r18, r22
 40c:	ac 01       	movw	r20, r24
 40e:	c5 01       	movw	r24, r10
 410:	b4 01       	movw	r22, r8
 412:	0e 94 be 02 	call	0x57c	; 0x57c <__subsf3>
 416:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixsfsi>
 41a:	5b 01       	movw	r10, r22
	}
	
	int digits = 1;
	if(number>0) digits +=(int)log10((double)number);
	
	for(int i=digits-1; i>=0; i--) {
 41c:	01 50       	subi	r16, 0x01	; 1
 41e:	11 09       	sbc	r17, r1
 420:	12 f6       	brpl	.-124    	; 0x3a6 <_ZN6Stream11intToStringEi+0x68>
		str[index] = (char)(n+'0');
		index++;
		number -=n*pow(10, i);
	}
	
	str[index] = '\0';
 422:	f7 01       	movw	r30, r14
 424:	e6 5e       	subi	r30, 0xE6	; 230
 426:	fe 4f       	sbci	r31, 0xFE	; 254
 428:	10 82       	st	Z, r1
	
	for(int i=index+1; i<20; i++)
 42a:	c7 01       	movw	r24, r14
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	44 97       	sbiw	r24, 0x14	; 20
 430:	4c f4       	brge	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 432:	e7 01       	movw	r28, r14
 434:	c5 5e       	subi	r28, 0xE5	; 229
 436:	de 4f       	sbci	r29, 0xFE	; 254
 438:	8e e2       	ldi	r24, 0x2E	; 46
 43a:	91 e0       	ldi	r25, 0x01	; 1
		str[i] = 0;
 43c:	19 92       	st	Y+, r1
		number -=n*pow(10, i);
	}
	
	str[index] = '\0';
	
	for(int i=index+1; i<20; i++)
 43e:	8c 17       	cp	r24, r28
 440:	9d 07       	cpc	r25, r29
 442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		str[i] = 0;
	
	return str;	
}
 444:	8a e1       	ldi	r24, 0x1A	; 26
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	bf 90       	pop	r11
 456:	af 90       	pop	r10
 458:	9f 90       	pop	r9
 45a:	8f 90       	pop	r8
 45c:	7f 90       	pop	r7
 45e:	6f 90       	pop	r6
 460:	5f 90       	pop	r5
 462:	4f 90       	pop	r4
 464:	08 95       	ret

00000466 <_ZN6Stream5printEi>:
		Stream::write((unsigned char)str[index]);
		index++;
	}
}

void Stream::print(int number) {
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	ec 01       	movw	r28, r24
 46c:	cb 01       	movw	r24, r22
	char* str = Stream::intToString(number);
 46e:	0e 94 9f 01 	call	0x33e	; 0x33e <_ZN6Stream11intToStringEi>
	Stream::print(str);
 472:	bc 01       	movw	r22, r24
 474:	ce 01       	movw	r24, r28
 476:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Stream5printEPc>
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <_ZN6Stream7printlnEi>:
void Stream::println(char* str){
	Stream::print(str);
	Stream::print("\r\n\0");
}

void Stream::println(int number){
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
	Stream::print(number);
 486:	0e 94 33 02 	call	0x466	; 0x466 <_ZN6Stream5printEi>
	Stream::print("\r\n\0");
 48a:	64 e9       	ldi	r22, 0x94	; 148
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Stream5printEPc>
}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <_ZN6Stream11stringToIntEPc>:
		str[i] = 0;
	
	return str;	
}

int Stream::stringToInt(char* str) {
 49a:	fc 01       	movw	r30, r24
	int number = 0;
	int sign = 1;
	int index = 0;
	
	if(str[index]=='-') {
 49c:	80 81       	ld	r24, Z
 49e:	8d 32       	cpi	r24, 0x2D	; 45
 4a0:	29 f4       	brne	.+10     	; 0x4ac <_ZN6Stream11stringToIntEPc+0x12>
		sign = -1;
		index++;
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
	int number = 0;
	int sign = 1;
	int index = 0;
	
	if(str[index]=='-') {
		sign = -1;
 4a6:	6f ef       	ldi	r22, 0xFF	; 255
 4a8:	7f ef       	ldi	r23, 0xFF	; 255
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <_ZN6Stream11stringToIntEPc+0x1a>
}

int Stream::stringToInt(char* str) {
	int number = 0;
	int sign = 1;
	int index = 0;
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
	return str;	
}

int Stream::stringToInt(char* str) {
	int number = 0;
	int sign = 1;
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	70 e0       	ldi	r23, 0x00	; 0
	if(str[index]=='-') {
		sign = -1;
		index++;
	}
	
	while(str[index]!='\0') {
 4b4:	df 01       	movw	r26, r30
 4b6:	a2 0f       	add	r26, r18
 4b8:	b3 1f       	adc	r27, r19
 4ba:	9c 91       	ld	r25, X
 4bc:	99 23       	and	r25, r25
 4be:	d9 f0       	breq	.+54     	; 0x4f6 <_ZN6Stream11stringToIntEPc+0x5c>
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	e2 0f       	add	r30, r18
 4c6:	f3 1f       	adc	r31, r19
 4c8:	20 e0       	ldi	r18, 0x00	; 0
 4ca:	30 e0       	ldi	r19, 0x00	; 0
		number *=10;
 4cc:	a9 01       	movw	r20, r18
 4ce:	44 0f       	add	r20, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	22 0f       	add	r18, r18
 4d4:	33 1f       	adc	r19, r19
 4d6:	22 0f       	add	r18, r18
 4d8:	33 1f       	adc	r19, r19
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	42 0f       	add	r20, r18
 4e0:	53 1f       	adc	r21, r19
		number +=(int)(str[index]-'0');
 4e2:	29 2f       	mov	r18, r25
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	20 53       	subi	r18, 0x30	; 48
 4e8:	31 09       	sbc	r19, r1
 4ea:	24 0f       	add	r18, r20
 4ec:	35 1f       	adc	r19, r21
	if(str[index]=='-') {
		sign = -1;
		index++;
	}
	
	while(str[index]!='\0') {
 4ee:	91 91       	ld	r25, Z+
 4f0:	91 11       	cpse	r25, r1
 4f2:	ec cf       	rjmp	.-40     	; 0x4cc <_ZN6Stream11stringToIntEPc+0x32>
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <_ZN6Stream11stringToIntEPc+0x60>
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	30 e0       	ldi	r19, 0x00	; 0
		number +=(int)(str[index]-'0');
		index++;
	}
	
	return number*sign;
}
 4fa:	62 9f       	mul	r22, r18
 4fc:	c0 01       	movw	r24, r0
 4fe:	63 9f       	mul	r22, r19
 500:	90 0d       	add	r25, r0
 502:	72 9f       	mul	r23, r18
 504:	90 0d       	add	r25, r0
 506:	11 24       	eor	r1, r1
 508:	08 95       	ret

0000050a <_ZN6Stream14getCommandTypeEPc>:

char* Stream::getCommandType(char* command) {
 50a:	dc 01       	movw	r26, r24
 50c:	e4 e7       	ldi	r30, 0x74	; 116
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	28 e7       	ldi	r18, 0x78	; 120
 512:	30 e0       	ldi	r19, 0x00	; 0
	static char str[] = "####\0";
	for(int i=0; i<4; i++)
		str[i] = command[i];
 514:	8d 91       	ld	r24, X+
 516:	81 93       	st	Z+, r24
	return number*sign;
}

char* Stream::getCommandType(char* command) {
	static char str[] = "####\0";
	for(int i=0; i<4; i++)
 518:	e2 17       	cp	r30, r18
 51a:	f3 07       	cpc	r31, r19
 51c:	d9 f7       	brne	.-10     	; 0x514 <_ZN6Stream14getCommandTypeEPc+0xa>
		str[i] = command[i];
	return str;
}
 51e:	84 e7       	ldi	r24, 0x74	; 116
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	08 95       	ret

00000524 <_ZN6Stream15getCommandIndexEPc>:

int Stream::getCommandIndex(char* command) {
	return (int)(command[4]-'0');
 524:	fc 01       	movw	r30, r24
 526:	84 81       	ldd	r24, Z+4	; 0x04
 528:	90 e0       	ldi	r25, 0x00	; 0
}
 52a:	c0 97       	sbiw	r24, 0x30	; 48
 52c:	08 95       	ret

0000052e <_ZN6Stream15getCommandValueEPc>:

int Stream::getCommandValue(char* command) {
 52e:	fc 01       	movw	r30, r24
 530:	36 96       	adiw	r30, 0x06	; 6
 532:	a0 e6       	ldi	r26, 0x60	; 96
 534:	b0 e0       	ldi	r27, 0x00	; 0
	static char str[20] = "##################\0";
	int index = 0;
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e0       	ldi	r19, 0x00	; 0
	
	while((command[index+6]>='0' && command[index+6]<='9') || command[index+6]=='-') {
 53a:	91 91       	ld	r25, Z+
 53c:	80 ed       	ldi	r24, 0xD0	; 208
 53e:	89 0f       	add	r24, r25
 540:	8a 30       	cpi	r24, 0x0A	; 10
 542:	10 f0       	brcs	.+4      	; 0x548 <_ZN6Stream15getCommandValueEPc+0x1a>
 544:	9d 32       	cpi	r25, 0x2D	; 45
 546:	21 f4       	brne	.+8      	; 0x550 <_ZN6Stream15getCommandValueEPc+0x22>
		str[index] = command[index+6];
 548:	9d 93       	st	X+, r25
		index++;
 54a:	2f 5f       	subi	r18, 0xFF	; 255
 54c:	3f 4f       	sbci	r19, 0xFF	; 255

int Stream::getCommandValue(char* command) {
	static char str[20] = "##################\0";
	int index = 0;
	
	while((command[index+6]>='0' && command[index+6]<='9') || command[index+6]=='-') {
 54e:	f5 cf       	rjmp	.-22     	; 0x53a <_ZN6Stream15getCommandValueEPc+0xc>
		str[index] = command[index+6];
		index++;
	}
	str[index] = '\0';
 550:	f9 01       	movw	r30, r18
 552:	e0 5a       	subi	r30, 0xA0	; 160
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	10 82       	st	Z, r1
	for(int i=index+1; i<20; i++)
 558:	c9 01       	movw	r24, r18
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	44 97       	sbiw	r24, 0x14	; 20
 55e:	4c f4       	brge	.+18     	; 0x572 <_ZN6Stream15getCommandValueEPc+0x44>
 560:	f9 01       	movw	r30, r18
 562:	ef 59       	subi	r30, 0x9F	; 159
 564:	ff 4f       	sbci	r31, 0xFF	; 255
 566:	84 e7       	ldi	r24, 0x74	; 116
 568:	90 e0       	ldi	r25, 0x00	; 0
		str[i] = 0;
 56a:	11 92       	st	Z+, r1
	while((command[index+6]>='0' && command[index+6]<='9') || command[index+6]=='-') {
		str[index] = command[index+6];
		index++;
	}
	str[index] = '\0';
	for(int i=index+1; i<20; i++)
 56c:	e8 17       	cp	r30, r24
 56e:	f9 07       	cpc	r31, r25
 570:	e1 f7       	brne	.-8      	; 0x56a <_ZN6Stream15getCommandValueEPc+0x3c>
		str[i] = 0;
	return Stream::stringToInt(str);
 572:	80 e6       	ldi	r24, 0x60	; 96
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN6Stream11stringToIntEPc>
}
 57a:	08 95       	ret

0000057c <__subsf3>:
 57c:	50 58       	subi	r21, 0x80	; 128

0000057e <__addsf3>:
 57e:	bb 27       	eor	r27, r27
 580:	aa 27       	eor	r26, r26
 582:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__addsf3x>
 586:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>
 58a:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscA>
 58e:	38 f0       	brcs	.+14     	; 0x59e <__addsf3+0x20>
 590:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscB>
 594:	20 f0       	brcs	.+8      	; 0x59e <__addsf3+0x20>
 596:	39 f4       	brne	.+14     	; 0x5a6 <__addsf3+0x28>
 598:	9f 3f       	cpi	r25, 0xFF	; 255
 59a:	19 f4       	brne	.+6      	; 0x5a2 <__addsf3+0x24>
 59c:	26 f4       	brtc	.+8      	; 0x5a6 <__addsf3+0x28>
 59e:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>
 5a2:	0e f4       	brtc	.+2      	; 0x5a6 <__addsf3+0x28>
 5a4:	e0 95       	com	r30
 5a6:	e7 fb       	bst	r30, 7
 5a8:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>

000005ac <__addsf3x>:
 5ac:	e9 2f       	mov	r30, r25
 5ae:	0e 94 38 04 	call	0x870	; 0x870 <__fp_split3>
 5b2:	58 f3       	brcs	.-42     	; 0x58a <__addsf3+0xc>
 5b4:	ba 17       	cp	r27, r26
 5b6:	62 07       	cpc	r22, r18
 5b8:	73 07       	cpc	r23, r19
 5ba:	84 07       	cpc	r24, r20
 5bc:	95 07       	cpc	r25, r21
 5be:	20 f0       	brcs	.+8      	; 0x5c8 <__addsf3x+0x1c>
 5c0:	79 f4       	brne	.+30     	; 0x5e0 <__addsf3x+0x34>
 5c2:	a6 f5       	brtc	.+104    	; 0x62c <__addsf3x+0x80>
 5c4:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_zero>
 5c8:	0e f4       	brtc	.+2      	; 0x5cc <__addsf3x+0x20>
 5ca:	e0 95       	com	r30
 5cc:	0b 2e       	mov	r0, r27
 5ce:	ba 2f       	mov	r27, r26
 5d0:	a0 2d       	mov	r26, r0
 5d2:	0b 01       	movw	r0, r22
 5d4:	b9 01       	movw	r22, r18
 5d6:	90 01       	movw	r18, r0
 5d8:	0c 01       	movw	r0, r24
 5da:	ca 01       	movw	r24, r20
 5dc:	a0 01       	movw	r20, r0
 5de:	11 24       	eor	r1, r1
 5e0:	ff 27       	eor	r31, r31
 5e2:	59 1b       	sub	r21, r25
 5e4:	99 f0       	breq	.+38     	; 0x60c <__addsf3x+0x60>
 5e6:	59 3f       	cpi	r21, 0xF9	; 249
 5e8:	50 f4       	brcc	.+20     	; 0x5fe <__addsf3x+0x52>
 5ea:	50 3e       	cpi	r21, 0xE0	; 224
 5ec:	68 f1       	brcs	.+90     	; 0x648 <__addsf3x+0x9c>
 5ee:	1a 16       	cp	r1, r26
 5f0:	f0 40       	sbci	r31, 0x00	; 0
 5f2:	a2 2f       	mov	r26, r18
 5f4:	23 2f       	mov	r18, r19
 5f6:	34 2f       	mov	r19, r20
 5f8:	44 27       	eor	r20, r20
 5fa:	58 5f       	subi	r21, 0xF8	; 248
 5fc:	f3 cf       	rjmp	.-26     	; 0x5e4 <__addsf3x+0x38>
 5fe:	46 95       	lsr	r20
 600:	37 95       	ror	r19
 602:	27 95       	ror	r18
 604:	a7 95       	ror	r26
 606:	f0 40       	sbci	r31, 0x00	; 0
 608:	53 95       	inc	r21
 60a:	c9 f7       	brne	.-14     	; 0x5fe <__addsf3x+0x52>
 60c:	7e f4       	brtc	.+30     	; 0x62c <__addsf3x+0x80>
 60e:	1f 16       	cp	r1, r31
 610:	ba 0b       	sbc	r27, r26
 612:	62 0b       	sbc	r22, r18
 614:	73 0b       	sbc	r23, r19
 616:	84 0b       	sbc	r24, r20
 618:	ba f0       	brmi	.+46     	; 0x648 <__addsf3x+0x9c>
 61a:	91 50       	subi	r25, 0x01	; 1
 61c:	a1 f0       	breq	.+40     	; 0x646 <__addsf3x+0x9a>
 61e:	ff 0f       	add	r31, r31
 620:	bb 1f       	adc	r27, r27
 622:	66 1f       	adc	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	88 1f       	adc	r24, r24
 628:	c2 f7       	brpl	.-16     	; 0x61a <__addsf3x+0x6e>
 62a:	0e c0       	rjmp	.+28     	; 0x648 <__addsf3x+0x9c>
 62c:	ba 0f       	add	r27, r26
 62e:	62 1f       	adc	r22, r18
 630:	73 1f       	adc	r23, r19
 632:	84 1f       	adc	r24, r20
 634:	48 f4       	brcc	.+18     	; 0x648 <__addsf3x+0x9c>
 636:	87 95       	ror	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b7 95       	ror	r27
 63e:	f7 95       	ror	r31
 640:	9e 3f       	cpi	r25, 0xFE	; 254
 642:	08 f0       	brcs	.+2      	; 0x646 <__addsf3x+0x9a>
 644:	b0 cf       	rjmp	.-160    	; 0x5a6 <__addsf3+0x28>
 646:	93 95       	inc	r25
 648:	88 0f       	add	r24, r24
 64a:	08 f0       	brcs	.+2      	; 0x64e <__addsf3x+0xa2>
 64c:	99 27       	eor	r25, r25
 64e:	ee 0f       	add	r30, r30
 650:	97 95       	ror	r25
 652:	87 95       	ror	r24
 654:	08 95       	ret

00000656 <__divsf3>:
 656:	0e 94 3f 03 	call	0x67e	; 0x67e <__divsf3x>
 65a:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>
 65e:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscB>
 662:	58 f0       	brcs	.+22     	; 0x67a <__divsf3+0x24>
 664:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscA>
 668:	40 f0       	brcs	.+16     	; 0x67a <__divsf3+0x24>
 66a:	29 f4       	brne	.+10     	; 0x676 <__divsf3+0x20>
 66c:	5f 3f       	cpi	r21, 0xFF	; 255
 66e:	29 f0       	breq	.+10     	; 0x67a <__divsf3+0x24>
 670:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 674:	51 11       	cpse	r21, r1
 676:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 67a:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>

0000067e <__divsf3x>:
 67e:	0e 94 38 04 	call	0x870	; 0x870 <__fp_split3>
 682:	68 f3       	brcs	.-38     	; 0x65e <__divsf3+0x8>

00000684 <__divsf3_pse>:
 684:	99 23       	and	r25, r25
 686:	b1 f3       	breq	.-20     	; 0x674 <__divsf3+0x1e>
 688:	55 23       	and	r21, r21
 68a:	91 f3       	breq	.-28     	; 0x670 <__divsf3+0x1a>
 68c:	95 1b       	sub	r25, r21
 68e:	55 0b       	sbc	r21, r21
 690:	bb 27       	eor	r27, r27
 692:	aa 27       	eor	r26, r26
 694:	62 17       	cp	r22, r18
 696:	73 07       	cpc	r23, r19
 698:	84 07       	cpc	r24, r20
 69a:	38 f0       	brcs	.+14     	; 0x6aa <__divsf3_pse+0x26>
 69c:	9f 5f       	subi	r25, 0xFF	; 255
 69e:	5f 4f       	sbci	r21, 0xFF	; 255
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	44 1f       	adc	r20, r20
 6a6:	aa 1f       	adc	r26, r26
 6a8:	a9 f3       	breq	.-22     	; 0x694 <__divsf3_pse+0x10>
 6aa:	35 d0       	rcall	.+106    	; 0x716 <__divsf3_pse+0x92>
 6ac:	0e 2e       	mov	r0, r30
 6ae:	3a f0       	brmi	.+14     	; 0x6be <__divsf3_pse+0x3a>
 6b0:	e0 e8       	ldi	r30, 0x80	; 128
 6b2:	32 d0       	rcall	.+100    	; 0x718 <__divsf3_pse+0x94>
 6b4:	91 50       	subi	r25, 0x01	; 1
 6b6:	50 40       	sbci	r21, 0x00	; 0
 6b8:	e6 95       	lsr	r30
 6ba:	00 1c       	adc	r0, r0
 6bc:	ca f7       	brpl	.-14     	; 0x6b0 <__divsf3_pse+0x2c>
 6be:	2b d0       	rcall	.+86     	; 0x716 <__divsf3_pse+0x92>
 6c0:	fe 2f       	mov	r31, r30
 6c2:	29 d0       	rcall	.+82     	; 0x716 <__divsf3_pse+0x92>
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	bb 1f       	adc	r27, r27
 6cc:	26 17       	cp	r18, r22
 6ce:	37 07       	cpc	r19, r23
 6d0:	48 07       	cpc	r20, r24
 6d2:	ab 07       	cpc	r26, r27
 6d4:	b0 e8       	ldi	r27, 0x80	; 128
 6d6:	09 f0       	breq	.+2      	; 0x6da <__divsf3_pse+0x56>
 6d8:	bb 0b       	sbc	r27, r27
 6da:	80 2d       	mov	r24, r0
 6dc:	bf 01       	movw	r22, r30
 6de:	ff 27       	eor	r31, r31
 6e0:	93 58       	subi	r25, 0x83	; 131
 6e2:	5f 4f       	sbci	r21, 0xFF	; 255
 6e4:	3a f0       	brmi	.+14     	; 0x6f4 <__divsf3_pse+0x70>
 6e6:	9e 3f       	cpi	r25, 0xFE	; 254
 6e8:	51 05       	cpc	r21, r1
 6ea:	78 f0       	brcs	.+30     	; 0x70a <__divsf3_pse+0x86>
 6ec:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 6f0:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	e4 f3       	brlt	.-8      	; 0x6f0 <__divsf3_pse+0x6c>
 6f8:	98 3e       	cpi	r25, 0xE8	; 232
 6fa:	d4 f3       	brlt	.-12     	; 0x6f0 <__divsf3_pse+0x6c>
 6fc:	86 95       	lsr	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b7 95       	ror	r27
 704:	f7 95       	ror	r31
 706:	9f 5f       	subi	r25, 0xFF	; 255
 708:	c9 f7       	brne	.-14     	; 0x6fc <__divsf3_pse+0x78>
 70a:	88 0f       	add	r24, r24
 70c:	91 1d       	adc	r25, r1
 70e:	96 95       	lsr	r25
 710:	87 95       	ror	r24
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret
 716:	e1 e0       	ldi	r30, 0x01	; 1
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	bb 1f       	adc	r27, r27
 720:	62 17       	cp	r22, r18
 722:	73 07       	cpc	r23, r19
 724:	84 07       	cpc	r24, r20
 726:	ba 07       	cpc	r27, r26
 728:	20 f0       	brcs	.+8      	; 0x732 <__divsf3_pse+0xae>
 72a:	62 1b       	sub	r22, r18
 72c:	73 0b       	sbc	r23, r19
 72e:	84 0b       	sbc	r24, r20
 730:	ba 0b       	sbc	r27, r26
 732:	ee 1f       	adc	r30, r30
 734:	88 f7       	brcc	.-30     	; 0x718 <__divsf3_pse+0x94>
 736:	e0 95       	com	r30
 738:	08 95       	ret

0000073a <__fixsfsi>:
 73a:	0e 94 a4 03 	call	0x748	; 0x748 <__fixunssfsi>
 73e:	68 94       	set
 740:	b1 11       	cpse	r27, r1
 742:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 746:	08 95       	ret

00000748 <__fixunssfsi>:
 748:	0e 94 40 04 	call	0x880	; 0x880 <__fp_splitA>
 74c:	88 f0       	brcs	.+34     	; 0x770 <__fixunssfsi+0x28>
 74e:	9f 57       	subi	r25, 0x7F	; 127
 750:	98 f0       	brcs	.+38     	; 0x778 <__fixunssfsi+0x30>
 752:	b9 2f       	mov	r27, r25
 754:	99 27       	eor	r25, r25
 756:	b7 51       	subi	r27, 0x17	; 23
 758:	b0 f0       	brcs	.+44     	; 0x786 <__fixunssfsi+0x3e>
 75a:	e1 f0       	breq	.+56     	; 0x794 <__fixunssfsi+0x4c>
 75c:	66 0f       	add	r22, r22
 75e:	77 1f       	adc	r23, r23
 760:	88 1f       	adc	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	1a f0       	brmi	.+6      	; 0x76c <__fixunssfsi+0x24>
 766:	ba 95       	dec	r27
 768:	c9 f7       	brne	.-14     	; 0x75c <__fixunssfsi+0x14>
 76a:	14 c0       	rjmp	.+40     	; 0x794 <__fixunssfsi+0x4c>
 76c:	b1 30       	cpi	r27, 0x01	; 1
 76e:	91 f0       	breq	.+36     	; 0x794 <__fixunssfsi+0x4c>
 770:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_zero>
 774:	b1 e0       	ldi	r27, 0x01	; 1
 776:	08 95       	ret
 778:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_zero>
 77c:	67 2f       	mov	r22, r23
 77e:	78 2f       	mov	r23, r24
 780:	88 27       	eor	r24, r24
 782:	b8 5f       	subi	r27, 0xF8	; 248
 784:	39 f0       	breq	.+14     	; 0x794 <__fixunssfsi+0x4c>
 786:	b9 3f       	cpi	r27, 0xF9	; 249
 788:	cc f3       	brlt	.-14     	; 0x77c <__fixunssfsi+0x34>
 78a:	86 95       	lsr	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b3 95       	inc	r27
 792:	d9 f7       	brne	.-10     	; 0x78a <__fixunssfsi+0x42>
 794:	3e f4       	brtc	.+14     	; 0x7a4 <__fixunssfsi+0x5c>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	08 95       	ret

000007a6 <__floatunsisf>:
 7a6:	e8 94       	clt
 7a8:	09 c0       	rjmp	.+18     	; 0x7bc <__floatsisf+0x12>

000007aa <__floatsisf>:
 7aa:	97 fb       	bst	r25, 7
 7ac:	3e f4       	brtc	.+14     	; 0x7bc <__floatsisf+0x12>
 7ae:	90 95       	com	r25
 7b0:	80 95       	com	r24
 7b2:	70 95       	com	r23
 7b4:	61 95       	neg	r22
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	99 23       	and	r25, r25
 7be:	a9 f0       	breq	.+42     	; 0x7ea <__floatsisf+0x40>
 7c0:	f9 2f       	mov	r31, r25
 7c2:	96 e9       	ldi	r25, 0x96	; 150
 7c4:	bb 27       	eor	r27, r27
 7c6:	93 95       	inc	r25
 7c8:	f6 95       	lsr	r31
 7ca:	87 95       	ror	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b7 95       	ror	r27
 7d2:	f1 11       	cpse	r31, r1
 7d4:	f8 cf       	rjmp	.-16     	; 0x7c6 <__floatsisf+0x1c>
 7d6:	fa f4       	brpl	.+62     	; 0x816 <__floatsisf+0x6c>
 7d8:	bb 0f       	add	r27, r27
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__floatsisf+0x36>
 7dc:	60 ff       	sbrs	r22, 0
 7de:	1b c0       	rjmp	.+54     	; 0x816 <__floatsisf+0x6c>
 7e0:	6f 5f       	subi	r22, 0xFF	; 255
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	16 c0       	rjmp	.+44     	; 0x816 <__floatsisf+0x6c>
 7ea:	88 23       	and	r24, r24
 7ec:	11 f0       	breq	.+4      	; 0x7f2 <__floatsisf+0x48>
 7ee:	96 e9       	ldi	r25, 0x96	; 150
 7f0:	11 c0       	rjmp	.+34     	; 0x814 <__floatsisf+0x6a>
 7f2:	77 23       	and	r23, r23
 7f4:	21 f0       	breq	.+8      	; 0x7fe <__floatsisf+0x54>
 7f6:	9e e8       	ldi	r25, 0x8E	; 142
 7f8:	87 2f       	mov	r24, r23
 7fa:	76 2f       	mov	r23, r22
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <__floatsisf+0x5e>
 7fe:	66 23       	and	r22, r22
 800:	71 f0       	breq	.+28     	; 0x81e <__floatsisf+0x74>
 802:	96 e8       	ldi	r25, 0x86	; 134
 804:	86 2f       	mov	r24, r22
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	2a f0       	brmi	.+10     	; 0x816 <__floatsisf+0x6c>
 80c:	9a 95       	dec	r25
 80e:	66 0f       	add	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	88 1f       	adc	r24, r24
 814:	da f7       	brpl	.-10     	; 0x80c <__floatsisf+0x62>
 816:	88 0f       	add	r24, r24
 818:	96 95       	lsr	r25
 81a:	87 95       	ror	r24
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__fp_inf>:
 820:	97 f9       	bld	r25, 7
 822:	9f 67       	ori	r25, 0x7F	; 127
 824:	80 e8       	ldi	r24, 0x80	; 128
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	08 95       	ret

0000082c <__fp_nan>:
 82c:	9f ef       	ldi	r25, 0xFF	; 255
 82e:	80 ec       	ldi	r24, 0xC0	; 192
 830:	08 95       	ret

00000832 <__fp_pscA>:
 832:	00 24       	eor	r0, r0
 834:	0a 94       	dec	r0
 836:	16 16       	cp	r1, r22
 838:	17 06       	cpc	r1, r23
 83a:	18 06       	cpc	r1, r24
 83c:	09 06       	cpc	r0, r25
 83e:	08 95       	ret

00000840 <__fp_pscB>:
 840:	00 24       	eor	r0, r0
 842:	0a 94       	dec	r0
 844:	12 16       	cp	r1, r18
 846:	13 06       	cpc	r1, r19
 848:	14 06       	cpc	r1, r20
 84a:	05 06       	cpc	r0, r21
 84c:	08 95       	ret

0000084e <__fp_round>:
 84e:	09 2e       	mov	r0, r25
 850:	03 94       	inc	r0
 852:	00 0c       	add	r0, r0
 854:	11 f4       	brne	.+4      	; 0x85a <__fp_round+0xc>
 856:	88 23       	and	r24, r24
 858:	52 f0       	brmi	.+20     	; 0x86e <__stack+0xf>
 85a:	bb 0f       	add	r27, r27
 85c:	40 f4       	brcc	.+16     	; 0x86e <__stack+0xf>
 85e:	bf 2b       	or	r27, r31
 860:	11 f4       	brne	.+4      	; 0x866 <__stack+0x7>
 862:	60 ff       	sbrs	r22, 0
 864:	04 c0       	rjmp	.+8      	; 0x86e <__stack+0xf>
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__fp_split3>:
 870:	57 fd       	sbrc	r21, 7
 872:	90 58       	subi	r25, 0x80	; 128
 874:	44 0f       	add	r20, r20
 876:	55 1f       	adc	r21, r21
 878:	59 f0       	breq	.+22     	; 0x890 <__fp_splitA+0x10>
 87a:	5f 3f       	cpi	r21, 0xFF	; 255
 87c:	71 f0       	breq	.+28     	; 0x89a <__fp_splitA+0x1a>
 87e:	47 95       	ror	r20

00000880 <__fp_splitA>:
 880:	88 0f       	add	r24, r24
 882:	97 fb       	bst	r25, 7
 884:	99 1f       	adc	r25, r25
 886:	61 f0       	breq	.+24     	; 0x8a0 <__fp_splitA+0x20>
 888:	9f 3f       	cpi	r25, 0xFF	; 255
 88a:	79 f0       	breq	.+30     	; 0x8aa <__fp_splitA+0x2a>
 88c:	87 95       	ror	r24
 88e:	08 95       	ret
 890:	12 16       	cp	r1, r18
 892:	13 06       	cpc	r1, r19
 894:	14 06       	cpc	r1, r20
 896:	55 1f       	adc	r21, r21
 898:	f2 cf       	rjmp	.-28     	; 0x87e <__fp_split3+0xe>
 89a:	46 95       	lsr	r20
 89c:	f1 df       	rcall	.-30     	; 0x880 <__fp_splitA>
 89e:	08 c0       	rjmp	.+16     	; 0x8b0 <__fp_splitA+0x30>
 8a0:	16 16       	cp	r1, r22
 8a2:	17 06       	cpc	r1, r23
 8a4:	18 06       	cpc	r1, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	f1 cf       	rjmp	.-30     	; 0x88c <__fp_splitA+0xc>
 8aa:	86 95       	lsr	r24
 8ac:	71 05       	cpc	r23, r1
 8ae:	61 05       	cpc	r22, r1
 8b0:	08 94       	sec
 8b2:	08 95       	ret

000008b4 <__fp_zero>:
 8b4:	e8 94       	clt

000008b6 <__fp_szero>:
 8b6:	bb 27       	eor	r27, r27
 8b8:	66 27       	eor	r22, r22
 8ba:	77 27       	eor	r23, r23
 8bc:	cb 01       	movw	r24, r22
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret

000008c2 <log10>:
 8c2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <log>
 8c6:	29 ed       	ldi	r18, 0xD9	; 217
 8c8:	3b e5       	ldi	r19, 0x5B	; 91
 8ca:	4e ed       	ldi	r20, 0xDE	; 222
 8cc:	5e e3       	ldi	r21, 0x3E	; 62
 8ce:	0c 94 b9 04 	jmp	0x972	; 0x972 <__mulsf3>
 8d2:	16 f0       	brts	.+4      	; 0x8d8 <log10+0x16>
 8d4:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_mpack>
 8d8:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>
 8dc:	68 94       	set
 8de:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>

000008e2 <log>:
 8e2:	0e 94 40 04 	call	0x880	; 0x880 <__fp_splitA>
 8e6:	a8 f3       	brcs	.-22     	; 0x8d2 <log10+0x10>
 8e8:	99 23       	and	r25, r25
 8ea:	c1 f3       	breq	.-16     	; 0x8dc <log10+0x1a>
 8ec:	ae f3       	brts	.-22     	; 0x8d8 <log10+0x16>
 8ee:	df 93       	push	r29
 8f0:	cf 93       	push	r28
 8f2:	1f 93       	push	r17
 8f4:	0f 93       	push	r16
 8f6:	ff 92       	push	r15
 8f8:	c9 2f       	mov	r28, r25
 8fa:	dd 27       	eor	r29, r29
 8fc:	88 23       	and	r24, r24
 8fe:	2a f0       	brmi	.+10     	; 0x90a <log+0x28>
 900:	21 97       	sbiw	r28, 0x01	; 1
 902:	66 0f       	add	r22, r22
 904:	77 1f       	adc	r23, r23
 906:	88 1f       	adc	r24, r24
 908:	da f7       	brpl	.-10     	; 0x900 <log+0x1e>
 90a:	20 e0       	ldi	r18, 0x00	; 0
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	40 e8       	ldi	r20, 0x80	; 128
 910:	5f eb       	ldi	r21, 0xBF	; 191
 912:	9f e3       	ldi	r25, 0x3F	; 63
 914:	88 39       	cpi	r24, 0x98	; 152
 916:	20 f0       	brcs	.+8      	; 0x920 <log+0x3e>
 918:	80 3e       	cpi	r24, 0xE0	; 224
 91a:	38 f0       	brcs	.+14     	; 0x92a <log+0x48>
 91c:	21 96       	adiw	r28, 0x01	; 1
 91e:	8f 77       	andi	r24, 0x7F	; 127
 920:	0e 94 bf 02 	call	0x57e	; 0x57e <__addsf3>
 924:	e4 e5       	ldi	r30, 0x54	; 84
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	04 c0       	rjmp	.+8      	; 0x932 <log+0x50>
 92a:	0e 94 bf 02 	call	0x57e	; 0x57e <__addsf3>
 92e:	e1 e8       	ldi	r30, 0x81	; 129
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_powser>
 936:	8b 01       	movw	r16, r22
 938:	be 01       	movw	r22, r28
 93a:	ec 01       	movw	r28, r24
 93c:	fb 2e       	mov	r15, r27
 93e:	6f 57       	subi	r22, 0x7F	; 127
 940:	71 09       	sbc	r23, r1
 942:	75 95       	asr	r23
 944:	77 1f       	adc	r23, r23
 946:	88 0b       	sbc	r24, r24
 948:	99 0b       	sbc	r25, r25
 94a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 94e:	28 e1       	ldi	r18, 0x18	; 24
 950:	32 e7       	ldi	r19, 0x72	; 114
 952:	41 e3       	ldi	r20, 0x31	; 49
 954:	5f e3       	ldi	r21, 0x3F	; 63
 956:	0e 94 cc 04 	call	0x998	; 0x998 <__mulsf3x>
 95a:	af 2d       	mov	r26, r15
 95c:	98 01       	movw	r18, r16
 95e:	ae 01       	movw	r20, r28
 960:	ff 90       	pop	r15
 962:	0f 91       	pop	r16
 964:	1f 91       	pop	r17
 966:	cf 91       	pop	r28
 968:	df 91       	pop	r29
 96a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__addsf3x>
 96e:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>

00000972 <__mulsf3>:
 972:	0e 94 cc 04 	call	0x998	; 0x998 <__mulsf3x>
 976:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>
 97a:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscA>
 97e:	38 f0       	brcs	.+14     	; 0x98e <__mulsf3+0x1c>
 980:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscB>
 984:	20 f0       	brcs	.+8      	; 0x98e <__mulsf3+0x1c>
 986:	95 23       	and	r25, r21
 988:	11 f0       	breq	.+4      	; 0x98e <__mulsf3+0x1c>
 98a:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 98e:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>
 992:	11 24       	eor	r1, r1
 994:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>

00000998 <__mulsf3x>:
 998:	0e 94 38 04 	call	0x870	; 0x870 <__fp_split3>
 99c:	70 f3       	brcs	.-36     	; 0x97a <__mulsf3+0x8>

0000099e <__mulsf3_pse>:
 99e:	95 9f       	mul	r25, r21
 9a0:	c1 f3       	breq	.-16     	; 0x992 <__mulsf3+0x20>
 9a2:	95 0f       	add	r25, r21
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	55 1f       	adc	r21, r21
 9a8:	62 9f       	mul	r22, r18
 9aa:	f0 01       	movw	r30, r0
 9ac:	72 9f       	mul	r23, r18
 9ae:	bb 27       	eor	r27, r27
 9b0:	f0 0d       	add	r31, r0
 9b2:	b1 1d       	adc	r27, r1
 9b4:	63 9f       	mul	r22, r19
 9b6:	aa 27       	eor	r26, r26
 9b8:	f0 0d       	add	r31, r0
 9ba:	b1 1d       	adc	r27, r1
 9bc:	aa 1f       	adc	r26, r26
 9be:	64 9f       	mul	r22, r20
 9c0:	66 27       	eor	r22, r22
 9c2:	b0 0d       	add	r27, r0
 9c4:	a1 1d       	adc	r26, r1
 9c6:	66 1f       	adc	r22, r22
 9c8:	82 9f       	mul	r24, r18
 9ca:	22 27       	eor	r18, r18
 9cc:	b0 0d       	add	r27, r0
 9ce:	a1 1d       	adc	r26, r1
 9d0:	62 1f       	adc	r22, r18
 9d2:	73 9f       	mul	r23, r19
 9d4:	b0 0d       	add	r27, r0
 9d6:	a1 1d       	adc	r26, r1
 9d8:	62 1f       	adc	r22, r18
 9da:	83 9f       	mul	r24, r19
 9dc:	a0 0d       	add	r26, r0
 9de:	61 1d       	adc	r22, r1
 9e0:	22 1f       	adc	r18, r18
 9e2:	74 9f       	mul	r23, r20
 9e4:	33 27       	eor	r19, r19
 9e6:	a0 0d       	add	r26, r0
 9e8:	61 1d       	adc	r22, r1
 9ea:	23 1f       	adc	r18, r19
 9ec:	84 9f       	mul	r24, r20
 9ee:	60 0d       	add	r22, r0
 9f0:	21 1d       	adc	r18, r1
 9f2:	82 2f       	mov	r24, r18
 9f4:	76 2f       	mov	r23, r22
 9f6:	6a 2f       	mov	r22, r26
 9f8:	11 24       	eor	r1, r1
 9fa:	9f 57       	subi	r25, 0x7F	; 127
 9fc:	50 40       	sbci	r21, 0x00	; 0
 9fe:	9a f0       	brmi	.+38     	; 0xa26 <__mulsf3_pse+0x88>
 a00:	f1 f0       	breq	.+60     	; 0xa3e <__mulsf3_pse+0xa0>
 a02:	88 23       	and	r24, r24
 a04:	4a f0       	brmi	.+18     	; 0xa18 <__mulsf3_pse+0x7a>
 a06:	ee 0f       	add	r30, r30
 a08:	ff 1f       	adc	r31, r31
 a0a:	bb 1f       	adc	r27, r27
 a0c:	66 1f       	adc	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	91 50       	subi	r25, 0x01	; 1
 a14:	50 40       	sbci	r21, 0x00	; 0
 a16:	a9 f7       	brne	.-22     	; 0xa02 <__mulsf3_pse+0x64>
 a18:	9e 3f       	cpi	r25, 0xFE	; 254
 a1a:	51 05       	cpc	r21, r1
 a1c:	80 f0       	brcs	.+32     	; 0xa3e <__mulsf3_pse+0xa0>
 a1e:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 a22:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 a26:	5f 3f       	cpi	r21, 0xFF	; 255
 a28:	e4 f3       	brlt	.-8      	; 0xa22 <__mulsf3_pse+0x84>
 a2a:	98 3e       	cpi	r25, 0xE8	; 232
 a2c:	d4 f3       	brlt	.-12     	; 0xa22 <__mulsf3_pse+0x84>
 a2e:	86 95       	lsr	r24
 a30:	77 95       	ror	r23
 a32:	67 95       	ror	r22
 a34:	b7 95       	ror	r27
 a36:	f7 95       	ror	r31
 a38:	e7 95       	ror	r30
 a3a:	9f 5f       	subi	r25, 0xFF	; 255
 a3c:	c1 f7       	brne	.-16     	; 0xa2e <__mulsf3_pse+0x90>
 a3e:	fe 2b       	or	r31, r30
 a40:	88 0f       	add	r24, r24
 a42:	91 1d       	adc	r25, r1
 a44:	96 95       	lsr	r25
 a46:	87 95       	ror	r24
 a48:	97 f9       	bld	r25, 7
 a4a:	08 95       	ret

00000a4c <pow>:
 a4c:	fa 01       	movw	r30, r20
 a4e:	ee 0f       	add	r30, r30
 a50:	ff 1f       	adc	r31, r31
 a52:	30 96       	adiw	r30, 0x00	; 0
 a54:	21 05       	cpc	r18, r1
 a56:	31 05       	cpc	r19, r1
 a58:	a1 f1       	breq	.+104    	; 0xac2 <pow+0x76>
 a5a:	61 15       	cp	r22, r1
 a5c:	71 05       	cpc	r23, r1
 a5e:	61 f4       	brne	.+24     	; 0xa78 <pow+0x2c>
 a60:	80 38       	cpi	r24, 0x80	; 128
 a62:	bf e3       	ldi	r27, 0x3F	; 63
 a64:	9b 07       	cpc	r25, r27
 a66:	49 f1       	breq	.+82     	; 0xaba <pow+0x6e>
 a68:	68 94       	set
 a6a:	90 38       	cpi	r25, 0x80	; 128
 a6c:	81 05       	cpc	r24, r1
 a6e:	61 f0       	breq	.+24     	; 0xa88 <pow+0x3c>
 a70:	80 38       	cpi	r24, 0x80	; 128
 a72:	bf ef       	ldi	r27, 0xFF	; 255
 a74:	9b 07       	cpc	r25, r27
 a76:	41 f0       	breq	.+16     	; 0xa88 <pow+0x3c>
 a78:	99 23       	and	r25, r25
 a7a:	4a f5       	brpl	.+82     	; 0xace <pow+0x82>
 a7c:	ff 3f       	cpi	r31, 0xFF	; 255
 a7e:	e1 05       	cpc	r30, r1
 a80:	31 05       	cpc	r19, r1
 a82:	21 05       	cpc	r18, r1
 a84:	19 f1       	breq	.+70     	; 0xacc <pow+0x80>
 a86:	e8 94       	clt
 a88:	08 94       	sec
 a8a:	e7 95       	ror	r30
 a8c:	d9 01       	movw	r26, r18
 a8e:	aa 23       	and	r26, r26
 a90:	29 f4       	brne	.+10     	; 0xa9c <pow+0x50>
 a92:	ab 2f       	mov	r26, r27
 a94:	be 2f       	mov	r27, r30
 a96:	f8 5f       	subi	r31, 0xF8	; 248
 a98:	d0 f3       	brcs	.-12     	; 0xa8e <pow+0x42>
 a9a:	10 c0       	rjmp	.+32     	; 0xabc <pow+0x70>
 a9c:	ff 5f       	subi	r31, 0xFF	; 255
 a9e:	70 f4       	brcc	.+28     	; 0xabc <pow+0x70>
 aa0:	a6 95       	lsr	r26
 aa2:	e0 f7       	brcc	.-8      	; 0xa9c <pow+0x50>
 aa4:	f7 39       	cpi	r31, 0x97	; 151
 aa6:	50 f0       	brcs	.+20     	; 0xabc <pow+0x70>
 aa8:	19 f0       	breq	.+6      	; 0xab0 <pow+0x64>
 aaa:	ff 3a       	cpi	r31, 0xAF	; 175
 aac:	38 f4       	brcc	.+14     	; 0xabc <pow+0x70>
 aae:	9f 77       	andi	r25, 0x7F	; 127
 ab0:	9f 93       	push	r25
 ab2:	0d d0       	rcall	.+26     	; 0xace <pow+0x82>
 ab4:	0f 90       	pop	r0
 ab6:	07 fc       	sbrc	r0, 7
 ab8:	90 58       	subi	r25, 0x80	; 128
 aba:	08 95       	ret
 abc:	46 f0       	brts	.+16     	; 0xace <pow+0x82>
 abe:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>
 ac2:	60 e0       	ldi	r22, 0x00	; 0
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	80 e8       	ldi	r24, 0x80	; 128
 ac8:	9f e3       	ldi	r25, 0x3F	; 63
 aca:	08 95       	ret
 acc:	4f e7       	ldi	r20, 0x7F	; 127
 ace:	9f 77       	andi	r25, 0x7F	; 127
 ad0:	5f 93       	push	r21
 ad2:	4f 93       	push	r20
 ad4:	3f 93       	push	r19
 ad6:	2f 93       	push	r18
 ad8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <log>
 adc:	2f 91       	pop	r18
 ade:	3f 91       	pop	r19
 ae0:	4f 91       	pop	r20
 ae2:	5f 91       	pop	r21
 ae4:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 ae8:	0c 94 7e 05 	jmp	0xafc	; 0xafc <exp>
 aec:	29 f4       	brne	.+10     	; 0xaf8 <pow+0xac>
 aee:	16 f0       	brts	.+4      	; 0xaf4 <pow+0xa8>
 af0:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 af4:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_zero>
 af8:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>

00000afc <exp>:
 afc:	0e 94 40 04 	call	0x880	; 0x880 <__fp_splitA>
 b00:	a8 f3       	brcs	.-22     	; 0xaec <pow+0xa0>
 b02:	96 38       	cpi	r25, 0x86	; 134
 b04:	a0 f7       	brcc	.-24     	; 0xaee <pow+0xa2>
 b06:	07 f8       	bld	r0, 7
 b08:	0f 92       	push	r0
 b0a:	e8 94       	clt
 b0c:	2b e3       	ldi	r18, 0x3B	; 59
 b0e:	3a ea       	ldi	r19, 0xAA	; 170
 b10:	48 eb       	ldi	r20, 0xB8	; 184
 b12:	5f e7       	ldi	r21, 0x7F	; 127
 b14:	0e 94 cf 04 	call	0x99e	; 0x99e <__mulsf3_pse>
 b18:	0f 92       	push	r0
 b1a:	0f 92       	push	r0
 b1c:	0f 92       	push	r0
 b1e:	4d b7       	in	r20, 0x3d	; 61
 b20:	5e b7       	in	r21, 0x3e	; 62
 b22:	0f 92       	push	r0
 b24:	0e 94 27 06 	call	0xc4e	; 0xc4e <modf>
 b28:	ee ea       	ldi	r30, 0xAE	; 174
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_powser>
 b30:	4f 91       	pop	r20
 b32:	5f 91       	pop	r21
 b34:	ef 91       	pop	r30
 b36:	ff 91       	pop	r31
 b38:	e5 95       	asr	r30
 b3a:	ee 1f       	adc	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	49 f0       	breq	.+18     	; 0xb52 <exp+0x56>
 b40:	fe 57       	subi	r31, 0x7E	; 126
 b42:	e0 68       	ori	r30, 0x80	; 128
 b44:	44 27       	eor	r20, r20
 b46:	ee 0f       	add	r30, r30
 b48:	44 1f       	adc	r20, r20
 b4a:	fa 95       	dec	r31
 b4c:	e1 f7       	brne	.-8      	; 0xb46 <exp+0x4a>
 b4e:	41 95       	neg	r20
 b50:	55 0b       	sbc	r21, r21
 b52:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <ldexp>
 b56:	0f 90       	pop	r0
 b58:	07 fe       	sbrs	r0, 7
 b5a:	0c 94 e5 05 	jmp	0xbca	; 0xbca <inverse>
 b5e:	08 95       	ret

00000b60 <__fp_mpack>:
 b60:	9f 3f       	cpi	r25, 0xFF	; 255
 b62:	31 f0       	breq	.+12     	; 0xb70 <__fp_mpack_finite+0xc>

00000b64 <__fp_mpack_finite>:
 b64:	91 50       	subi	r25, 0x01	; 1
 b66:	20 f4       	brcc	.+8      	; 0xb70 <__fp_mpack_finite+0xc>
 b68:	87 95       	ror	r24
 b6a:	77 95       	ror	r23
 b6c:	67 95       	ror	r22
 b6e:	b7 95       	ror	r27
 b70:	88 0f       	add	r24, r24
 b72:	91 1d       	adc	r25, r1
 b74:	96 95       	lsr	r25
 b76:	87 95       	ror	r24
 b78:	97 f9       	bld	r25, 7
 b7a:	08 95       	ret

00000b7c <__fp_powser>:
 b7c:	df 93       	push	r29
 b7e:	cf 93       	push	r28
 b80:	1f 93       	push	r17
 b82:	0f 93       	push	r16
 b84:	ff 92       	push	r15
 b86:	ef 92       	push	r14
 b88:	df 92       	push	r13
 b8a:	7b 01       	movw	r14, r22
 b8c:	8c 01       	movw	r16, r24
 b8e:	68 94       	set
 b90:	06 c0       	rjmp	.+12     	; 0xb9e <__fp_powser+0x22>
 b92:	da 2e       	mov	r13, r26
 b94:	ef 01       	movw	r28, r30
 b96:	0e 94 cc 04 	call	0x998	; 0x998 <__mulsf3x>
 b9a:	fe 01       	movw	r30, r28
 b9c:	e8 94       	clt
 b9e:	a5 91       	lpm	r26, Z+
 ba0:	25 91       	lpm	r18, Z+
 ba2:	35 91       	lpm	r19, Z+
 ba4:	45 91       	lpm	r20, Z+
 ba6:	55 91       	lpm	r21, Z+
 ba8:	a6 f3       	brts	.-24     	; 0xb92 <__fp_powser+0x16>
 baa:	ef 01       	movw	r28, r30
 bac:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__addsf3x>
 bb0:	fe 01       	movw	r30, r28
 bb2:	97 01       	movw	r18, r14
 bb4:	a8 01       	movw	r20, r16
 bb6:	da 94       	dec	r13
 bb8:	69 f7       	brne	.-38     	; 0xb94 <__fp_powser+0x18>
 bba:	df 90       	pop	r13
 bbc:	ef 90       	pop	r14
 bbe:	ff 90       	pop	r15
 bc0:	0f 91       	pop	r16
 bc2:	1f 91       	pop	r17
 bc4:	cf 91       	pop	r28
 bc6:	df 91       	pop	r29
 bc8:	08 95       	ret

00000bca <inverse>:
 bca:	9b 01       	movw	r18, r22
 bcc:	ac 01       	movw	r20, r24
 bce:	60 e0       	ldi	r22, 0x00	; 0
 bd0:	70 e0       	ldi	r23, 0x00	; 0
 bd2:	80 e8       	ldi	r24, 0x80	; 128
 bd4:	9f e3       	ldi	r25, 0x3F	; 63
 bd6:	0c 94 2b 03 	jmp	0x656	; 0x656 <__divsf3>
 bda:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 bde:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_mpack>

00000be2 <ldexp>:
 be2:	0e 94 40 04 	call	0x880	; 0x880 <__fp_splitA>
 be6:	d8 f3       	brcs	.-10     	; 0xbde <inverse+0x14>
 be8:	99 23       	and	r25, r25
 bea:	c9 f3       	breq	.-14     	; 0xbde <inverse+0x14>
 bec:	94 0f       	add	r25, r20
 bee:	51 1d       	adc	r21, r1
 bf0:	a3 f3       	brvs	.-24     	; 0xbda <inverse+0x10>
 bf2:	91 50       	subi	r25, 0x01	; 1
 bf4:	50 40       	sbci	r21, 0x00	; 0
 bf6:	94 f0       	brlt	.+36     	; 0xc1c <ldexp+0x3a>
 bf8:	59 f0       	breq	.+22     	; 0xc10 <ldexp+0x2e>
 bfa:	88 23       	and	r24, r24
 bfc:	32 f0       	brmi	.+12     	; 0xc0a <ldexp+0x28>
 bfe:	66 0f       	add	r22, r22
 c00:	77 1f       	adc	r23, r23
 c02:	88 1f       	adc	r24, r24
 c04:	91 50       	subi	r25, 0x01	; 1
 c06:	50 40       	sbci	r21, 0x00	; 0
 c08:	c1 f7       	brne	.-16     	; 0xbfa <ldexp+0x18>
 c0a:	9e 3f       	cpi	r25, 0xFE	; 254
 c0c:	51 05       	cpc	r21, r1
 c0e:	2c f7       	brge	.-54     	; 0xbda <inverse+0x10>
 c10:	88 0f       	add	r24, r24
 c12:	91 1d       	adc	r25, r1
 c14:	96 95       	lsr	r25
 c16:	87 95       	ror	r24
 c18:	97 f9       	bld	r25, 7
 c1a:	08 95       	ret
 c1c:	5f 3f       	cpi	r21, 0xFF	; 255
 c1e:	ac f0       	brlt	.+42     	; 0xc4a <ldexp+0x68>
 c20:	98 3e       	cpi	r25, 0xE8	; 232
 c22:	9c f0       	brlt	.+38     	; 0xc4a <ldexp+0x68>
 c24:	bb 27       	eor	r27, r27
 c26:	86 95       	lsr	r24
 c28:	77 95       	ror	r23
 c2a:	67 95       	ror	r22
 c2c:	b7 95       	ror	r27
 c2e:	08 f4       	brcc	.+2      	; 0xc32 <ldexp+0x50>
 c30:	b1 60       	ori	r27, 0x01	; 1
 c32:	93 95       	inc	r25
 c34:	c1 f7       	brne	.-16     	; 0xc26 <ldexp+0x44>
 c36:	bb 0f       	add	r27, r27
 c38:	58 f7       	brcc	.-42     	; 0xc10 <ldexp+0x2e>
 c3a:	11 f4       	brne	.+4      	; 0xc40 <ldexp+0x5e>
 c3c:	60 ff       	sbrs	r22, 0
 c3e:	e8 cf       	rjmp	.-48     	; 0xc10 <ldexp+0x2e>
 c40:	6f 5f       	subi	r22, 0xFF	; 255
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	e3 cf       	rjmp	.-58     	; 0xc10 <ldexp+0x2e>
 c4a:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>

00000c4e <modf>:
 c4e:	fa 01       	movw	r30, r20
 c50:	dc 01       	movw	r26, r24
 c52:	aa 0f       	add	r26, r26
 c54:	bb 1f       	adc	r27, r27
 c56:	9b 01       	movw	r18, r22
 c58:	ac 01       	movw	r20, r24
 c5a:	bf 57       	subi	r27, 0x7F	; 127
 c5c:	28 f4       	brcc	.+10     	; 0xc68 <modf+0x1a>
 c5e:	22 27       	eor	r18, r18
 c60:	33 27       	eor	r19, r19
 c62:	44 27       	eor	r20, r20
 c64:	50 78       	andi	r21, 0x80	; 128
 c66:	20 c0       	rjmp	.+64     	; 0xca8 <modf+0x5a>
 c68:	b7 51       	subi	r27, 0x17	; 23
 c6a:	90 f4       	brcc	.+36     	; 0xc90 <modf+0x42>
 c6c:	ab 2f       	mov	r26, r27
 c6e:	00 24       	eor	r0, r0
 c70:	46 95       	lsr	r20
 c72:	37 95       	ror	r19
 c74:	27 95       	ror	r18
 c76:	01 1c       	adc	r0, r1
 c78:	a3 95       	inc	r26
 c7a:	d2 f3       	brmi	.-12     	; 0xc70 <modf+0x22>
 c7c:	00 20       	and	r0, r0
 c7e:	71 f0       	breq	.+28     	; 0xc9c <modf+0x4e>
 c80:	22 0f       	add	r18, r18
 c82:	33 1f       	adc	r19, r19
 c84:	44 1f       	adc	r20, r20
 c86:	b3 95       	inc	r27
 c88:	da f3       	brmi	.-10     	; 0xc80 <modf+0x32>
 c8a:	0e d0       	rcall	.+28     	; 0xca8 <modf+0x5a>
 c8c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__subsf3>
 c90:	61 30       	cpi	r22, 0x01	; 1
 c92:	71 05       	cpc	r23, r1
 c94:	a0 e8       	ldi	r26, 0x80	; 128
 c96:	8a 07       	cpc	r24, r26
 c98:	b9 46       	sbci	r27, 0x69	; 105
 c9a:	30 f4       	brcc	.+12     	; 0xca8 <modf+0x5a>
 c9c:	9b 01       	movw	r18, r22
 c9e:	ac 01       	movw	r20, r24
 ca0:	66 27       	eor	r22, r22
 ca2:	77 27       	eor	r23, r23
 ca4:	88 27       	eor	r24, r24
 ca6:	90 78       	andi	r25, 0x80	; 128
 ca8:	30 96       	adiw	r30, 0x00	; 0
 caa:	21 f0       	breq	.+8      	; 0xcb4 <modf+0x66>
 cac:	20 83       	st	Z, r18
 cae:	31 83       	std	Z+1, r19	; 0x01
 cb0:	42 83       	std	Z+2, r20	; 0x02
 cb2:	53 83       	std	Z+3, r21	; 0x03
 cb4:	08 95       	ret

00000cb6 <__udivmodsi4>:
 cb6:	a1 e2       	ldi	r26, 0x21	; 33
 cb8:	1a 2e       	mov	r1, r26
 cba:	aa 1b       	sub	r26, r26
 cbc:	bb 1b       	sub	r27, r27
 cbe:	fd 01       	movw	r30, r26
 cc0:	0d c0       	rjmp	.+26     	; 0xcdc <__udivmodsi4_ep>

00000cc2 <__udivmodsi4_loop>:
 cc2:	aa 1f       	adc	r26, r26
 cc4:	bb 1f       	adc	r27, r27
 cc6:	ee 1f       	adc	r30, r30
 cc8:	ff 1f       	adc	r31, r31
 cca:	a2 17       	cp	r26, r18
 ccc:	b3 07       	cpc	r27, r19
 cce:	e4 07       	cpc	r30, r20
 cd0:	f5 07       	cpc	r31, r21
 cd2:	20 f0       	brcs	.+8      	; 0xcdc <__udivmodsi4_ep>
 cd4:	a2 1b       	sub	r26, r18
 cd6:	b3 0b       	sbc	r27, r19
 cd8:	e4 0b       	sbc	r30, r20
 cda:	f5 0b       	sbc	r31, r21

00000cdc <__udivmodsi4_ep>:
 cdc:	66 1f       	adc	r22, r22
 cde:	77 1f       	adc	r23, r23
 ce0:	88 1f       	adc	r24, r24
 ce2:	99 1f       	adc	r25, r25
 ce4:	1a 94       	dec	r1
 ce6:	69 f7       	brne	.-38     	; 0xcc2 <__udivmodsi4_loop>
 ce8:	60 95       	com	r22
 cea:	70 95       	com	r23
 cec:	80 95       	com	r24
 cee:	90 95       	com	r25
 cf0:	9b 01       	movw	r18, r22
 cf2:	ac 01       	movw	r20, r24
 cf4:	bd 01       	movw	r22, r26
 cf6:	cf 01       	movw	r24, r30
 cf8:	08 95       	ret

00000cfa <__tablejump2__>:
 cfa:	ee 0f       	add	r30, r30
 cfc:	ff 1f       	adc	r31, r31
 cfe:	05 90       	lpm	r0, Z+
 d00:	f4 91       	lpm	r31, Z
 d02:	e0 2d       	mov	r30, r0
 d04:	09 94       	ijmp

00000d06 <_exit>:
 d06:	f8 94       	cli

00000d08 <__stop_program>:
 d08:	ff cf       	rjmp	.-2      	; 0xd08 <__stop_program>
